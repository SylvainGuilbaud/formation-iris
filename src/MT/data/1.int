ROUTINE MT.data.1 [Type=INT,Generated]
 ;MT.data.1
 ;Generated for class MT.data.  Do NOT edit. 09/18/2023 10:08:27PM
 ;;454E6F76;MT.data
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") methodimpl {
	try {
		set journal=$$CURRENT^%SYS.NOJRN()
		if ($ll(pIndexList)=1)&&($lg(pIndexList)="") { return 1 }
		set locked=0,sc=1,ptr=0
		While $listnext(pIndexList,ptr,tIndex) {
			continue:tIndex=""
			If '$d(^oddCOM($classname(),"i",tIndex)) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		if pJournalFlag=0,journal { try { do DISABLE^%SYS.NOJRN() } catch { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(1151)) } }
		if pJournalFlag=1,'journal { try { do ENABLE^%SYS.NOJRN() } catch { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(1151)) } }
		if pLockFlag = 1||(pLockFlag=3) { set SQLCODE=0 do ..%SQLAcquireTableLock($select(pLockFlag=3:1,1:0),.SQLCODE) if SQLCODE { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5540,SQLCODE,$g(%msg))) } else { set locked=1 } }
		if $system.CLS.IsMthd("%OnBeforeBuildIndices") { set sc=..%OnBeforeBuildIndices(.pIndexList) if ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) } }
		if ($ll(pIndexList)'=1)||($lg(pIndexList)'="") {
			if pAutoPurge,pStartID="",pEndID="" { set sc = ..%PurgeIndices(pIndexList,,pIgnoreIndexList) if ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) } }
			set sc=..%SQLBuildIndices(pIndexList,pLockFlag,pStartID,pEndID,pIgnoreIndexList) if ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
			if $system.CLS.IsMthd("%OnAfterBuildIndices") { set sc=..%OnAfterBuildIndices(.pIndexList) if ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) } }
		}
	}
	catch tException {
		set sc = tException.AsStatus()
	}
	if locked { do ..%SQLReleaseTableLock($select(pLockFlag=3:1,1:0)) }
	if $$CURRENT^%SYS.NOJRN()'=journal { if journal { do ENABLE^%SYS.NOJRN() } else { do DISABLE^%SYS.NOJRN() } }
	quit sc }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) methodimpl {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM %NOPARALLEL MT.data)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, tID
	 
	 ;---&sql(open ext)
	if $g(%ext0241)'="" { s SQLCODE=-101 } else { try { s %ext0241="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EZGqF7PGXyKdPJRDDlaNmzCRYy8",%ext0241=$classmethod(%ext0241,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%ext0241)),$ze'["<ZSQLU>" { throw } } if '$isobject(%ext0241) { s %ext0241=$$%0dsqlA() } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0241))'=1 { s SQLCODE=-102 } else { do %ext0241.FET() }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0241)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0241 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM %NOPARALLEL MT . data"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",),",0,ext,","MT.data.CLS",1)
	i $g(SQLCODE) { s tID="" }
	q %xxoref
%ComposeOid(id) methodimpl {
	set tSC = ..%OnDetermineClass(id,.tClass)
	quit $Select((''tSC):$select(id="":"",1:$listbuild(id_"",tClass)),1:"") }
%DeleteData(id,concurrency) methodimpl
 Quit:id="" $$Error^%apiOBJ(5812) New %sc Set %sc=1
 If concurrency>1 If '..%SQLAcquireLock(id) Quit $$Error^%apiOBJ(5803,$classname())
 n %ROWCOUNT,%ROWID,%msg,%ok,SQLCODE
  ;---&sql(DELETE %OBJECTFILER FROM MT.data WHERE %ID=:id)
   ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
 try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ERHPFFW57ZFp14zWKxKQy2RxVBZ","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ERHPFFW57ZFp14zWKxKQy2RxVBZ"))||($ze["<ZSQLU>") { d %0dsqlD } else { throw } }
 if SQLCODE = 100 { set %sc=$$Error^%apiOBJ(5810,$classname(),id) } elseif SQLCODE { Set %sc=$$Error^%apiOBJ(5521,SQLCODE,$g(%msg)) }
 If concurrency>1 Do ..%SQLReleaseLock(id)
 Quit %sc
%0dsqlD	n %xxsql
	s %xxsql("S",1)="DELETE %OBJECTFILER FROM MT . data WHERE %ID = :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",$lb("MT.data","D")),,"MT.data.CLS")
	return
%Exists(oid="") methodimpl
	New SQLCODE,id,id2,%ROWCOUNT,%ROWID,%msg
	Set id=$listget(oid)
	 ;---&sql(SELECT %ID INTO :id2 FROM MT.data WHERE %ID=:id)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, id2
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E6duz3kA5puSS99V5XYvwbvdBpA","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E6duz3kA5puSS99V5XYvwbvdBpA"))||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	Quit $select(SQLCODE:0,id'=id2:0,1:1)
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id2 FROM MT . data WHERE %ID = :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",),,"MT.data.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id2="" } catch {} }
	return
%JSONExportInternal() methodimpl {
  Set sc=1
  Write "{" Set sep=""
  Set value=..firstname
  If value'="" {
    Write sep_"""firstname"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..lastname
  If value'="" {
    Write sep_"""lastname"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..dob
  If value'="" {
    Write sep_"""dob"":"""_$select(value="":"",1:$zdate(value,3,,,,,-672045))_""""
    Set $extract(sep,1)=","
  }
  Set value=..gender
  If value'="" {
    Write sep_"""gender"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..title
  If value'="" {
    Write sep_"""title"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Key1
  If value'="" {
    Write sep_"""Key1"":"_value
    Set $extract(sep,1)=","
  }
  Set value=..Key2
  If value'="" {
    Write sep_"""Key2"":"_value
    Set $extract(sep,1)=","
  }
  Set value=..Key3
  If value'="" {
    Write sep_"""Key3"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..CodeProduit
  If value'="" {
    Write sep_"""CodeProduit"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Key5
  If value'="" {
    Write sep_"""Key5"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Write "}"
%JSONExportExit Quit sc }
%JSONExportToStringInternal() methodimpl {
  Set sc=1
  Set %export=%export_"{" Set sep=""
  Set value=..firstname
  If value'="" {
    Set %export=%export_sep_"""firstname"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..lastname
  If value'="" {
    Set %export=%export_sep_"""lastname"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..dob
  If value'="" {
    Set %export=%export_sep_"""dob"":"""_$select(value="":"",1:$zdate(value,3,,,,,-672045))_""""
    Set $extract(sep,1)=","
  }
  Set value=..gender
  If value'="" {
    Set %export=%export_sep_"""gender"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..title
  If value'="" {
    Set %export=%export_sep_"""title"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Key1
  If value'="" {
    Set %export=%export_sep_"""Key1"":"_value
    Set $extract(sep,1)=","
  }
  Set value=..Key2
  If value'="" {
    Set %export=%export_sep_"""Key2"":"_value
    Set $extract(sep,1)=","
  }
  Set value=..Key3
  If value'="" {
    Set %export=%export_sep_"""Key3"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..CodeProduit
  If value'="" {
    Set %export=%export_sep_"""CodeProduit"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Key5
  If value'="" {
    Set %export=%export_sep_"""Key5"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set %export=%export_"}"
%JSONExportExitToString Quit sc }
%JSONImportInternal() methodimpl {
  Set sc=1
  Set testInvalidField=1
  Set proplist("firstname")=""
  Set field="firstname" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..firstname=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.firstname
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..firstname=data
    }
  }
  Set proplist("lastname")=""
  Set field="lastname" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..lastname=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.lastname
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..lastname=data
    }
  }
  Set proplist("dob")=""
  Set field="dob" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..dob=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.dob
      Set data=$select(data="":"",1:$zdateh(data,3,,,,,-672045,,"")) Goto:data="" %JSONImportError If ('$s($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,0,-672045,2980013):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<-672045:$$Error^%apiOBJ(7204,data,-672045),1:$$Error^%apiOBJ(7203,data,2980013))) Goto %JSONImportError
      Set ..dob=data
    }
  }
  Set proplist("gender")=""
  Set field="gender" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..gender=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.gender
      If ('$s(($l(data)'>1):1,1:$$Error^%apiOBJ(7201,data,1))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..gender=data
    }
  }
  Set proplist("title")=""
  Set field="title" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..title=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.title
      If data="" Set data=$c(0)
      Set ..title=data
    }
  }
  Set proplist("Key1")=""
  Set field="Key1" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Goto %JSONImportRequired
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.Key1
      Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" %JSONImportError If ('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) Goto %JSONImportError
      Set ..Key1=data
    }
  } Else { Goto %JSONImportRequired }
  Set proplist("Key2")=""
  Set field="Key2" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Goto %JSONImportRequired
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.Key2
      Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" %JSONImportError If ('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) Goto %JSONImportError
      Set ..Key2=data
    }
  } Else { Goto %JSONImportRequired }
  Set proplist("Key3")=""
  Set field="Key3" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Goto %JSONImportRequired
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Key3
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..Key3=data
    }
  } Else { Goto %JSONImportRequired }
  Set proplist("CodeProduit")=""
  Set field="CodeProduit" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Goto %JSONImportRequired
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.CodeProduit
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..CodeProduit=data
    }
  } Else { Goto %JSONImportRequired }
  Set proplist("Key5")=""
  Set field="Key5" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Goto %JSONImportRequired
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Key5
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..Key5=data
    }
  } Else { Goto %JSONImportRequired }
  If $get(testInvalidField) {
    Set invalid=0,iterator=%JSONObject.%GetIterator()
    While iterator.%GetNext(.key,.value) { If $data(proplist(key))=0 Set invalid=1 Quit  }
    If invalid Quit $$Error^%apiOBJ(9404,key,$select(%mappingName="":"class base",1:%mappingName))
  }
%JSONImportExit Quit sc
%JSONImportError Quit $$Error^%apiOBJ(9406,field,$select(%mappingName="":"class base",1:%mappingName))
%JSONImportRequired Quit $$Error^%apiOBJ(9405,field,$select(%mappingName="":"class base",1:%mappingName)) }
%JSONNew(dynamicObject,containerOref="") methodimpl {
  Quit ##class(MT.data).%New()
}
%KillExtentData(killstreams=0) methodimpl {
	RETURN $$Error^%apiOBJ(5758,"%Storage.SQL::%KillExtentData, in order to call %KillExtent() on a class using %Storage.SQL, %KillExtentData must be overridden and implemented in this class") }
%LoadData(id) methodimpl
 n %ROWCOUNT,%ROWID,%msg,%ok,%sc,SQLCODE,temp0
 Set %sc=0
 If i%%Concurrency=4 If '..%SQLAcquireLock(id) Quit $$Error^%apiOBJ(5803,$classname())
 If i%%Concurrency'=4,i%%Concurrency>1 If '..%SQLAcquireLock(id,1) Quit $$Error^%apiOBJ(5804,$classname())
  ;---&sql(SELECT %ID,CodeProduit,Key1,Key2,Key3,Key5,dob,firstname,gender,lastname,title
   ;--- 	   INTO :temp0,:i%CodeProduit,:i%Key1,:i%Key2,:i%Key3,:i%Key5,:i%dob,:i%firstname,:i%gender,:i%lastname,:i%title
   ;--- 	   FROM MT.data
   ;--- 	  WHERE %ID=:id)
   ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, temp0
 d %0dsqlJ
 If SQLCODE Set i%CodeProduit="",i%Key1="",i%Key2="",i%Key3="",i%Key5="",i%dob="",i%firstname="",i%gender="",i%lastname="",i%title=""
 Else  Do
 . Set %sc=1
 If i%%Concurrency=2 Do ..%SQLReleaseLock(id,1)
 Quit $Select((''%sc):1,1:$$Error^%apiOBJ(5809,$classname(),id))
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT %ID , CodeProduit , Key1 , Key2 , Key3 , Key5 , dob , firstname , gender , lastname , title INTO :temp0 , :sqltmp2 , :sqltmp3 , :sqltmp4 , :sqltmp5 , :sqltmp6 , :sqltmp7 , :sqltmp8 , :sqltmp9 , :sqltmp10 , :sqltmp11 FROM MT . data WHERE %ID = :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",$lb("MT.data","L")),,"MT.data.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set temp0="",i%CodeProduit="",i%Key1="",i%Key2="",i%Key3="",i%Key5="",i%dob="",i%firstname="",i%gender="",i%lastname="",i%title="" } catch {} }
	return
%0dsqlJ	n sqltmp2,sqltmp3,sqltmp4,sqltmp5,sqltmp6,sqltmp7,sqltmp8,sqltmp9,sqltmp10,sqltmp11
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ei7tIsPVXRBbl8w6SiIBmvp1iLz","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ei7tIsPVXRBbl8w6SiIBmvp1iLz"))||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	try { s i%CodeProduit=$g(sqltmp2),i%Key1=$g(sqltmp3),i%Key2=$g(sqltmp4),i%Key3=$g(sqltmp5),i%Key5=$g(sqltmp6),i%dob=$g(sqltmp7),i%firstname=$g(sqltmp8),i%gender=$g(sqltmp9),i%lastname=$g(sqltmp10),i%title=$g(sqltmp11) } catch { s SQLCODE=-400,%msg="Runtime error setting INTO values: "_$zerror }
	q
%LockExtent(shared=0) methodimpl {
	Quit $Select(..%SQLAcquireTableLock(shared):1,1:$$Error^%apiOBJ($Select('shared:5803,1:5804),$classname())) }
%LockId(id,shared=0,timeout) methodimpl {
	If id="" Quit $$Error^%apiOBJ(5812)
	If $get(timeout)'="" Set oldtimeout=$zutil(115,4,timeout)
	Try { Set rc=..%SQLAcquireLock(id,shared) Do:$get(timeout)'="" $zutil(115,4,oldtimeout) } Catch { Do:$get(timeout)'="" $zutil(115,4,oldtimeout) Throw }
	If 'rc Quit $$Error^%apiOBJ($Select('shared:5803,1:5804),id_":"_$classname())
	Quit 1 }
%NormalizeObject() methodimpl {
	If '$system.CLS.GetModified() Quit 1
	If m%CodeProduit Set:i%CodeProduit'="" i%CodeProduit=(..CodeProduitNormalize(i%CodeProduit))
	If m%Key1 Set:i%Key1'="" i%Key1=(..Key1Normalize(i%Key1))
	If m%Key2 Set:i%Key2'="" i%Key2=(..Key2Normalize(i%Key2))
	If m%Key3 Set:i%Key3'="" i%Key3=(..Key3Normalize(i%Key3))
	If m%Key5 Set:i%Key5'="" i%Key5=(..Key5Normalize(i%Key5))
	If m%dob Set:i%dob'="" i%dob=(..dobNormalize(i%dob))
	If m%firstname Set:i%firstname'="" i%firstname=(..firstnameNormalize(i%firstname))
	If m%gender Set:i%gender'="" i%gender=(..genderNormalize(i%gender))
	If m%lastname Set:i%lastname'="" i%lastname=(..lastnameNormalize(i%lastname))
	If m%title Set:i%title'="" i%title=(..titleNormalize(i%title))
	Quit 1 }
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") methodimpl {
	if ($listlength(idxlist)=1)&&($listget(idxlist)="") { return 1 }
	s $ZTrap="CatchError",locked=0,sc=1
	i lockExtent { d ..%SQLAcquireTableLock(0,.SQLCODE) i SQLCODE { q $$Error^%apiOBJ(5540,SQLCODE,$g(%msg)) } else { s locked=1 } }
	if $system.CLS.IsMthd("%OnBeforePurgeIndices") { set sc=..%OnBeforePurgeIndices(.idxlist) i (('sc))||(($ll(idxlist)=1)&&($lg(idxlist)="")) { i locked { d ..%SQLReleaseTableLock(0) } quit sc } }
	s sc=..%SQLPurgeIndices(idxlist,lockExtent,pIgnoreIndexList)
	if $system.CLS.IsMthd("%OnAfterPurgeIndices") { set sc=..%OnAfterPurgeIndices(.idxlist) }
	i locked { d ..%SQLReleaseTableLock(0) }
	q sc
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } i locked { d ..%SQLReleaseLock(0) } q sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0) methodimpl
	new %d,gotlock
	set %d(1)=%rowid,%d(3)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),%d(5)=$p(%d(1),"||",3),%d(2)=$p(%d(1),"||",4),%d(6)=$p(%d(1),"||",5) set s=$e("S",s)
	lock +^data(%d(3),%d(4),%d(5),%d(2),%d(6))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^data(%d(3),%d(4),%d(5),%d(2),%d(6))),"MT.data",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="") methodimpl
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^data#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"MT"_"."_"data") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"MT"_"."_"data") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
	RETURN ..%SQLBuildPurgeIndices(pIndices,1,pLockFlag,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndices(pIndices="",pBuild,pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
		// Create/Delete data from index global(s), return Status Code
	QUIT 1
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
	 ;---&sql(SELECT ID FROM MT.data WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EagZ50HwwwkzlgzRPd8dqF0YVP2","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EagZ50HwwwkzlgzRPd8dqF0YVP2"))||($ze["<ZSQLU>") { d %0dsqlL } else { throw } } QUIT SQLCODE=100
 q
%0dsqlL	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM MT . data WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",),,"MT.data.CLS")
	return
%SQLCheckUniqueIndices(pIndices,pOK) methodimpl
	new d,g,n,o set d=0
	set pOK=1 QUIT
%SQLDefineiDjVars(%d,subs,master) methodimpl
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0,%bufferedColumns=0) methodimpl
	// SQL DELETE method for table MT.data
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(3)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),%d(5)=$p(%d(1),"||",3),%d(2)=$p(%d(1),"||",4),%d(6)=$p(%d(1),"||",5),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("MT.data"))>$zu(156,50,1) { lock +^data:$zu(115,4) lock:$t -^data set %ls=$s($t:2,1:0) } else { lock +^data(%d(3),%d(4),%d(5),%d(2),%d(6)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"MT"_"."_"data",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDIdx")="%d(3),%d(4),%d(5),%d(2),%d(6),,,,,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","MT.data",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","MT.data",%k,"f",%t)) quit:%t=""  set %st=(%t="MT.data") set %fk="" for  set %fk=$o(^rINDEXEXT("F","MT.data",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("MT","data","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^data(%d(3),%d(4),%d(5),%d(2),%d(6))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"MT"_"."_"data",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"MT"_"."_"data") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams() methodimpl
	// Delete all temporary streams
	QUIT
%SQLEExit() methodimpl
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"MT"_"."_"data"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef) methodimpl
	if $tlevel,$i(%0CacheLock("MT.data"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^data#s:$zu(115,4) lock:$t -^data#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOldAll() methodimpl
	new s set %d(1)=%rowid,%d(3)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),%d(5)=$p(%d(1),"||",3),%d(2)=$p(%d(1),"||",4),%d(6)=$p(%d(1),"||",5),s="" if '$d(^data(%d(3),%d(4),%d(5),%d(2),%d(6)),s) { set sqlcode=100 quit  }
	 S %e(8)=$p(s,"\"),%e(10)=$p(s,"\",2),%e(7)=$p(s,"\",3),%e(9)=$p(s,"\",4),%e(11)=$p(s,"\",5)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0,%bufferedColumns=0) methodimpl
	// SQL INSERT method for table MT.data
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) { if $g(%d(3))="" { do ..%SQLMissing("Key1") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(4))="" { do ..%SQLMissing("Key2") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(5))="" { do ..%SQLMissing("Key3") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(2))="" { do ..%SQLMissing("CodeProduit") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(6))="" { do ..%SQLMissing("Key5") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set %d(1)=%d(3)_"||"_%d(4)_"||"_%d(5)_"||"_%d(2)_"||"_%d(6)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			new %unlockcon
				// Constraint IDIdx
				if '$a(%check,2) { lock +^data("IDIdx",%d(3),%d(4),%d(5),%d(2),%d(6)):$zu(115,4) if $t { set %unlockcon(16)=$name(^data("IDIdx",%d(3),%d(4),%d(5),%d(2),%d(6))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDIdx") quit  } }
				if '$a(%check,7) { if '..IDIdxSQLCheckUnique(0,,%d(3),%d(4),%d(5),%d(2),%d(6)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"MT"_"."_"data","IDIdx","Key1"_"="_$$quoter^%apiSQL($g(%d(3)))_","_"Key2"_"="_$$quoter^%apiSQL($g(%d(4)))_","_"Key3"_"="_$$quoter^%apiSQL($g(%d(5)))_","_"CodeProduit"_"="_$$quoter^%apiSQL($g(%d(2)))_","_"Key5"_"="_$$quoter^%apiSQL($g(%d(6)))) quit  }} // INSERT
				else { new tID set tID=..IDIdxSQLFindRowIDByConstraint($lb(%d(3),%d(4),%d(5),%d(2),%d(6)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("MT.data"))>$zu(156,50,1) { lock +^data:$zu(115,4) lock:$t -^data set %ls=$s($t:2,1:0) } else { lock +^data(%d(3),%d(4),%d(5),%d(2),%d(6)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"MT"_"."_"data",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^data(%d(3),%d(4),%d(5),%d(2),%d(6))=$g(%d(8))_"\"_$g(%d(10))_"\"_$g(%d(7))_"\"_$g(%d(9))_"\"_$g(%d(11))
	lock:$a(%l,2) -@(%unlockcon(16)_"#""D""") 
	lock:$a(%l) -^data(%d(3),%d(4),%d(5),%d(2),%d(6))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"MT"_"."_"data",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"MT"_"."_"data") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) methodimpl {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"MT"_"."_"data"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname) methodimpl
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"MT"_"."_"data") quit
%SQLNormalizeFields() methodimpl
	set:$g(%d(7))'="" %d(7)=$s($zu(115,13)&&(%d(7)=$c(0)):"",1:%d(7)\1)
	new %f for %f=3,4 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="") methodimpl
	RETURN ..%SQLBuildPurgeIndices(pIndices,0,,,,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0) methodimpl
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"MT"_"."_"data",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(3)=$p(d(1),"||",1),d(4)=$p(d(1),"||",2),d(5)=$p(d(1),"||",3),d(2)=$p(d(1),"||",4),d(6)=$p(d(1),"||",5)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^data(d(3),d(4),d(5),d(2),d(6))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"MT"_"."_"data",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^data(d(3),d(4),d(5),d(2),d(6)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(7)=$p(s,"\",3) set d(8)=$p(s,"\") set d(9)=$p(s,"\",4) set d(10)=$p(s,"\",2) set d(11)=$p(s,"\",5)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^data(d(3),d(4),d(5),d(2),d(6))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("MT.data",18),d=11,d=$zobjexport(d,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^data(d(3),d(4),d(5),d(2),d(6))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLReleaseLock(%rowid,s=0,i=0,e="") methodimpl
	new %d
	set %d(1)=%rowid,%d(3)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),%d(5)=$p(%d(1),"||",3),%d(2)=$p(%d(1),"||",4),%d(6)=$p(%d(1),"||",5) set s=$e("S",s)_$e("D",i)
	lock -^data(%d(3),%d(4),%d(5),%d(2),%d(6))#s
	set:i&&($g(%0CacheLock("MT.data"))) %0CacheLock("MT.data")=%0CacheLock("MT.data")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0) methodimpl
	set s=$e("S",s)_$e("D",i) lock -^data#s QUIT 1
	Return
%SQLUnlock() methodimpl
	lock:$a(%l) -^data(%d(3),%d(4),%d(5),%d(2),%d(6))
	QUIT
%SQLUnlock2() methodimpl
	lock:$a(%l,2) -@(%unlockcon(16)_"#""D""") QUIT
%SQLUnlockError(cname) methodimpl
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"MT"_"."_"data",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"MT"_"."_"data",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid,%bufferedColumns=0,%bufferedColumnsDel=0) methodimpl
	// SQL UPDATE method for table MT.data
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'$a(%check,7),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",1)))||($d(%d(4))&&($g(%d(4))'=$p(%rowid,"||",2)))||($d(%d(5))&&($g(%d(5))'=$p(%rowid,"||",3)))||($d(%d(2))&&($g(%d(2))'=$p(%rowid,"||",4)))||($d(%d(6))&&($g(%d(6))'=$p(%rowid,"||",5))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'Key1', 'Key2', 'Key3', 'CodeProduit', or 'Key5'","MT"_"."_"data") QUIT  }
	for icol=2:1:11 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(3)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),%d(5)=$p(%d(1),"||",3),%d(2)=$p(%d(1),"||",4),%d(6)=$p(%d(1),"||",5)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("MT.data"))>$zu(156,50,1) { lock +^data:$zu(115,4) lock:$t -^data set %ls=$s($t:2,1:0) } else { lock +^data(%d(3),%d(4),%d(5),%d(2),%d(6)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"MT"_"."_"data",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"MT"_"."_"data",%rowid) do ..%SQLEExit() QUIT  } for icol=7,8,9,10,11 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$s($a(%e,7):1,$a(%e,8):1,$a(%e,9):1,$a(%e,10):1,1:$a(%e,11)) s=$g(^data(%d(3),%d(4),%d(5),%d(2),%d(6))),^data(%d(3),%d(4),%d(5),%d(2),%d(6))=$s($a(%e,8):%d(8),1:$p(s,"\"))_"\"_$s($a(%e,10):%d(10),1:$p(s,"\",2))_"\"_$s($a(%e,7):%d(7),1:$p(s,"\",3))_"\"_$s($a(%e,9):%d(9),1:$p(s,"\",4))_"\"_$s($a(%e,11):%d(11),1:$p(s,"\",5))_$s($p(s,"\",6,3641144)="":"",1:"\"_$p(s,"\",6,3641144))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"MT"_"."_"data",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"MT"_"."_"data") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateCompFields(sqlcode) methodimpl
	QUIT 'sqlcode
%SQLValidateFields(sqlcode) methodimpl
	if $g(%d(7))'="",'($s($zu(115,13)&&(%d(7)=$c(0)):1,$isvalidnum(%d(7),0,-672045,2980013):1,'$isvalidnum(%d(7)):$$Error^%apiOBJ(7207,%d(7)),%d(7)<-672045:$$Error^%apiOBJ(7204,%d(7),-672045),1:$$Error^%apiOBJ(7203,%d(7),2980013))) { set sqlcode=..%SQLInvalid(7+1,%d(7)) } 
	new %f for %f=3,4 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(9))'="",'(($l(%d(9))'>1)) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	for %f=2,5,6,8,10 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() methodimpl {
	set %n=$lb(,"ID","CodeProduit","Key1","Key2","Key3","Key5","dob","firstname","gender","lastname","title")
	QUIT }
%SaveData(id) methodimpl
	New %ROWCOUNT,%ROWID,%msg,%ok,%sc,SQLCODE,lock,notexist,temp
	Set id=$listget(i%"%%OID") If id'="" Goto saveDataUpdate
saveDataInsert	Set lock=0,%sc=1
	 ;---&sql(INSERT %OBJECTFILER INTO MT.data(CodeProduit,Key1,Key2,Key3,Key5,dob,firstname,gender,lastname,title)
 	 ;---	             VALUES (:i%CodeProduit,:i%Key1,:i%Key2,:i%Key3,:i%Key5,:i%dob,:i%firstname,:i%gender,:i%lastname,:i%title))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	d %0dsqlP
	If SQLCODE Quit $$Error^%apiOBJ(5521,SQLCODE,$get(%msg))
	Set id=%ROWID Set sc=..%IdSet(id) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
	Set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)=""
	If i%%Concurrency=4 If '..%SQLAcquireLock(id) Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	If i%%Concurrency=3 If '..%SQLAcquireLock(id,1) Quit $$Error^%apiOBJ(5804,id_":"_$classname())
	If lock Do ..%SQLReleaseLock(id)
	Quit %sc
saveDataUpdate	Set lock=0,notexist=0,%sc=1
	If i%%Concurrency>1 Set lock=..%SQLAcquireLock(id) If 'lock Set %sc=$$Error^%apiOBJ(5803,id_":"_$classname()) Quit %sc
	 ;---&sql(UPDATE %OBJECTFILER MT.data SET CodeProduit = :i%CodeProduit,Key1 = :i%Key1,Key2 = :i%Key2,Key3 = :i%Key3,Key5 = :i%Key5,dob = :i%dob,firstname = :i%firstname,gender = :i%gender,lastname = :i%lastname,title = :i%title WHERE %ID=:id)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
	d %0dsqlT
	If SQLCODE=100 { s notexist=1 } ElseIf SQLCODE { Set %sc=$$Error^%apiOBJ(5521,SQLCODE,$g(%msg)) }
	If notexist { If lock { Do ..%SQLReleaseLock(id) } Goto saveDataInsert }
	If lock Do ..%SQLReleaseLock(id)
	Quit %sc
 q
%0dsqlN	n %xxsql
	s %xxsql("S",1)="INSERT %OBJECTFILER INTO MT . data ( CodeProduit , Key1 , Key2 , Key3 , Key5 , dob , firstname , gender , lastname , title ) VALUES ( :sqltmp1 , :sqltmp2 , :sqltmp3 , :sqltmp4 , :sqltmp5 , :sqltmp6 , :sqltmp7 , :sqltmp8 , :sqltmp9 , :sqltmp10 )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",$lb("MT.data","SDI")),,"MT.data.CLS")
	return
%0dsqlP	n sqltmp1,sqltmp2,sqltmp3,sqltmp4,sqltmp5,sqltmp6,sqltmp7,sqltmp8,sqltmp9,sqltmp10
	s sqltmp1=i%CodeProduit,sqltmp2=i%Key1,sqltmp3=i%Key2,sqltmp4=i%Key3,sqltmp5=i%Key5,sqltmp6=i%dob,sqltmp7=i%firstname,sqltmp8=i%gender,sqltmp9=i%lastname,sqltmp10=i%title
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Eq4oNplmUas5j7MjI825ifb28Wl","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Eq4oNplmUas5j7MjI825ifb28Wl"))||($ze["<ZSQLU>") { d %0dsqlN } else { throw } }
	q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="UPDATE %OBJECTFILER MT . data SET CodeProduit = :sqltmp1 , Key1 = :sqltmp2 , Key2 = :sqltmp3 , Key3 = :sqltmp4 , Key5 = :sqltmp5 , dob = :sqltmp6 , firstname = :sqltmp7 , gender = :sqltmp8 , lastname = :sqltmp9 , title = :sqltmp10 WHERE %ID = :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",$lb("MT.data","SU")),,"MT.data.CLS")
	return
%0dsqlT	n sqltmp1,sqltmp2,sqltmp3,sqltmp4,sqltmp5,sqltmp6,sqltmp7,sqltmp8,sqltmp9,sqltmp10
	s sqltmp1=i%CodeProduit,sqltmp2=i%Key1,sqltmp3=i%Key2,sqltmp4=i%Key3,sqltmp5=i%Key5,sqltmp6=i%dob,sqltmp7=i%firstname,sqltmp8=i%gender,sqltmp9=i%lastname,sqltmp10=i%title
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EGpPU6gFEgK0hdiRBfWhS85vW1p","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EGpPU6gFEgK0hdiRBfWhS85vW1p"))||($ze["<ZSQLU>") { d %0dsqlR } else { throw } }
	q
%UnlockExtent(shared=0,immediate=0) methodimpl {
	Quit $Select(..%SQLReleaseTableLock(shared,immediate):1,1:$$Error^%apiOBJ(5540,SQLCODE,%msg)) }
%UnlockId(id,shared=0,immediate=0) methodimpl {
	Do ..%SQLReleaseLock(id,shared,immediate)
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors) methodimpl
	w !,"There are no indices to validate for class 'MT.data'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) methodimpl {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	Set iv=..CodeProduit If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::CodeProduit("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%CodeProduit Set rc=(..CodeProduitIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"CodeProduit",iv)
	Set iv=..Key1 If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Key1("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Key1 Set rc=(..Key1IsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Key1",iv)
	Set iv=..Key2 If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Key2("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Key2 Set rc=(..Key2IsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Key2",iv)
	Set iv=..Key3 If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Key3("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Key3 Set rc=(..Key3IsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Key3",iv)
	Set iv=..Key5 If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Key5("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Key5 Set rc=(..Key5IsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Key5",iv)
	If m%dob Set iv=..dob If iv'="" Set rc=(..dobIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"dob",iv)
	If m%firstname Set iv=..firstname If iv'="" Set rc=(..firstnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"firstname",iv)
	If m%gender Set iv=..gender If iv'="" Set rc=(..genderIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"gender",iv)
	If m%lastname Set iv=..lastname If iv'="" Set rc=(..lastnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"lastname",iv)
	If m%title Set iv=..title If iv'="" Set rc=(..titleIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"title",iv)
	Quit sc }
zXMLDTD(top,format,input,dtdlist) methodimpl
 Quit ##class(%XML.Implementation).XMLDTD("MT.data",.top,.format,.input,.dtdlist)
zXMLExportInternal() methodimpl
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"MT.data")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"MT.data")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="MT.data"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="data"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"data"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"data"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..firstname
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"firstname"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"firstname>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..lastname
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"lastname"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"lastname>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..dob
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"dob"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"date""",1:"")_">"_$select(val="":"",1:$zdate(val,3,,,,,-672045))_endprefix_"dob>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..gender
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"gender"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"gender>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..title
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"title"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"title>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Key1
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Key1"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"Key1>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Key2
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Key2"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"Key2>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Key3
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Key3"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Key3>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..CodeProduit
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"CodeProduit"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"CodeProduit>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Key5
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Key5"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Key5>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes) methodimpl
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("MT.data",.imports,.classes)
zXMLImportAttributes() methodimpl
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal() methodimpl
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"MT.data")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("CodeProduit")) Set nodelist=nodelist_"CodeProduit, "
   If '$data(exists("Key1")) Set nodelist=nodelist_"Key1, "
   If '$data(exists("Key2")) Set nodelist=nodelist_"Key2, "
   If '$data(exists("Key3")) Set nodelist=nodelist_"Key3, "
   If '$data(exists("Key5")) Set nodelist=nodelist_"Key5, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="firstname" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..firstname=data
   Goto XMLLOOP } }
 If tag="lastname" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..lastname=data
   Goto XMLLOOP } }
 If tag="dob" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..dobXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$s($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,0,-672045,2980013):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<-672045:$$Error^%apiOBJ(7204,data,-672045),1:$$Error^%apiOBJ(7203,data,2980013))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..dob=data
   Goto XMLLOOP } }
 If tag="gender" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>1):1,1:$$Error^%apiOBJ(7201,data,1))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..gender=data
   Goto XMLLOOP } }
 If tag="title" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..title=data
   Goto XMLLOOP } }
 If tag="Key1" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Key1")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Key1=data
   Goto XMLLOOP } }
 If tag="Key2" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Key2")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Key2=data
   Goto XMLLOOP } }
 If tag="Key3" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Key3")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Key3=data
   Goto XMLLOOP } }
 If tag="CodeProduit" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("CodeProduit")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..CodeProduit=data
   Goto XMLLOOP } }
 If tag="Key5" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Key5")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Key5=data
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull) methodimpl
 If ..firstname'="" Quit 0
 If ..lastname'="" Quit 0
 If ..dob'="" Quit 0
 If ..gender'="" Quit 0
 If ..title'="" Quit 0
 If ..Key1'="" Quit 0
 If ..Key2'="" Quit 0
 If ..Key3'="" Quit 0
 If ..CodeProduit'="" Quit 0
 If ..Key5'="" Quit 0
 Quit 1
zXMLNew(document,node,containerOref="") methodimpl
	Quit (##class(MT.data).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema) methodimpl
 Quit ##class(%XML.Implementation).XMLSchema("MT.data",top,format,namespacePrefix,input,refOnly,.schema)
init() methodimpl {
   kill ^data
   set ^data($random(1000)+12345,0,0,0,0)="Homer\SIMPSON\45139\M\inspecteur de la sécurité à la centrale nucléaire de Springfield"
   set ^data($random(1000)+23456,$random(1000)+22222334343243,"M"_$random(245),"ZP-"_$random(10)_"C","191818YC")="Loïc\JEANROY\50788\M\Responsable Etude et Développement"
   set ^data($random(1000)+34567,$random(1000)+22222334343243,"M"_$random(245),"ZP-"_$random(10)_"C","191818YC")="Fabien\LEMELLE\56379\M\Analyste programmeur chez InfoGones"
   set ^data($random(1000)+45678,$random(1000)+22222334343243,"M"_$random(245),"ZP-"_$random(10)_"C","191818YC")="Sylvain\GUILBAUD\47139\M\Sales Engineer"
   zw ^data
   return 1 }
Key1DisplayToLogical(%val) methodimpl {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
Key1IsValid(%val) methodimpl {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0):1,1:$$Error^%apiOBJ(7207,%val)) }
Key1Normalize(%val) methodimpl {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
Key1XSDToLogical(%val) methodimpl {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
dobDisplayToLogical(%val) methodimpl {
 q:%val=""||($zu(115,13)&&(%val=$c(0))) "" quit:$isvalidnum(%val,0,-672045,2980013) %val set %val=$zdateh(%val,4,,,,,-672045,,"Error: '"_%val_"' is an invalid DISPLAY Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
dobIsValid(%val) methodimpl {
	Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,-672045,2980013):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<-672045:$$Error^%apiOBJ(7204,%val,-672045),1:$$Error^%apiOBJ(7203,%val,2980013)) }
dobJSONToLogical(%val) methodimpl {
   Quit $select(%val="":"",1:$zdateh(%val,3,,,,,-672045,,"")) }
dobLogicalToDisplay(%val) methodimpl {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,4,,4,,,-672045),1:$$FormatJulian^%qarfunc(%val,4)) }
dobLogicalToJSON(%val) methodimpl {
   quit $select(%val="":"",1:$zdate(%val,3,,,,,-672045)) }
dobLogicalToOdbc(%val="") methodimpl {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,3,,,,,-672045),1:$piece(%val," ",1)) }
dobLogicalToXSD(%val) methodimpl {
   quit $select(%val="":"",1:$zdate(%val,3,,,,,-672045)) }
dobNormalize(%val) methodimpl {
   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1) }
dobOdbcToLogical(%val="") methodimpl {
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" quit:$isvalidnum(%val,0,-672045,2980013) %val set %val=$zdateh(%val,3,,,,,-672045,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
dobXSDToLogical(%val) methodimpl {
   Set len=$length(%val)
   If len'=10 {
       If $extract(%val,len)="Z" {
           Set %val=$extract(%val,1,len-1),len=len-1
       } ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
           Set %val=$extract(%val,1,len-6),len=len-6
       }
   }
   If $extract(%val,11,19)="T00:00:00" {
       If (len=19)||(($extract(%val,20,21)=".0")&&($translate($extract(%val,22,len),"0","")="")) {
           Set %val=$extract(%val,1,10)
       }
   }
   Quit $select(%val="":"",1:$zdateh(%val,3,,,,,-672045,,"")) }
ExtentClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentExecute(%qHandle) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM %NOPARALLEL MT.data)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Edvk8pmBOFJAru3iG6JLkZQfTCD",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlV() } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_" %msg = "_$g(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
ExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
ExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport(row,60)
	}
	RETURN }
 q
%0dsqlV()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL MT . data"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","MT",0,"",),",1,QExtent,","MT.data.CLS",1)
	q %xxoref
ExtentFunc() methodimpl {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM %NOPARALLEL MT . data /*#OPTIONS {""DynamicSQL"":1} */")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
ExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) methodimpl {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.RawString",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) methodimpl
	Set metadata=$lb(1,1,"ID",12,4096,0,2,"ID","data","MT","",$c(0,0,0,0,0,0,0,0,0,0,0,1,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1
IDIdxCheck(K1,K2,K3,K4,K5,lockonly=0,concurrency=-1) methodimpl {
	s id=K1_"||"_K2_"||"_K3_"||"_K4_"||"_K5,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDIdx",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDIdx",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
IDIdxDelete(K1,K2,K3,K4,K5,concurrency=-1) methodimpl {
	Quit ..%DeleteId(K1_"||"_K2_"||"_K3_"||"_K4_"||"_K5,concurrency) }
IDIdxExists(K1,K2,K3,K4,K5,id="") methodimpl {
	s id=K1_"||"_K2_"||"_K3_"||"_K4_"||"_K5 q ..%ExistsId(K1_"||"_K2_"||"_K3_"||"_K4_"||"_K5) }
IDIdxOpen(K1,K2,K3,K4,K5,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(K1_"||"_K2_"||"_K3_"||"_K4_"||"_K5,concurrency,.sc) }
zIDIdxSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
	 ;---&sql(SELECT Key1,Key2,Key3,CodeProduit,Key5 FROM MT.data WHERE  Key1=:%pVals(1) AND Key2=:%pVals(2) AND Key3=:%pVals(3) AND CodeProduit=:%pVals(4) AND Key5=:%pVals(5) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EruZrvCHYRjXAiniWvOs5N9OEfe","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EruZrvCHYRjXAiniWvOs5N9OEfe"))||($ze["<ZSQLU>") { d %0dsqlZ } else { throw } } QUIT SQLCODE=100
 q
%0dsqlZ	n %xxsql
	s %xxsql("S",1)="SELECT Key1 , Key2 , Key3 , CodeProduit , Key5 FROM MT . data WHERE Key1 = :%pVals(1) AND Key2 = :%pVals(2) AND Key3 = :%pVals(3) AND CodeProduit = :%pVals(4) AND Key5 = :%pVals(5) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MT",0,"",),,"MT.data.CLS")
	return
zIDIdxSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key IDIdx.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1)_"||"_%pVal(2)_"||"_%pVal(3)_"||"_%pVal(4)_"||"_%pVal(5) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"MT"_"."_"data"_":"_"IDIdx") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDIdxSQLCheckUnique(0,,%pVal(1),%pVal(2),%pVal(3),%pVal(4),%pVal(5)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDIdxSQLFindPKeyByConstraint(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDIdxSQLFindPKeyByConstraint")
zIDIdxSQLFindRowIDByConstraint(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key IDIdx value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(3)=$lg(%con,1) set %d(4)=$lg(%con,2) set %d(5)=$lg(%con,3) set %d(2)=$lg(%con,4) set %d(6)=$lg(%con,5)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM MT.data WHERE Key1 = :%d(3) AND Key2 = :%d(4) AND Key3 = :%d(5) AND CodeProduit = :%d(2) AND Key5 = :%d(6))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5rlnnviPzgDBCf4hEa34i24YUk","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5rlnnviPzgDBCf4hEa34i24YUk"))||($ze["<ZSQLU>") { d %0dsql1 } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsql1	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM MT . data WHERE Key1 = :%d(3) AND Key2 = :%d(4) AND Key3 = :%d(5) AND CodeProduit = :%d(2) AND Key5 = :%d(6)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","MT",0,"",),,"MT.data.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
%sqllistUCQ(t) public	{
	s t("%0dsql1")="",t("%0dsqlA")="",t("%0dsqlD")="",t("%0dsqlF")="",t("%0dsqlH")="",t("%0dsqlL")="",t("%0dsqlN")="",t("%0dsqlR")=""
	s t("%0dsqlV")="",t("%0dsqlZ")=""
}