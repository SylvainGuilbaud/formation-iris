ROUTINE FCE.CurrencyOrder.1 [Type=INT,Generated]
 ;FCE.CurrencyOrder.1
 ;Generated for class FCE.CurrencyOrder.  Do NOT edit. 08/14/2023 08:17:24AM
 ;;67557052;FCE.CurrencyOrder
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BMEBuilt(bmeName) methodimpl
	Set bmeName = "$CurrencyOrder"
	RETURN ''$d(^BaRe.BSqw.2)
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) methodimpl {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..AccountHolder
 s proporef=..Branch
 s proporef=..Payment
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..AccountHolder
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..Branch
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..Payment
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildDeferredIndices(lockFlag=0,journalFlag=1) methodimpl {
	try {
		set status = 1, class = $classname()
		if lockFlag=1||(lockFlag=3) {
			Set status=..%LockExtent($select(lockFlag=1:0,1:1)) Throw:('status) ##class(%Exception.StatusException).ThrowIfInterrupt(status)
			set tLocked=1
		}
		set journal = ('($view(0,-1,4)\1024#2))
		try {
			if journalFlag=0,journal do DISABLE^%SYS.NOJRN()
			if journalFlag=1,'journal do ENABLE^%SYS.NOJRN()
		} catch {
			set status=$$Error^%apiOBJ(1151) goto exit
		}
		set queue = $SYSTEM.WorkMgr.Initialize("",.status)
		if ('($view(0,-1,4)\1024#2))'=journal {
			try {
				if journal { do ENABLE^%SYS.NOJRN() } else { do DISABLE^%SYS.NOJRN() }
			} catch {
				set status=$$Error^%apiOBJ(1151) goto exit
			}
		}
		if ('status) goto exit
		kill ^IRIS.TempIndexBuild($job)
		set chunkPtr = $order(^BaRe.BSqw.1.0(""),1,chunk)
		while chunkPtr {
			set status = queue.Queue("##class(FCE.CurrencyOrder).%BuildDeferredSegment",chunkPtr,chunk,lockFlag,$job)
			if ('status) goto exit
			set chunkPtr = $order(^BaRe.BSqw.1.0(chunkPtr),1,chunk)
		}
		if (''status) set status = queue.Sync()
	} catch tException {
		set status = tException.AsStatus()
	}
exit	if $get(tLocked) {
		do ..%UnlockExtent($select(lockFlag=1:0,1:1))
	}
	set i=""
	for {
		set i=$order(^IRIS.TempIndexBuild($job,i),1,val) quit:i=""
		if val'=0 do $system.Event.Delete($name(^IRIS.TempIndexBuild($job,i)))
	}
	kill ^IRIS.TempIndexBuild($job)
	return status }
%BuildDeferredSegment(chunkPtr,chunk,pLockFlag=1,pJob="") methodimpl {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$SortBegin(^BaRe.BSqw.3),$increment(^IRIS.TempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,1))) }
		If pLockFlag'=2,$SortBegin(^BaRe.BSqw.7),$increment(^IRIS.TempIndexBuild(pJob,2)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,2))) }
		set tPrefetch=0
		set chunkBase = (chunkPtr - 1) * 64000
		set offset = $bitfind(chunk,1,1)
		while offset {
			set id  = chunkBase + offset - 1
			if pLockFlag = 2 {
				set tSC = ..%LockId(id,1)
				if (''tSC) {
					if $data(^BaRe.BSqw.1(id)) {
						set tSC=..%FileIndices(id)
					}
					do ..%UnlockId(id,1,1)
				}
				if ('tSC) { set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC)) }
				set offset = $bitfind(chunk,1,offset + 1)
				continue
			}
			set tSC=..%FileIndicesBuffered(id,,.%tIndexBuffer)
			if ('tSC) { set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC)) }
			set offset = $bitfind(chunk,1,offset + 1)
		}
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.2),$name(%tIndexBuffer(2)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.4),$name(%tIndexBuffer(4)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.5),$name(%tIndexBuffer(5)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.6),$name(%tIndexBuffer(6)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.8),$name(%tIndexBuffer(8)))
		new %chunk set %chunk=chunk do BitMask^%occLibrary($name(^BaRe.BSqw.1.0(chunkPtr)),$name(%chunk))
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2 {
		If $increment(^IRIS.TempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^BaRe.BSqw.3) {}
	}
	If pLockFlag'=2 {
		If $increment(^IRIS.TempIndexBuild(pJob,2),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,2))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,2))) } Catch {} }
		If $SortEnd(^BaRe.BSqw.7) {}
	}
	return tStatus }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") methodimpl {
	if ($listlength(pIndexList)=1)&&($listget(pIndexList,1)="") { return 1 }
	Set class=$classname(),tBuildFlags=1,tBuildFlags(class)=$c(0,0,0,0,0,0,0)
	Set tPtr=0,tStatus=1
	While $listnext(pIndexList,tPtr,tIndex) {
		continue:tIndex=""
		If '$d(^oddCOM(class,"i",tIndex)) {
			Set tStatus=$select(+tStatus:$$Error^%apiOBJ(5066,class_"::"_tIndex),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5066,class_"::"_tIndex)))
		}
	}
	If ('tStatus) RETURN tStatus
	if ((pIndexList="")||($listfind(pIndexList,"$CurrencyOrder"))),'$listfind(pIgnoreIndexList,"$CurrencyOrder") { set $Extract(tBuildFlags(class),1)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"AccountHolderIndex"))),'$listfind(pIgnoreIndexList,"AccountHolderIndex") { set $Extract(tBuildFlags(class),2)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"BranchIndex"))),'$listfind(pIgnoreIndexList,"BranchIndex") { set $Extract(tBuildFlags(class),3)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"InIndex"))),'$listfind(pIgnoreIndexList,"InIndex") { set $Extract(tBuildFlags(class),4)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"OutIndex"))),'$listfind(pIgnoreIndexList,"OutIndex") { set $Extract(tBuildFlags(class),5)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"PaymentIndex"))),'$listfind(pIgnoreIndexList,"PaymentIndex") { set $Extract(tBuildFlags(class),6)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"StatusIndex"))),'$listfind(pIgnoreIndexList,"StatusIndex") { set $Extract(tBuildFlags(class),7)=$c(1) }
	If ($Ascii(tBuildFlags(class),3))||($Ascii(tBuildFlags(class),4))||($Ascii(tBuildFlags(class),5))||($Ascii(tBuildFlags(class),7)),'$listfind(pIgnoreIndexList,"$CurrencyOrder") { set $extract(tBuildFlags(class),1)=$c(1) }
	Quit ..%BuildIndexInternal(.pLockFlag,.pAutoPurge,.pStartID,.pEndID,.pIndexList,.tBuildFlags,"^BaRe.BSqw.1",1,.pJournalFlag,0) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") methodimpl {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),2),$SortBegin(^BaRe.BSqw.3),$increment(^IRIS.TempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,1))) }
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),6),$SortBegin(^BaRe.BSqw.7),$increment(^IRIS.TempIndexBuild(pJob,2)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,2))) }
		Set tPrefetch=$prefetchon(^BaRe.BSqw.1)
		If 'pFirstRange||('$data(^BaRe.BSqw.1(pStartID))) { Set tID=$order(^BaRe.BSqw.1(pStartID)) } Else { Set tID=pStartID }
		Set tCurrentChunk=tID\64000+1
		While tID'="",(pEndID="")||(tID']]pEndID) {
			If pLockFlag=2 {
				Set tSC = ..%LockId(tID,1)
				If (''tSC) {
					If $data(^BaRe.BSqw.1(tID)) {
						If (tID\64000+1)'=tCurrentChunk { set tCurrentChunk=(tID\64000+1) kill tVectorBuffer }
						Set tSC=..%FileIndices(tID,.pIndexHandle,.tVectorBuffer)
					}
					Do ..%UnlockId(tID,1,1)
				}
				If ('tSC) Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
				Set tID=$order(^BaRe.BSqw.1(tID))
				Continue
			}
			Set tChunk=tID\64000+1
			If tChunk'=tCurrentChunk {
				Do BitMerge^%occLibrary($name(^BaRe.BSqw.2),$name(%tIndexBuffer(2)))
				Do BitMerge^%occLibrary($name(^BaRe.BSqw.4),$name(%tIndexBuffer(4)))
				Do BitMerge^%occLibrary($name(^BaRe.BSqw.5),$name(%tIndexBuffer(5)))
				Do BitMerge^%occLibrary($name(^BaRe.BSqw.6),$name(%tIndexBuffer(6)))
				Do BitMerge^%occLibrary($name(^BaRe.BSqw.8),$name(%tIndexBuffer(8)))
				kill %tIndexBuffer(2),%tIndexBuffer(4),%tIndexBuffer(5),%tIndexBuffer(6),%tIndexBuffer(8)
				kill tVectorBuffer
				Set tCurrentChunk=tChunk
			}
			Set tSC=..%FileIndicesBuffered(tID,.pIndexHandle,.%tIndexBuffer,.tVectorBuffer)
			If ('tSC) {
				Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
			}
			Set tID=$order(^BaRe.BSqw.1(tID))
		}
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.2),$name(%tIndexBuffer(2)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.4),$name(%tIndexBuffer(4)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.5),$name(%tIndexBuffer(5)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.6),$name(%tIndexBuffer(6)))
		Do BitMerge^%occLibrary($name(^BaRe.BSqw.8),$name(%tIndexBuffer(8)))
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),2) {
		If $increment(^IRIS.TempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^BaRe.BSqw.3) {}
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),6) {
		If $increment(^IRIS.TempIndexBuild(pJob,2),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,2))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,2))) } Catch {} }
		If $SortEnd(^BaRe.BSqw.7) {}
	}
	Set:$Get(tPrefetch) tPrefetch=$prefetchoff(^BaRe.BSqw.1)
	Quit tStatus }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) [ SQLCODE,pID,tCol1,tCol2,tCol3 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tCol1,tCol2,tCol3 
	set tStatus = ..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC) if ('tStatus) { set pErrorInfo = $Listbuild(pID) quit tStatus } if tMSTC '= $classname() { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) }
	set tStatus = 1, pErrorInfo = ""
	 ;---&sql(select AccountHolder,Branch,Payment INTO :tCol1,:tCol2,:tCol3 FROM FCE.CurrencyOrder WHERE %ID = :pID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, pID, tCol1, tCol2, tCol3
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjEZkGWRbsT8adkWbZgrgKHwZ1Q","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjEZkGWRbsT8adkWbZgrgKHwZ1Q"))||($ze["<ZSQLU>") { d %0dsqlA } else { throw } }
	if 'SQLCODE {
		if ((pConstraintList="")||($lf(pConstraintList,"AccountHolder"))) && (('..AccountHolderCheck(tCol1))) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5824,$classname()_".AccountHolder("_$zu(144,1,tCol1)_")"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5824,$classname()_".AccountHolder("_$zu(144,1,tCol1)_")"))) }
		if ((pConstraintList="")||($lf(pConstraintList,"Branch"))) && (('..BranchCheck(tCol2))) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5824,$classname()_".Branch("_$zu(144,1,tCol2)_")"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5824,$classname()_".Branch("_$zu(144,1,tCol2)_")"))) }
		if ((pConstraintList="")||($lf(pConstraintList,"PaymentFK"))) && ('..PaymentFKCheck(tCol3)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5829,$classname()_".PaymentFK","CHECK"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5829,$classname()_".PaymentFK","CHECK"))) }
		if ((pConstraintList="")||($lf(pConstraintList,"PaymentIndex"))) && ('..PaymentIndexCheckUnique(pID,tCol3)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5808,$classname()_".PaymentIndex"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5808,$classname()_".PaymentIndex"))) }
		set pErrorInfo = $Listbuild(pID,tCol1,tCol2,tCol3)
	} elseif SQLCODE < 0 { set tStatus = $$Error^%apiOBJ(5540,SQLCODE,$Get(%msg)) }
	quit tStatus }
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT AccountHolder , Branch , Payment INTO :tCol1 , :tCol2 , :tCol3 FROM FCE . CurrencyOrder WHERE %ID = :pID"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set tCol1="",tCol2="",tCol3="" } catch {} }
	return
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM %NOPARALLEL FCE.CurrencyOrder)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, tID
	 
	 ;---&sql(open ext)
	if $g(%ext0280)'="" { s SQLCODE=-101 } else { try { s %ext0280="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E0iDAExiQ7DgzM1Zji5pq3j5mhV",%ext0280=$classmethod(%ext0280,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%ext0280)),$ze'["<ZSQLU>" { throw } } if '$isobject(%ext0280) { s %ext0280=$$%0dsqlC() } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0280))'=1 { s SQLCODE=-102 } else { do %ext0280.FET() }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0280)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0280 }
	}
	quit tStatusAll }
 q
%0dsqlC()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM %NOPARALLEL FCE . CurrencyOrder"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),",0,ext,","FCE.CurrencyOrder.CLS",1)
	i $g(SQLCODE) { s tID="" }
	q %xxoref
%ComposeOid(id) methodimpl {
	set tCLASSNAME = $listget($g(^BaRe.BSqw.1(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","FCE.CurrencyOrder")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(branch,requestor,requestorEmail,currencyOut,currencyIn,amountIn,valid) methodimpl {
	Set i%%Concurrency=$zu(115,10)
	Try { Set sc=..%OnNew(.branch,.requestor,.requestorEmail,.currencyOut,.currencyIn,.amountIn,.valid) } Catch newerror {}
	If $isobject($get(newerror))=1||(('sc)) {
		Kill %objtxLIST(+$this),%objtxOIDASSIGNED(+$this),%objtxOIDUNASSIGNED(+$this),%objtxMODIFIED(+$this)
		If $get(i%"%%OID")'="" {
			If i%%Concurrency=3 { Do ..%ReleaseLock("s") } ElseIf i%%Concurrency=4 { Do ..%ReleaseLock("e") }
			Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"=""
		}
		If $isobject($get(newerror))=1 Throw newerror
	}
	Quit sc }
%ConstructCloneInit(object,deep=0,cloned,location) methodimpl {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..Payment)=1 Set r%Payment=r%Payment.%ConstructClone(1,.cloned),i%Payment=""
	}
	Quit 1 }
%DeleteData(id,concurrency) methodimpl {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^BaRe.BSqw.1(id))) {
		Set bsv0N1=^BaRe.BSqw.1(id)
		Set bsv0N2=$listget(bsv0N1,17)
		Set bsv0N3=$s(bsv0N2'="":bsv0N2,1:-1E14)
		Set pidchunk=id\64000+1,pidoffset=id#64000+1
		If concurrency, ('$g(%0CacheLock($classname(),"E"))) && ($listget(bsv0N1,17)'="") {
			Lock +^BaRe.BSqw.7(bsv0N3):$zu(115,4)
			If $test {
				Lock -^BaRe.BSqw.7(bsv0N3)
			} Else {
				Set sc = $$Error^%apiOBJ(5803,$classname())
				Goto DeleteDataEXIT
			}
		}
		If ($listget(bsv0N1,17)'=""), '..PaymentFKCheck($listget(bsv0N1,17),1) {
			Set sc=$$Error^%apiOBJ(5795,$classname()_".PaymentFK","DELETE")
			Goto DeleteDataEXIT
		}
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"PaymentIndex","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"PaymentIndex","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",$listget(bsv0N1,17))
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Set tNew(1)=id,tSQLCODE=0
		Do ..%SQLGetOld(id,.tNew,.tOld,.tSQLCODE)
		If tSQLCODE < 0 {
			Set sc=$$Error^%apiOBJ(5521,tSQLCODE,"Error loading old values for Object triggers"_$select($get(%msg)'="":": "_%msg,1:""))
			Goto DeleteDataEXIT
		}
		Set bsv0N4=$listget(bsv0N1,17)
		Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
		Set bsv0N6=$listget(bsv0N1,6)
		Set bsv0N7=$listget(bsv0N1,8)
		Set bsv0N8=$listget(bsv0N1,16)
		Set $bit(^BaRe.BSqw.2(pidchunk),pidoffset)=0
		Kill ^BaRe.BSqw.3($s(bsv0N8'="":bsv0N8,1:-1E14),id)
		Set $bit(^BaRe.BSqw.4($listget(bsv0N1,15),pidchunk),pidoffset)=0
		Set $bit(^BaRe.BSqw.5($s(bsv0N7'="":bsv0N7,1:-1E14),pidchunk),pidoffset)=0
		Set $bit(^BaRe.BSqw.6($s(bsv0N6'="":bsv0N6,1:-1E14),pidchunk),pidoffset)=0
		Kill ^BaRe.BSqw.7(bsv0N5,id)
		Set $bit(^BaRe.BSqw.8($zu(28,$listget(bsv0N1,14),7,32768),pidchunk),pidoffset)=0
		Kill ^BaRe.BSqw.1(id)
		Try {
			Do ..%ExecuteAfterTriggers("DELETE",$select(id="":"",1:$listbuild(id_"",$classname())),"",.tOld)
		} Catch tException {
			Set sc=tException.AsStatus()
			Goto DeleteDataEXIT
		}
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^BaRe.BSqw.1(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%ExecuteAfterTriggers(%oper,pOid="",pNew,pOld) methodimpl {
	new %msg,%ok set %msg="",%ok=1, pNew(1) = $listget(pOid) //  'AFTER' trigger(s)
	if %oper="UPDATE" {
		if $Isobject($Get(pNew)) { set tOref = pNew,pNew(5)=tOref.AmountOut,pNew(6)=tOref.BranchGetObjectId(),pNew(8)=tOref.CurrencyOut,pNew(13)=tOref.Requestor }
	}
	if %oper="DELETE" {
		set pOld(1)=pNew(1)
		set pNew(5)=pOld(5),pNew(6)=pOld(6),pNew(8)=pOld(8),pNew(12)=pOld(12),pNew(13)=pOld(13)
	}
	do:("DELETE"[%oper) ..DeletePaymentExecute(%oper,.pNew,.pOld,.pChanged,.%ok,.%msg) if '%ok { throw ##class(%Exception.SQL).CreateFromSQLCODE(-13_$s(%oper="INSERT":0,%oper="UPDATE":3,1:5),$g(%msg)) }
	do:("UPDATE/DELETE"[%oper) ..UpdateDeleteInNotesExecute(%oper,.pNew,.pOld,.pChanged,.%ok,.%msg) if '%ok { throw ##class(%Exception.SQL).CreateFromSQLCODE(-13_$s(%oper="INSERT":0,%oper="UPDATE":3,1:5),$g(%msg)) }
}
%Exists(oid="") methodimpl {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) methodimpl {
	Try { set tExists = $s(id="":0,$d(^BaRe.BSqw.1(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0,pVectorBuffer) methodimpl {
	try {
		Set bsv0N2=$Get(^BaRe.BSqw.1(id))
		Set bsv0N3=$listget(bsv0N2,1)
		if bsv0N3'="" {
			set bsv0N1=$piece(bsv0N3,"~",*-1)
			set:bsv0N1'["." bsv0N1="User."_bsv0N1
			if bsv0N1'="" { RETURN $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) }
		}
		Set pidchunk=id\64000+1,pidoffset=id#64000+1
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),1)=1) {
			Set $bit(^BaRe.BSqw.2(pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),2)=1) {
			Set bsv0N4=$listget(bsv0N2,16)
			Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
			Set ^BaRe.BSqw.3(bsv0N5,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),3)=1) {
			Set $bit(^BaRe.BSqw.4($listget(bsv0N2,15),pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),4)=1) {
			Set bsv0N6=$listget(bsv0N2,8)
			Set $bit(^BaRe.BSqw.5($s(bsv0N6'="":bsv0N6,1:-1E14),pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),5)=1) {
			Set bsv0N7=$listget(bsv0N2,6)
			Set $bit(^BaRe.BSqw.6($s(bsv0N7'="":bsv0N7,1:-1E14),pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),6)=1) {
			Set bsv0N8=$listget(bsv0N2,17)
			Set bsv0N9=$s(bsv0N8'="":bsv0N8,1:-1E14)
			Set ^BaRe.BSqw.7(bsv0N9,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),7)=1) {
			Set $bit(^BaRe.BSqw.8($zu(28,$listget(bsv0N2,14),7,32768),pidchunk),pidoffset)=1
		}
	}
	catch {
		RETURN $$Error^%apiOBJ(5002,$ze)
	}
	RETURN 1
getbuffered(glo,&vectorbuffer,id)
	if '$d(vectorbuffer(id)) { set vectorbuffer(id)=@glo }
	RETURN vectorbuffer(id) }
%FileIndicesBuffered(id,pIndexHandle=0,pIndexBuffer="",pVectorBuffer) methodimpl {
	try {
		Set bsv0N2=$Get(^BaRe.BSqw.1(id))
		Set bsv0N3=$listget(bsv0N2,1)
		If bsv0N3'="" {
			Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
			Set:bsv0N1'["." bsv0N1="User."_bsv0N1
			If bsv0N1'="" {
				RETURN $classmethod(bsv0N1,"%FileIndicesBuffered",id,.pIndexHandle,.pIndexBuffer)
			}
		}
		Set pidchunk=id\64000+1,pidoffset=id#64000+1
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),1)=1) {
			Set $bit(pIndexBuffer(2,pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),2)=1) {
			Set bsv0N4=$listget(bsv0N2,16)
			Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
			Set ^BaRe.BSqw.3(bsv0N5,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),3)=1) {
			Set bsv0N6=$listget(bsv0N2,15)
			Set $bit(pIndexBuffer(4,bsv0N6,pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),4)=1) {
			Set bsv0N7=$listget(bsv0N2,8)
			Set $bit(pIndexBuffer(5,$s(bsv0N7'="":bsv0N7,1:-1E14),pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),5)=1) {
			Set bsv0N8=$listget(bsv0N2,6)
			Set $bit(pIndexBuffer(6,$s(bsv0N8'="":bsv0N8,1:-1E14),pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),6)=1) {
			Set bsv0N9=$listget(bsv0N2,17)
			Set bsv0N10=$s(bsv0N9'="":bsv0N9,1:-1E14)
			Set ^BaRe.BSqw.7(bsv0N10,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.CurrencyOrder")),7)=1) {
			Set bsv0N11=$zu(28,$listget(bsv0N2,14),7,32768)
			Set $bit(pIndexBuffer(8,bsv0N11,pidchunk),pidoffset)=1
		}
	}
	catch {
		RETURN $$Error^%apiOBJ(5002,$ze)
	}
	RETURN 1
getbuffered(glo,&vectorbuffer,id)
	if '$d(vectorbuffer(id)) { set vectorbuffer(id)=@glo }
	RETURN vectorbuffer(id) }
%InsertBatch(objects,concurrency=0,useTransactions=0) methodimpl {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,17)
			set zzc9v2=$listget(data,15)
			set zzc9v3=$listget(data,16)
			set zzc9v4=$listget(data,1)
			set lock=0,locku=$c(0)
			if (useTransactions) tstart
			set id=$i(^BaRe.BSqw.1)
			set pidchunk=id\64000+1,pidoffset=id#64000+1
			if (zzc9v3'="")&&('##class(FCE.AccountHolder).%ExistsId(zzc9v3)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"FCE.CurrencyOrder.AccountHolder("_$zu(144,1,zzc9v3)_")")) }
			if (zzc9v2'="")&&('##class(FCE.Branch).%ExistsId(zzc9v2)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"FCE.CurrencyOrder.Branch("_$zu(144,1,zzc9v2)_")")) }
			set zzc14v1=$s(zzc9v1'="":zzc9v1,1:-1E14)
			set zzc14v2=$listget(data,6)
			set zzc14v3=$listget(data,8)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if (zzc9v1'=""),'..PaymentFKCheck(zzc9v1) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".PaymentFK","INSERT"))
				if zzc9v1'="" { if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^BaRe.BSqw.7(zzc14v1):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^BaRe.BSqw.7(zzc14v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PaymentIndex:"_$zreference)) }}
				set ^BaRe.BSqw.1(id)=data
				set $bit(^BaRe.BSqw.2(pidchunk),pidoffset)=1
				set ^BaRe.BSqw.3($s(zzc9v3'="":zzc9v3,1:-1E14),id)=zzc9v4
				set $bit(^BaRe.BSqw.4(zzc9v2,pidchunk),pidoffset)=1
				set $bit(^BaRe.BSqw.5($s(zzc14v3'="":zzc14v3,1:-1E14),pidchunk),pidoffset)=1
				set $bit(^BaRe.BSqw.6($s(zzc14v2'="":zzc14v2,1:-1E14),pidchunk),pidoffset)=1
				set ^BaRe.BSqw.7(zzc14v1,id)=zzc9v4
				set $bit(^BaRe.BSqw.8($zu(28,$listget(data,14),7,32768),pidchunk),pidoffset)=1
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			lock:$Ascii($Extract(locku,1)) -^BaRe.BSqw.7(zzc14v1)#"D"
			if lock lock -(^BaRe.BSqw.1(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%JSONExportInternal() methodimpl {
  Set sc=1
  Write "{" Set sep=""
  Set value=..ATM
  If value'="" {
    Write sep_"""ATM"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Requestor
  If value'="" {
    Write sep_"""Requestor"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..RequestorEmail
  If value'="" {
    Write sep_"""RequestorEmail"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..AmountOut
  If value'="" {
    Write sep_"""AmountOut"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..CurrencyOut
  If value'="" {
    Write sep_"""CurrencyOut"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..AmountIn
  If value'="" {
    Write sep_"""AmountIn"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..CurrencyIn
  If value'="" {
    Write sep_"""CurrencyIn"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..ExchangeRate
  If value'="" {
    Write sep_"""ExchangeRate"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..Fee
  If value'="" {
    Write sep_"""Fee"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..DateStamp
  If value'="" {
    Write sep_"""DateStamp"":"""_$select(value="":"",1:$zdate(value,3,,,,,59901))_""""
    Set $extract(sep,1)=","
  }
  Set value=..TimeStamp
  If value'="" {
    Write sep_"""TimeStamp"":"""_$select(value="":"",1:$ztime(value,1,$l($p(value,".",2)),,1)_"Z")_""""
    Set $extract(sep,1)=","
  }
  Set value=..Satisfaction
  If value'="" {
    Write sep_"""Satisfaction"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Status
  If value'="" {
    Write sep_"""Status"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Payment
  If value'="" {
    Write sep_"""Payment"":"
    Set sc=value.%JSONExportInternal() If ('sc) Goto %JSONExportExit
    Set $extract(sep,1)=","
  }
  Write "}"
%JSONExportExit Quit sc }
%JSONExportToStringInternal() methodimpl {
  Set sc=1
  Set %export=%export_"{" Set sep=""
  Set value=..ATM
  If value'="" {
    Set %export=%export_sep_"""ATM"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Requestor
  If value'="" {
    Set %export=%export_sep_"""Requestor"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..RequestorEmail
  If value'="" {
    Set %export=%export_sep_"""RequestorEmail"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..AmountOut
  If value'="" {
    Set %export=%export_sep_"""AmountOut"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..CurrencyOut
  If value'="" {
    Set %export=%export_sep_"""CurrencyOut"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..AmountIn
  If value'="" {
    Set %export=%export_sep_"""AmountIn"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..CurrencyIn
  If value'="" {
    Set %export=%export_sep_"""CurrencyIn"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..ExchangeRate
  If value'="" {
    Set %export=%export_sep_"""ExchangeRate"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..Fee
  If value'="" {
    Set %export=%export_sep_"""Fee"":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
    Set $extract(sep,1)=","
  }
  Set value=..DateStamp
  If value'="" {
    Set %export=%export_sep_"""DateStamp"":"""_$select(value="":"",1:$zdate(value,3,,,,,59901))_""""
    Set $extract(sep,1)=","
  }
  Set value=..TimeStamp
  If value'="" {
    Set %export=%export_sep_"""TimeStamp"":"""_$select(value="":"",1:$ztime(value,1,$l($p(value,".",2)),,1)_"Z")_""""
    Set $extract(sep,1)=","
  }
  Set value=..Satisfaction
  If value'="" {
    Set %export=%export_sep_"""Satisfaction"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Status
  If value'="" {
    Set %export=%export_sep_"""Status"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Payment
  If value'="" {
    Set %export=%export_sep_"""Payment"":"
    Set sc=value.%JSONExportToStringInternal() If ('sc) Goto %JSONExportExitToString
    Set $extract(sep,1)=","
  }
  Set %export=%export_"}"
%JSONExportExitToString Quit sc }
%JSONImportInternal() methodimpl {
  Set sc=1
  Set testInvalidField=1
  Set proplist("ATM")=""
  Set field="ATM" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..ATM=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.ATM
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..ATM=data
    }
  }
  Set proplist("Requestor")=""
  Set field="Requestor" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Requestor=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Requestor
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..Requestor=data
    }
  }
  Set proplist("RequestorEmail")=""
  Set field="RequestorEmail" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..RequestorEmail=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.RequestorEmail
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..RequestorEmail=data
    }
  }
  Set proplist("AmountOut")=""
  Set field="AmountOut" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..AmountOut=""
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.AmountOut
      Set data=$inumber(data,"LO","") Goto:data="" %JSONImportError If ('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,2,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) Goto %JSONImportError
      Set ..AmountOut=data
    }
  }
  Set proplist("CurrencyOut")=""
  Set field="CurrencyOut" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..CurrencyOut=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.CurrencyOut
      If ('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..CurrencyOut=data
    }
  }
  Set proplist("AmountIn")=""
  Set field="AmountIn" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..AmountIn=""
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.AmountIn
      Set data=$inumber(data,"LO","") Goto:data="" %JSONImportError If ('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,2,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) Goto %JSONImportError
      Set ..AmountIn=data
    }
  }
  Set proplist("CurrencyIn")=""
  Set field="CurrencyIn" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..CurrencyIn=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.CurrencyIn
      If ('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..CurrencyIn=data
    }
  }
  Set proplist("ExchangeRate")=""
  Set field="ExchangeRate" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..ExchangeRate=""
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.ExchangeRate
      Set data=$inumber(data,"LO","") Goto:data="" %JSONImportError If ('$select($isvalidnum(data,3,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) Goto %JSONImportError
      Set ..ExchangeRate=data
    }
  }
  Set proplist("Fee")=""
  Set field="Fee" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Fee=""
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.Fee
      Set data=$inumber(data,"LO","") Goto:data="" %JSONImportError If ('$select($isvalidnum(data,2,,):1,1:$$Error^%apiOBJ(7207,data))) Goto %JSONImportError
      Set ..Fee=data
    }
  }
  Set proplist("DateStamp")=""
  Set field="DateStamp" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..DateStamp=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.DateStamp
      Set data=$select(data="":"",1:$zdateh(data,3,,,,,59901,+$system.SYS.TimeStamp(),"")) Goto:data="" %JSONImportError If ('$s($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,0,59901,+$system.SYS.TimeStamp()):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<59901:$$Error^%apiOBJ(7204,data,59901),1:$$Error^%apiOBJ(7203,data,+$system.SYS.TimeStamp()))) Goto %JSONImportError
      Set ..DateStamp=data
    }
  }
  Set proplist("TimeStamp")=""
  Set field="TimeStamp" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..TimeStamp=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.TimeStamp
      Set data=..TimeStampXSDToLogical(data) Goto:data="" %JSONImportError If ('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,,0,86400)&&(data<86400):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<0:$$Error^%apiOBJ(7204,data,0),1:$$Error^%apiOBJ(7203,+data,86400))) Goto %JSONImportError
      Set ..TimeStamp=data
    }
  }
  Set proplist("Satisfaction")=""
  Set field="Satisfaction" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Satisfaction=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Satisfaction
      If ('$select(data'["-"&&("-1-2-3-4-5-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-1-2-3-4-5"))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..Satisfaction=data
    }
  }
  Set proplist("Status")=""
  Set field="Status" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Status=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Status
      If ('$s(data'["-"&&("-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled-"[("-"_$select(data=$c(0):"",1:data)_"-")):1,1:$$Error^%apiOBJ(7205,data,"-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled"))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..Status=data
    }
  }
  Set proplist("Payment")=""
  Set field="Payment" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Payment=""
    } Else {
      If jsontype="object" {
        Set newobj=##class(FCE.Payment).%JSONNew(%JSONObject,$this)
        Set saveJSON=%JSONObject
        Set %JSONObject=%JSONObject.Payment
        Set sc=newobj.%JSONImportInternal()
        Set %JSONObject=saveJSON
        If ('sc) Goto %JSONImportExit
        Set ..Payment=newobj
      } ElseIf jsontype="oref" {
        Set ..Payment=%JSONObject.Payment
      } Else { Goto %JSONImportError }
    }
  }
  If $get(testInvalidField) {
    Set invalid=0,iterator=%JSONObject.%GetIterator()
    While iterator.%GetNext(.key,.value) { If $data(proplist(key))=0 Set invalid=1 Quit  }
    If invalid Quit $$Error^%apiOBJ(9404,key,$select(%mappingName="":"class base",1:%mappingName))
  }
%JSONImportExit Quit sc
%JSONImportError Quit $$Error^%apiOBJ(9406,field,$select(%mappingName="":"class base",1:%mappingName)) }
%JSONNew(dynamicObject,containerOref="") methodimpl {
  Quit ##class(FCE.CurrencyOrder).%New()
}
%KillExtentData(killstreams=0) methodimpl
	Set $sequence(^BaRe.BSqw.1)=""
	If killstreams Set $sequence(^BaRe.BSqw.S)="" Kill ^BaRe.BSqw.S
	Kill ^BaRe.BSqw.1,^BaRe.BSqw.1.0
	Quit 1
%LoadData(id) methodimpl {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^BaRe.BSqw.1(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^BaRe.BSqw.1(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^BaRe.BSqw.1(id)#"SIE") }
		S i%ATM=$lg(%s1,2),i%Requestor=$lg(%s1,3),i%RequestorEmail=$lg(%s1,4),i%AmountOut=$lg(%s1,5),i%CurrencyOut=$lg(%s1,6),i%AmountIn=$lg(%s1,7),i%CurrencyIn=$lg(%s1,8),i%ExchangeRate=$lg(%s1,9),i%Fee=$lg(%s1,10),i%DateStamp=$lg(%s1,11),i%TimeStamp=$lg(%s1,12),i%Satisfaction=$lg(%s1,13),i%Status=$lg(%s1,14),i%Branch=$lg(%s1,15),i%AccountHolder=$lg(%s1,16),i%Payment=$lg(%s1,17)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^BaRe.BSqw.1(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^BaRe.BSqw.1(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%ATM="",i%AccountHolder="",i%AmountIn="",i%AmountOut="",i%Branch="",i%CurrencyIn="",i%CurrencyOut="",i%DateStamp="",i%ExchangeRate="",i%Fee="",i%Payment="",i%Requestor="",i%RequestorEmail="",i%Satisfaction="",i%Status="",i%TimeStamp=""
	quit }
%LoadDataFromMemory(id,objstate,obj) methodimpl {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%ATM=$lg(%s1,2),i%Requestor=$lg(%s1,3),i%RequestorEmail=$lg(%s1,4),i%AmountOut=$lg(%s1,5),i%CurrencyOut=$lg(%s1,6),i%AmountIn=$lg(%s1,7),i%CurrencyIn=$lg(%s1,8),i%ExchangeRate=$lg(%s1,9),i%Fee=$lg(%s1,10),i%DateStamp=$lg(%s1,11),i%TimeStamp=$lg(%s1,12),i%Satisfaction=$lg(%s1,13),i%Status=$lg(%s1,14),i%Branch=$lg(%s1,15),i%AccountHolder=$lg(%s1,16),i%Payment=$lg(%s1,17)
		Quit 1
	} Else {
		set i%ATM="",i%AccountHolder="",i%AmountIn="",i%AmountOut="",i%Branch="",i%CurrencyIn="",i%CurrencyOut="",i%DateStamp="",i%ExchangeRate="",i%Fee="",i%Payment="",i%Requestor="",i%RequestorEmail="",i%Satisfaction="",i%Status="",i%TimeStamp=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) methodimpl {
	Set:concurrency'="" i%%Concurrency=concurrency
	If reset {
		Kill i%AccountHolder,i%Branch,i%Payment
	}
	Set r%AccountHolder="",r%Branch="",r%Payment=""
	If 'reset { Set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } Set $zobjoid("",$listget(oid),,sfn)=$this,i%"%%OID"=oid }
	Quit 1 }
%LockExtent(shared=0) methodimpl {
	If shared {
		Lock +(^BaRe.BSqw.1#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^BaRe.BSqw.1):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) methodimpl { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^BaRe.BSqw.1(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^BaRe.BSqw.1(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() methodimpl {
	If '$system.CLS.GetModified() Quit 1
	If m%ATM Set:i%ATM'="" i%ATM=(..ATMNormalize(i%ATM))
	If m%AmountIn Set:i%AmountIn'="" i%AmountIn=(..AmountInNormalize(i%AmountIn))
	If m%AmountOut Set:i%AmountOut'="" i%AmountOut=(..AmountOutNormalize(i%AmountOut))
	If m%CurrencyIn Set:i%CurrencyIn'="" i%CurrencyIn=(..CurrencyInNormalize(i%CurrencyIn))
	If m%CurrencyOut Set:i%CurrencyOut'="" i%CurrencyOut=(..CurrencyOutNormalize(i%CurrencyOut))
	If m%DateStamp Set:i%DateStamp'="" i%DateStamp=(..DateStampNormalize(i%DateStamp))
	If m%ExchangeRate Set:i%ExchangeRate'="" i%ExchangeRate=(..ExchangeRateNormalize(i%ExchangeRate))
	If m%Fee Set:i%Fee'="" i%Fee=(..FeeNormalize(i%Fee))
	If m%Requestor Set:i%Requestor'="" i%Requestor=(..RequestorNormalize(i%Requestor))
	If m%RequestorEmail Set:i%RequestorEmail'="" i%RequestorEmail=(..RequestorEmailNormalize(i%RequestorEmail))
	If m%Satisfaction Set:i%Satisfaction'="" i%Satisfaction=(..SatisfactionNormalize(i%Satisfaction))
	If m%Status Set:i%Status'="" i%Status=(..StatusNormalize(i%Status))
	If m%TimeStamp Set:i%TimeStamp'="" i%TimeStamp=(..TimeStampNormalize(i%TimeStamp))
	Quit 1 }
%OnDetermineClass(oid,class) methodimpl {
	Set id=$listget($get(oid))
	RETURN:id="" $$Error^%apiOBJ(5812)
	set idclass=$lg($get(^BaRe.BSqw.1(id)),1)
	if idclass="" { set class="FCE.CurrencyOrder" RETURN 1 }
	set class=$piece(idclass,"~",*-1)
	set:class'["." class="User."_class
	RETURN 1 }
%OnNew(branch="",requestor="",requestorEmail="",currencyOut="",currencyIn="",amountIn=0,valid) methodimpl {
	set ..Requestor = requestor
	set ..RequestorEmail = requestorEmail
	set ..CurrencyOut = currencyOut
	set ..CurrencyIn = currencyIn
	set ..Branch = branch
	set ..AmountIn = amountIn
	set ..Fee = amountIn * ..#FEERATE		
	// compute AmountOut		
	if (amountIn '= 0) {
		set ..ExchangeRate = ##class(FCE.Currency).ComputeRate(currencyOut, currencyIn)
		set ..AmountOut = (amountIn - ..Fee) * ..ExchangeRate
	}
	// check available stock
	if $isobject(branch) {
		set stockAmountOut = branch.CurrencyBalances.GetAt(currencyOut)
		if (..AmountOut > stockAmountOut) {
			set custom = "Not enough stock in branch for " _ currencyOut
			set valid = $$Error^%apiOBJ(5001, custom)			
		}
	}
	return 1 }
%PhysicalAddress(id,paddr) methodimpl
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^BaRe.BSqw.1(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") methodimpl {
	Set locked=0,sc=1
	Try {
		if ($listlength(idxlist)=1)&&($listget(idxlist,1)="") { return 1 }
		Set tPtr=0
		While $listnext(idxlist,tPtr,tIndex) {
			continue:tIndex=""
			If '($d(^oddCOM($classname(),"i",tIndex))) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Return sc }
		If lockExtent {
			Set sc=..%LockExtent(0)
			If ('sc) { Return sc }
			Set locked=1
		}
		If $system.CLS.IsMthd("%OnBeforePurgeIndices") {
			Set sc=..%OnBeforePurgeIndices(.idxlist)
			If (('sc))||(($listlength(idxlist)=1)&&($listget(idxlist,1)="")) {
				If locked {
					Do ..%SQLReleaseTableLock(0)
				}
				Return sc
			}
		}
		if ((idxlist="")||($listfind(idxlist,"$CurrencyOrder"))),'$listfind(pIgnoreIndexList,"$CurrencyOrder") {
			kill ^BaRe.BSqw.2
		}
		if ((idxlist="")||($listfind(idxlist,"AccountHolderIndex"))),'$listfind(pIgnoreIndexList,"AccountHolderIndex") {
			kill ^BaRe.BSqw.3
		}
		if ((idxlist="")||($listfind(idxlist,"BranchIndex"))),'$listfind(pIgnoreIndexList,"BranchIndex") {
			kill ^BaRe.BSqw.4
		}
		if ((idxlist="")||($listfind(idxlist,"InIndex"))),'$listfind(pIgnoreIndexList,"InIndex") {
			kill ^BaRe.BSqw.5
		}
		if ((idxlist="")||($listfind(idxlist,"OutIndex"))),'$listfind(pIgnoreIndexList,"OutIndex") {
			kill ^BaRe.BSqw.6
		}
		if ((idxlist="")||($listfind(idxlist,"PaymentIndex"))),'$listfind(pIgnoreIndexList,"PaymentIndex") {
			kill ^BaRe.BSqw.7
		}
		if ((idxlist="")||($listfind(idxlist,"StatusIndex"))),'$listfind(pIgnoreIndexList,"StatusIndex") {
			kill ^BaRe.BSqw.8
		}
		if idxlist="" kill ^BaRe.BSqw.1.0
		Set sc=1
		If $system.CLS.IsMthd("%OnAfterPurgeIndices") { Set sc=..%OnAfterPurgeIndices(.idxlist) }
	} Catch tException {
		Set sc=tException.AsStatus(),$ZE=""
	}
	If locked { Do ..%UnlockExtent(0) }
	Quit sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0) methodimpl
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^BaRe.BSqw.1(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("FCE.CurrencyOrder","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^BaRe.BSqw.1(%d(1))),"FCE.CurrencyOrder",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="") methodimpl
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^BaRe.BSqw.1#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"FCE"_"."_"CurrencyOrder") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"FCE"_"."_"CurrencyOrder") } QUIT 0
	Return
%SQLAfterTriggers() methodimpl
	new %ok,pChanged,pNew,pOld set %ok=1 //  'AFTER' trigger(s)
	if %oper="INSERT" {
		set pNew(12)=%d(12),pNew(1)=%d(1),pNew(13)=%d(13),pNew(5)=%d(5),pNew(8)=%d(8),pNew(6)=%d(6)
	}
	if %oper="UPDATE" {
		set pNew(12)=$g(%d(12)),pNew(1)=$g(%d(1)),pNew(13)=$g(%d(13)),pNew(5)=$g(%d(5)),pNew(8)=$g(%d(8)),pNew(6)=$g(%d(6))
	}
	if %oper="DELETE" {
		set pNew(12)=$g(%e(12)),pNew(1)=%d(1),pNew(13)=$g(%e(13)),pNew(5)=$g(%e(5)),pNew(8)=$g(%e(8)),pNew(6)=$g(%e(6))
	}
	if ("DELETE"[%oper) { do ..DeletePaymentExecute(%oper,.pNew,.pOld,.pChanged,.%ok,.%msg) if '%ok { set sqlcode=-13_$s(%oper="INSERT":1,%oper="UPDATE":3,1:5) quit  }}	// Call Trigger DeletePayment
	if ("UPDATE/DELETE"[%oper) { do ..UpdateDeleteInNotesExecute(%oper,.pNew,.pOld,.pChanged,.%ok,.%msg) if '%ok { set sqlcode=-13_$s(%oper="INSERT":1,%oper="UPDATE":3,1:5) quit  }}	// Call Trigger UpdateDeleteInNotes
	RETURN
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
	RETURN ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="") methodimpl
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.CurrencyOrder'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.CurrencyOrder'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.CurrencyOrder' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.CurrencyOrder' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %i=%d(1)\64000+1,%o=%d(1)#64000+1
		if ((pIndices="")||($lf(pIndices,"$CurrencyOrder"))),'$listfind(pIgnoreIndexList,"$CurrencyOrder") {
			if pActions["P" {
				set $bit(^BaRe.BSqw.2(%i),%o)=0
			}
			if pActions["B" {
				set $bit(^BaRe.BSqw.2(%i),%o)=1
			}
		}
		if ((pIndices="")||($lf(pIndices,"AccountHolderIndex"))),'$listfind(pIgnoreIndexList,"AccountHolderIndex") {
			if pActions["P" {
				set sn(1)=%e(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^BaRe.BSqw.3(sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^BaRe.BSqw.3(sn(1),sn(2))=%d(18)
			}
		}
		if ((pIndices="")||($lf(pIndices,"BranchIndex"))),'$listfind(pIgnoreIndexList,"BranchIndex") {
			if pActions["P" {
				set sn(1)=%e(6) set $bit(^BaRe.BSqw.4(sn(1),%i),%o)=0
			}
			if pActions["B" {
				set sn(1)=%d(6)
				set $bit(^BaRe.BSqw.4(sn(1),%i),%o)=1
			}
		}
		if ((pIndices="")||($lf(pIndices,"InIndex"))),'$listfind(pIgnoreIndexList,"InIndex") {
			if pActions["P" {
				set sn(1)=%e(7) set:sn(1)="" sn(1)=-1E14 set $bit(^BaRe.BSqw.5(sn(1),%i),%o)=0
			}
			if pActions["B" {
				set sn(1)=%d(7) set:sn(1)="" sn(1)=-1E14
				set $bit(^BaRe.BSqw.5(sn(1),%i),%o)=1
			}
		}
		if ((pIndices="")||($lf(pIndices,"OutIndex"))),'$listfind(pIgnoreIndexList,"OutIndex") {
			if pActions["P" {
				set sn(1)=%e(8) set:sn(1)="" sn(1)=-1E14 set $bit(^BaRe.BSqw.6(sn(1),%i),%o)=0
			}
			if pActions["B" {
				set sn(1)=%d(8) set:sn(1)="" sn(1)=-1E14
				set $bit(^BaRe.BSqw.6(sn(1),%i),%o)=1
			}
		}
		if ((pIndices="")||($lf(pIndices,"PaymentIndex"))),'$listfind(pIgnoreIndexList,"PaymentIndex") {
			if pActions["P" {
				set sn(1)=%e(12) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^BaRe.BSqw.7(sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(12) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^BaRe.BSqw.7(sn(1),sn(2))=%d(18)
			}
		}
		if ((pIndices="")||($lf(pIndices,"StatusIndex"))),'$listfind(pIgnoreIndexList,"StatusIndex") {
			if pActions["P" {
				set sn(1)=$zu(28,%e(16),7) set $bit(^BaRe.BSqw.8(sn(1),%i),%o)=0
			}
			if pActions["B" {
				set sn(1)=$zu(28,%d(16),7)
				set $bit(^BaRe.BSqw.8(sn(1),%i),%o)=1
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUniqueIndices(pIndices,pOK) methodimpl
	new d,g,n,o set d=0
	if $lf(pIndices,"PaymentIndex") {
		set g="^BaRe.BSqw.7",o="^BaRe.BSqw.7("
		for  {
			set g=$q(@g@("")) quit:g=""||(o'=$e(g,1,$l(o)))
			if $qs(g,1)'=-1E14 { set n=$q(@g@("")) quit:n=""  if o=$e(n,1,$l(o)),$lb($qs(g,1))=$lb($qs(n,1)) { set d=1 quit  }}
	}
		if d { set pOK=0,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler42",,"PaymentIndex","FCE"_"."_"CurrencyOrder") QUIT  }
	}
	set pOK=1 QUIT
%SQLCopyIcolIntoName() methodimpl
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("ATM")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("AccountHolder")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("AmountIn")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("AmountOut")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Branch")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("CurrencyIn")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("CurrencyOut")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("DateStamp")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("ExchangeRate")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("Fee")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("Payment")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("Requestor")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("RequestorEmail")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("Satisfaction")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("Status")=%d(16) set:$a(%e,17)&&$d(%d(17)) %f("TimeStamp")=%d(17) set:$a(%e,18)&&$d(%d(18)) %f("x__classname")=%d(18)
	QUIT
%SQLDefineiDjVars(%d,subs,master) methodimpl
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0,%bufferedColumns=0) methodimpl
	// SQL DELETE method for table FCE.CurrencyOrder
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^BaRe.BSqw.1(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.CurrencyOrder","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"CurrencyOrder",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"FCE"_"."_"CurrencyOrder",%rowid) do ..%SQLEExit() QUIT  }
	if %e(18)'="" { set sn=$p(%e(18),$e(%e(18)),$l(%e(18),$e(%e(18)))-1) if "FCE.CurrencyOrder"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),",%p("PaymentIndex")="%e(12),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","FCE.CurrencyOrder",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","FCE.CurrencyOrder",%k,"f",%t)) quit:%t=""  set %st=(%t="FCE.CurrencyOrder") set %fk="" for  set %fk=$o(^rINDEXEXT("F","FCE.CurrencyOrder",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(3))'="",'$g(%0CacheLock("FCE.AccountHolder","E")),'##class(FCE.AccountHolder).%SQLExists(1,,%e(3)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"FCE"_"."_"CurrencyOrder","AccountHolder","ACCOUNTHOLDER") quit
	. if '$g(%0CacheLock("FCE.Branch","E")),'##class(FCE.Branch).%SQLExists(1,,%e(6)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"FCE"_"."_"CurrencyOrder","Branch","BRANCH") quit
	. if $g(%e(12))'="",'$g(%0CacheLock("FCE.Payment","E")),'##class(FCE.Payment).IDKEYSQLExists(1,,%e(12)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"FCE"_"."_"CurrencyOrder","PaymentFK","PAYMENT") quit
	if '($a(%check,2)#2),'$g(%0CacheLock("FCE.CurrencyOrder","E")) {
		if $g(%e(12))'="" { lock +^BaRe.BSqw.7(%e(12))#"S":$zu(115,4) if $t { lock -^BaRe.BSqw.7(%e(12))#"S" } else { do ..%SQLUnlockError("PaymentIndex") set SQLCODE=sqlcode do ..%SQLEExit() QUIT }}
	}
	set ce="" for  { set ce=$order(^oddSQL("FCE","CurrencyOrder","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		new %i,%o set %i=%d(1)\64000+1,%o=%d(1)#64000+1
		set $bit(^BaRe.BSqw.2(%i),%o)=0
		set sn(1)=%e(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^BaRe.BSqw.3(sn(1),sn(2))
		set sn(1)=%e(6) set $bit(^BaRe.BSqw.4(sn(1),%i),%o)=0
		set sn(1)=%e(7) set:sn(1)="" sn(1)=-1E14 set $bit(^BaRe.BSqw.5(sn(1),%i),%o)=0
		set sn(1)=%e(8) set:sn(1)="" sn(1)=-1E14 set $bit(^BaRe.BSqw.6(sn(1),%i),%o)=0
		set sn(1)=%e(12) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^BaRe.BSqw.7(sn(1),sn(2))
		set sn(1)=$zu(28,%e(16),7) set $bit(^BaRe.BSqw.8(sn(1),%i),%o)=0
	}
	k ^BaRe.BSqw.1(%d(1))
	if '$a(%check,4) { do ..%SQLAfterTriggers() if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT }}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"CurrencyOrder",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"CurrencyOrder") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams() methodimpl
	// Delete all temporary streams
	QUIT
%SQLEExit() methodimpl
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"CurrencyOrder"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^BaRe.BSqw.1(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef) methodimpl
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode) methodimpl
	new s set %d(1)=%rowid,s="" if '$d(^BaRe.BSqw.1(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(18)=$lg(s),%e(13)=$lg(s,3),%e(5)=$lg(s,5),%e(8)=$lg(s,6),%e(7)=$lg(s,8),%e(16)=$lg(s,14),%e(6)=$lg(s,15),%e(3)=$lg(s,16),%e(12)=$lg(s,17)
	QUIT
%SQLGetOldAll() methodimpl
	new s set %d(1)=%rowid,s="" if '$d(^BaRe.BSqw.1(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(18)=$lg(s),%e(2)=$lg(s,2),%e(13)=$lg(s,3),%e(14)=$lg(s,4),%e(5)=$lg(s,5),%e(8)=$lg(s,6),%e(4)=$lg(s,7),%e(7)=$lg(s,8),%e(10)=$lg(s,9),%e(11)=$lg(s,10),%e(9)=$lg(s,11),%e(17)=$lg(s,12),%e(15)=$lg(s,13),%e(16)=$lg(s,14),%e(6)=$lg(s,15),%e(3)=$lg(s,16),%e(12)=$lg(s,17)
	QUIT
%SQLGetOldIndex(%rowid,%e,pF=0,sqlcode,%buffervector=0,fld="") methodimpl
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("AccountHolder")) %d(3)=tF("AccountHolder") set:$d(tF("x__classname")) %d(18)=tF("x__classname") set:$d(tF("Branch")) %d(6)=tF("Branch") set:$d(tF("CurrencyIn")) %d(7)=tF("CurrencyIn") set:$d(tF("CurrencyOut")) %d(8)=tF("CurrencyOut") set:$d(tF("Payment")) %d(12)=tF("Payment") set:$d(tF("Status")) %d(16)=tF("Status") 
			RETURN
		}
	}
	catch { }
	new s set %d(1)=%rowid,s="" if '$d(^BaRe.BSqw.1(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(18)=$lg(s),%e(8)=$lg(s,6),%e(7)=$lg(s,8),%e(16)=$lg(s,14),%e(6)=$lg(s,15),%e(3)=$lg(s,16),%e(12)=$lg(s,17)
	if pF { set:$d(%d(3)) pF("AccountHolder")=%d(3) set:$d(%d(18)) pF("x__classname")=%d(18) set:$d(%d(6)) pF("Branch")=%d(6) set:$d(%d(7)) pF("CurrencyIn")=%d(7) set:$d(%d(8)) pF("CurrencyOut")=%d(8) set:$d(%d(12)) pF("Payment")=%d(12) set:$d(%d(16)) pF("Status")=%d(16)  }
	set sqlcode=0
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0,%bufferedColumns=0) methodimpl
	// SQL INSERT method for table FCE.CurrencyOrder
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","FCE"_"."_"CurrencyOrder") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			do:$g(%d(6))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,7)) 
			quit:sqlcode<0		// A required field was missing
			new %unlockcon
			if $g(%d(12))'="" {	// Constraint PaymentIndex
				if '$a(%check,2) { lock +^BaRe.BSqw.7(%d(12)):$zu(115,4) if $t { set %unlockcon(41)=$name(^BaRe.BSqw.7(%d(12))),$e(%l,3)=$c(1) } else { do ..%SQLUnlockError("PaymentIndex") quit  } }
				if '$a(%check,7) { if $d(^BaRe.BSqw.7(%d(12))) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"CurrencyOrder","PaymentIndex","Payment"_"="_$$quoter^%apiSQL($g(%d(12)))) quit  }} // INSERT
				else { new tID set tID=..PaymentIndexSQLFindRowIDByConstraint($lb(%d(12)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
			}
			quit:$zu(115,7)  set %msg=""
			if $g(%d(3))'="",'##class(FCE.AccountHolder).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"CurrencyOrder","AccountHolder","ACCOUNTHOLDER")_"  "_$g(%msg) quit  }		// Foreign Key Constraint AccountHolder
			if '##class(FCE.Branch).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(6)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"CurrencyOrder","Branch","BRANCH")_"  "_$g(%msg) quit  }		// Foreign Key Constraint Branch
			if $g(%d(12))'="",'##class(FCE.Payment).IDKEYSQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(12)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"CurrencyOrder","PaymentFK","PAYMENT")_"  "_$g(%msg) quit  }		// Foreign Key Constraint PaymentFK
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^BaRe.BSqw.1) } elseif %d(1)>$g(^BaRe.BSqw.1) { if $i(^BaRe.BSqw.1,$zabs(%d(1)-$g(^BaRe.BSqw.1))) {}} elseif $d(^BaRe.BSqw.1(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"FCE"_"."_"CurrencyOrder"_"."_"ID") do ..%SQLEExit() RETURN "" }
	for icol=18,3,6,7,8,12,16,13,5 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^BaRe.BSqw.1(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.CurrencyOrder","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"CurrencyOrder",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^BaRe.BSqw.1(%d(1))=$lb(%d(18),%d(2),%d(13),%d(14),%d(5),%d(8),%d(4),%d(7),%d(10),%d(11),%d(9),%d(17),%d(15),%d(16),%d(6),%d(3),%d(12))
	if '$a(%check,3) {
		new %i,%o set %i=%d(1)\64000+1,%o=%d(1)#64000+1
		set $bit(^BaRe.BSqw.2(%i),%o)=1
		set sn(1)=%d(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^BaRe.BSqw.3(sn(1),sn(2))=%d(18)
		set sn(1)=%d(6)
		set $bit(^BaRe.BSqw.4(sn(1),%i),%o)=1
		set sn(1)=%d(7) set:sn(1)="" sn(1)=-1E14
		set $bit(^BaRe.BSqw.5(sn(1),%i),%o)=1
		set sn(1)=%d(8) set:sn(1)="" sn(1)=-1E14
		set $bit(^BaRe.BSqw.6(sn(1),%i),%o)=1
		set sn(1)=%d(12) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^BaRe.BSqw.7(sn(1),sn(2))=%d(18)
		set sn(1)=$zu(28,%d(16),7)
		set $bit(^BaRe.BSqw.8(sn(1),%i),%o)=1
	}
	lock:$a(%l,3) -@(%unlockcon(41)_"#""D""") 
	lock:$a(%l) -^BaRe.BSqw.1(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"CurrencyOrder",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"CurrencyOrder") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) methodimpl {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"FCE"_"."_"CurrencyOrder"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname) methodimpl
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"FCE"_"."_"CurrencyOrder") quit
%SQLNormalizeFields() methodimpl
	set:$g(%d(12))'="" %d(12)=$$NormalizeField12(%d(12))
	set:$g(%d(3))'="" %d(3)=$$NormalizeField3(%d(3))
	set:$g(%d(6))'="" %d(6)=$$NormalizeField6(%d(6))
	set:$g(%d(10))'="" %d(10)=$normalize($decimal(%d(10)),3)
	set:$g(%d(9))'="" %d(9)=$s($zu(115,13)&&(%d(9)=$c(0)):"",1:%d(9)\1)
	new %f for %f=4,5,11 { set:$g(%d(%f))'="" %d(%f)=$select($zu(115,13)&&(%d(%f)=$c(0)):"",1:$normalize($decimal(%d(%f)),2)) }
	set:$g(%d(17))'="" %d(17)=$select($zu(115,13)&&(%d(17)=$c(0)):"",1:+%d(17))
	QUIT
NormalizeField3(%val) {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:$decimal(%val)\1)
}
NormalizeField6(%val) {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:$decimal(%val)\1)
}
NormalizeField12(%val) {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:$decimal(%val)\1)
}
	Return
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="") methodimpl
	RETURN ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0) methodimpl
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"FCE"_"."_"CurrencyOrder",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^BaRe.BSqw.1(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"FCE"_"."_"CurrencyOrder",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^BaRe.BSqw.1(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(18)=$lg(s) if d(18)'="" { new sn set sn=$p(d(18),$e(d(18)),$l(d(18),$e(d(18)))-1) if "FCE.CurrencyOrder"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,2) set d(3)=$lg(s,16) set d(4)=$lg(s,7) set d(5)=$lg(s,5) set d(6)=$lg(s,15) set d(7)=$lg(s,8) set d(8)=$lg(s,6) set d(9)=$lg(s,11) set d(10)=$lg(s,9) set d(11)=$lg(s,10) set d(12)=$lg(s,17) set d(13)=$lg(s,3) set d(14)=$lg(s,4) set d(15)=$lg(s,13) set d(16)=$lg(s,14) set d(17)=$lg(s,12) set d(18)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^BaRe.BSqw.1(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("FCE.CurrencyOrder",18),d=18,d=$zobjexport(d,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^BaRe.BSqw.1(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLReleaseLock(%rowid,s=0,i=0,e="") methodimpl
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^BaRe.BSqw.1(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0) methodimpl
	set s=$e("S",s)_$e("D",i) lock -^BaRe.BSqw.1#s QUIT 1
	Return
%SQLUnlock() methodimpl
	lock:$a(%l) -^BaRe.BSqw.1(%d(1))#"E"
	QUIT
%SQLUnlock2() methodimpl
	lock:$a(%l,3) -@(%unlockcon(41)_"#""D""") QUIT
%SQLUnlockError(cname) methodimpl
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"FCE"_"."_"CurrencyOrder",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"FCE"_"."_"CurrencyOrder",cname) } quit
	Return
%SQLUnlockRef() methodimpl
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid,%bufferedColumns=0,%bufferedColumnsDel=0) methodimpl
	// SQL UPDATE method for table FCE.CurrencyOrder
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'$a(%check,7),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","FCE"_"."_"CurrencyOrder") QUIT  }
	for icol=2:1:18 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^BaRe.BSqw.1(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.CurrencyOrder","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"CurrencyOrder",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"CurrencyOrder",%rowid) do ..%SQLEExit() QUIT  } for icol=18,3,6,7,8,12,16,13,5 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"CurrencyOrder",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(18)'="" set sn=$p(%e(18),$e(%e(18)),$l(%e(18),$e(%e(18)))-1) if "FCE.CurrencyOrder"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if $a(%e,6),$g(%d(6))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,7)) }
			quit:sqlcode
			new %unlockcon
			if ($a(%e,12)),$g(%d(12))'="" {	// UNIQUE constraint PaymentIndex
				if '($a(%check,2)#2),'$g(%0CacheLock("FCE.CurrencyOrder","E")) {
					lock +^BaRe.BSqw.7(%d(12)):$zu(115,4) if $t { set %unlockcon(41)=$name(^BaRe.BSqw.7(%d(12))),$e(%l,3)=$c(1) } else { do ..%SQLUnlockError("PaymentIndex") quit  } 
					if %e(12)'="" { lock +^BaRe.BSqw.7(%e(12)):$zu(115,4) if $t { lock -^BaRe.BSqw.7(%e(12)) } else { do ..%SQLUnlockError("PaymentIndex") quit  }}
				}
				if $d(^BaRe.BSqw.7(%d(12))) { set sqlcode=-120,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"CurrencyOrder","PaymentIndex","Payment"_"="_$$quoter^%apiSQL($g(%d(12)))) quit  }
			}
			new %fk,%st,%t,%y
			if ($a(%e,12)),'$zu(115,7) {
				set %t="" for  { set %t=$o(^rINDEXEXT("F","FCE.CurrencyOrder","PaymentIndex","f",%t)) quit:%t=""  set %st=(%t="FCE.CurrencyOrder") s %fk="" for  { set %fk=$o(^rINDEXEXT("F","FCE.CurrencyOrder","PaymentIndex","f",%t,%fk)) quit:%fk=""  x "set %y=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,""PaymentIndex"",$a(%check,2),%e(12),%d(12))" if %y { set sqlcode=-123 quit  }}}
			}
			quit:$zu(115,7)  set %msg=""
			if $a(%e,3),$g(%updcas)'="%1",$g(%d(3))'="",'##class(FCE.AccountHolder).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"CurrencyOrder","AccountHolder","ACCOUNTHOLDER")_"  "_$g(%msg) quit  }
			if $a(%e,6),$g(%updcas)'="%1",'##class(FCE.Branch).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(6)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"CurrencyOrder","Branch","BRANCH")_"  "_$g(%msg) quit  }
			if $a(%e,12),$g(%updcas)'="IDKEY",$g(%d(12))'="",'##class(FCE.Payment).IDKEYSQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(12)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"CurrencyOrder","PaymentFK","PAYMENT")_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,3)),%e(3)'="",'$g(%0CacheLock("FCE.AccountHolder","E")),'##class(FCE.AccountHolder).%SQLExists(1,,%e(3)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"FCE"_"."_"CurrencyOrder","AccountHolder","ACCOUNTHOLDER") quit  }
			if ($a(%e,6)),%e(6)'="",'$g(%0CacheLock("FCE.Branch","E")),'##class(FCE.Branch).%SQLExists(1,,%e(6)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"FCE"_"."_"CurrencyOrder","Branch","BRANCH") quit  }
			if ($a(%e,12)),%e(12)'="",'$g(%0CacheLock("FCE.Payment","E")),'##class(FCE.Payment).IDKEYSQLExists(1,,%e(12)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"FCE"_"."_"CurrencyOrder","PaymentFK","PAYMENT") quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if '$a(%check,3) { 
		new %i,%o s %i=%d(1)\64000+1,%o=%d(1)#64000+1
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,$a(%e,8):1,$a(%e,9):1,$a(%e,10):1,$a(%e,11):1,$a(%e,12):1,$a(%e,13):1,$a(%e,14):1,$a(%e,15):1,$a(%e,16):1,$a(%e,17):1,1:$a(%e,18)) {
		set ^BaRe.BSqw.1(%d(1))=$listupdate($g(^BaRe.BSqw.1(%d(1))),1,$a(%e,18):%d(18),$a(%e,2):%d(2),$a(%e,13):%d(13),$a(%e,14):%d(14),$a(%e,5):%d(5),$a(%e,8):%d(8),$a(%e,4):%d(4),$a(%e,7):%d(7),$a(%e,10):%d(10),$a(%e,11):%d(11),$a(%e,9):%d(9),$a(%e,17):%d(17),$a(%e,15):%d(15),$a(%e,16):%d(16),$a(%e,6):%d(6),$a(%e,3):%d(3),$a(%e,12):%d(12))
	}
	if '$a(%check,3) { new %i,%o s %i=%d(1)\64000+1,%o=%d(1)#64000+1 
		if $a(%e,3)||$a(%e,18) {	// AccountHolderIndex index map
			if $a(%e,3) { set sn(1)=%e(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^BaRe.BSqw.3(sn(1),sn(2)) }
			set sn(1)=%d(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^BaRe.BSqw.3(sn(1),sn(2))=%d(18)
		}
		if $a(%e,6) { 	// BranchIndex index map
			set sn(1)=%e(6) set $bit(^BaRe.BSqw.4(sn(1),%i),%o)=0
			set sn(1)=%d(6)
			set $bit(^BaRe.BSqw.4(sn(1),%i),%o)=1
		}
		if $a(%e,7) { 	// InIndex index map
			set sn(1)=%e(7) set:sn(1)="" sn(1)=-1E14 set $bit(^BaRe.BSqw.5(sn(1),%i),%o)=0
			set sn(1)=%d(7) set:sn(1)="" sn(1)=-1E14
			set $bit(^BaRe.BSqw.5(sn(1),%i),%o)=1
		}
		if $a(%e,8) { 	// OutIndex index map
			set sn(1)=%e(8) set:sn(1)="" sn(1)=-1E14 set $bit(^BaRe.BSqw.6(sn(1),%i),%o)=0
			set sn(1)=%d(8) set:sn(1)="" sn(1)=-1E14
			set $bit(^BaRe.BSqw.6(sn(1),%i),%o)=1
		}
		if $a(%e,12)||$a(%e,18) {	// PaymentIndex index map
			if $a(%e,12) { set sn(1)=%e(12) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^BaRe.BSqw.7(sn(1),sn(2)) }
			set sn(1)=%d(12) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^BaRe.BSqw.7(sn(1),sn(2))=%d(18)
		}
		if $a(%e,16) { 	// StatusIndex index map
			set sn(1)=$zu(28,%e(16),7) set $bit(^BaRe.BSqw.8(sn(1),%i),%o)=0
			set sn(1)=$zu(28,%d(16),7)
			set $bit(^BaRe.BSqw.8(sn(1),%i),%o)=1
		}
	}
	do ..%SQLUnlock2() if '$a(%check,4) { do ..%SQLAfterTriggers() if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"CurrencyOrder",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"CurrencyOrder") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateCompFields(sqlcode) methodimpl
	QUIT 'sqlcode
%SQLValidateFields(sqlcode) methodimpl
	if $g(%d(9))'="",'($s($zu(115,13)&&(%d(9)=$c(0)):1,$isvalidnum(%d(9),0,59901,+$system.SYS.TimeStamp()):1,'$isvalidnum(%d(9)):$$Error^%apiOBJ(7207,%d(9)),%d(9)<59901:$$Error^%apiOBJ(7204,%d(9),59901),1:$$Error^%apiOBJ(7203,%d(9),+$system.SYS.TimeStamp()))) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	if $g(%d(16))'="",'($s(%d(16)'["-"&&("-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled-"[("-"_$select(%d(16)=$c(0):"",1:%d(16))_"-")):1,1:$$Error^%apiOBJ(7205,%d(16),"-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled"))) { set sqlcode=..%SQLInvalid(16+1,%d(16)) } 
	if $g(%d(17))'="",'($select($zu(115,13)&&(%d(17)=$c(0)):1,$isvalidnum(%d(17),,0,86400)&&(%d(17)<86400):1,'$isvalidnum(%d(17)):$$Error^%apiOBJ(7207,%d(17)),%d(17)<0:$$Error^%apiOBJ(7204,%d(17),0),1:$$Error^%apiOBJ(7203,+%d(17),86400))) { set sqlcode=..%SQLInvalid(17+1,%d(17)) } 
	if $g(%d(11))'="",'($isvalidnum(%d(11),2,,)) { set sqlcode=..%SQLInvalid(11+1,%d(11)) } 
	if $g(%d(10))'="",'($select($isvalidnum(%d(10),3,0,):1,'$isvalidnum(%d(10)):$$Error^%apiOBJ(7207,%d(10)),1:$$Error^%apiOBJ(7204,%d(10),0))) { set sqlcode=..%SQLInvalid(10+1,%d(10)) } 
	new %f for %f=4,5 { if $g(%d(%f))'="",'($select($zu(115,13)&&(%d(%f)=$c(0)):1,$isvalidnum(%d(%f),2,0,):1,'$isvalidnum(%d(%f)):$$Error^%apiOBJ(7207,%d(%f)),1:$$Error^%apiOBJ(7204,%d(%f),0))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(15))'="",'(%d(15)'["-"&&("-1-2-3-4-5-"[("-"_%d(15)_"-"))) { set sqlcode=..%SQLInvalid(15+1,%d(15)) } 
	for %f=7,8 { if $g(%d(%f))'="",'(%d(%f)'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%d(%f)_"-"))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=2,13,14 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() methodimpl {
	set %n=$lb(,"ID","ATM","AccountHolder","AmountIn","AmountOut","Branch","CurrencyIn","CurrencyOut","DateStamp","ExchangeRate","Fee","Payment","Requestor","RequestorEmail","Satisfaction","Status","TimeStamp","x__classname")
	QUIT }
%Save(related=1) methodimpl {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) If ('sc) { ZTrap "SG" } Set intRef=+$this,objValue=$get(%objTX(1,+$g(%objTX(0,intRef)),1)),sc=..%SerializeObject(.objValue,1) If ('sc) { ZTrap "SG" } Set %objTX(1,%objTX(0,intRef),1)=objValue GoTo %SaveCOMMIT
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intRef=$li(data) If '$data(%objTX(1,+$g(%objTX(0,intRef)),2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,%objTX(0,intRef)) Kill %objTX(2,i),%objTX(11,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objRef)),1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objRef),1)=objValue Kill %objTX(1,%objTX(0,+objRef),3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objRef),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objRef),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objRef)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intPred="",intRef=$li(data) For  Set intPred=$order(%objTX(1,%objTX(0,intRef),2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If ('sc) { If $d(%objTX(11,+%objTX(1,intPred))) { Set %objTX(2,%objTX(11,+%objTX(1,intPred)),1)=sc } Else { Set %objTX(2,$i(%objTX(2)),1)=sc,%objTX(11,+%objTX(1,intPred))=%objTX(2) } } If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objSerialize)),1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objSerialize),1)=objValue Kill %objTX(1,%objTX(0,+objSerialize),3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objSerialize),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objSerialize),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objSerialize)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set i="" for  set i=$order(%objTX(2,i)) quit:i=""  if ('$Get(%objTX(2,i,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,i,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) methodimpl {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0,locku=$c(0)
		if 'idassigned { set id=$i(^BaRe.BSqw.1) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set pidchunk=id\64000+1,pidoffset=id#64000+1
		if (i%AccountHolder'="")&&('##class(FCE.AccountHolder).%ExistsId(i%AccountHolder)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"FCE.CurrencyOrder.AccountHolder("_$zu(144,1,i%AccountHolder)_")")) }
		if (i%Branch'="")&&('##class(FCE.Branch).%ExistsId(i%Branch)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"FCE.CurrencyOrder.Branch("_$zu(144,1,i%Branch)_")")) }
		set zzc10v1=$zu(28,i%Status,7,32768)
		set zzc10v2=$s(i%Payment'="":i%Payment,1:-1E14)
		set zzc10v3=$s(i%CurrencyOut'="":i%CurrencyOut,1:-1E14)
		set zzc10v4=$s(i%CurrencyIn'="":i%CurrencyIn,1:-1E14)
		set zzc10v5=$s(i%AccountHolder'="":i%AccountHolder,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^BaRe.BSqw.1(id))) {
					set insert=1
					if lock { lock -(^BaRe.BSqw.1(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^BaRe.BSqw.1(id)#"ES") set tSharedLock=1 }
				if (i%Payment'=""),'..PaymentFKCheck(i%Payment) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".PaymentFK","INSERT"))
				if i%Payment'="" { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^BaRe.BSqw.7(zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^BaRe.BSqw.7(zzc10v2)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PaymentIndex:"_$zreference)) }}
				set ^BaRe.BSqw.1(id)=$lb("",i%ATM,i%Requestor,i%RequestorEmail,i%AmountOut,i%CurrencyOut,i%AmountIn,i%CurrencyIn,i%ExchangeRate,i%Fee,i%DateStamp,i%TimeStamp,i%Satisfaction,i%Status,i%Branch,i%AccountHolder,i%Payment)
				set $bit(^BaRe.BSqw.2(pidchunk),pidoffset)=1
				set ^BaRe.BSqw.3(zzc10v5,id)=""
				set $bit(^BaRe.BSqw.4(i%Branch,pidchunk),pidoffset)=1
				set $bit(^BaRe.BSqw.5(zzc10v4,pidchunk),pidoffset)=1
				set $bit(^BaRe.BSqw.6(zzc10v3,pidchunk),pidoffset)=1
				set ^BaRe.BSqw.7(zzc10v2,id)=""
				set $bit(^BaRe.BSqw.8(zzc10v1,pidchunk),pidoffset)=1
			}
			else {
				set zzc31v1=^BaRe.BSqw.1(id)
				set zzc31v2=$listget(zzc31v1,14)
				set zzc31v3=$listget(zzc31v1,17)
				set zzc31v4=$s(zzc31v3'="":zzc31v3,1:-1E14)
				set zzc31v5=$listget(zzc31v1,6)
				set zzc31v6=$listget(zzc31v1,8)
				set zzc31v7=$listget(zzc31v1,15)
				set zzc31v8=$listget(zzc31v1,16)
				if ((i%Payment'=zzc31v3))&&((i%Payment'=""))&&('..PaymentFKCheck(i%Payment)) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".PaymentFK","UPDATE"))
				if i%Payment'="" { if i%Payment'=zzc31v3 { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^BaRe.BSqw.7(zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } if zzc31v3'="" { l +^BaRe.BSqw.7(zzc31v4):$zu(115,4) if $t { l -^BaRe.BSqw.7(zzc31v4) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }}} If ($data(^BaRe.BSqw.7(zzc10v2)))&&('$data(^BaRe.BSqw.7(zzc10v2,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PaymentIndex:"_$zreference)) } } }
				if $get(%updcas)="" {
					if ((i%Payment'=zzc31v3))&&((zzc31v3'=""))&&('..PaymentFKCheck(zzc31v3,1)) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5795,$classname()_".PaymentFK","UPDATE"))
				}
				set tNew(1)=id,tSQLCODE=0 do ..%SQLGetOld(id,.tNew,.tOld,.tSQLCODE)
				if tSQLCODE < 0 { throw ##class(%Exception.SQL).CreateFromSQLCODE(tSQLCODE,"Error loading old values for Object triggers"_$select($get(%msg)'="":": "_%msg,1:"")) }
				if (i%AccountHolder'=zzc31v8) {
					kill ^BaRe.BSqw.3($s(zzc31v8'="":zzc31v8,1:-1E14),id)
					set ^BaRe.BSqw.3(zzc10v5,id)=""
				}
				if (i%Branch'=zzc31v7) {
					set $bit(^BaRe.BSqw.4(zzc31v7,pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.4(i%Branch,pidchunk),pidoffset)=1
				}
				if (i%CurrencyIn'=zzc31v6) {
					set $bit(^BaRe.BSqw.5($s(zzc31v6'="":zzc31v6,1:-1E14),pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.5(zzc10v4,pidchunk),pidoffset)=1
				}
				if (i%CurrencyOut'=zzc31v5) {
					set $bit(^BaRe.BSqw.6($s(zzc31v5'="":zzc31v5,1:-1E14),pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.6(zzc10v3,pidchunk),pidoffset)=1
				}
				if (i%Payment'=zzc31v3) {
					kill ^BaRe.BSqw.7(zzc31v4,id)
					if i%Payment'=zzc31v3{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"PaymentIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"PaymentIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v3,i%Payment) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^BaRe.BSqw.7(zzc10v2,id)=""
				}
				if (i%Status'=zzc31v2) {
					set $bit(^BaRe.BSqw.8($zu(28,zzc31v2,7,32768),pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.8(zzc10v1,pidchunk),pidoffset)=1
				}
				set ^BaRe.BSqw.1(id)=$lb("",i%ATM,i%Requestor,i%RequestorEmail,i%AmountOut,i%CurrencyOut,i%AmountIn,i%CurrencyIn,i%ExchangeRate,i%Fee,i%DateStamp,i%TimeStamp,i%Satisfaction,i%Status,i%Branch,i%AccountHolder,i%Payment)
				do ..%ExecuteAfterTriggers("UPDATE",i%"%%OID",$this,.tOld)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^BaRe.BSqw.1(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^BaRe.BSqw.1(id)) }
		}
		lock:$Ascii($Extract(locku,1)) -^BaRe.BSqw.7(zzc10v2)#"D"
		if lock lock -(^BaRe.BSqw.1(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) methodimpl {
	try {
		set zzc5v1=$lg(idList,1)
		set zzc5v2=$listget(data,14)
		set zzc5v3=$listget(data,17)
		set zzc5v4=$listget(data,6)
		set zzc5v5=$listget(data,8)
		set zzc5v6=$listget(data,15)
		set zzc5v7=$listget(data,16)
		set zzc5v8=$listget(data,1)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0,locku=$c(0)
		if 'idassigned { set id=$i(^BaRe.BSqw.1) }
		set pidchunk=id\64000+1,pidoffset=id#64000+1
		if (zzc5v7'="")&&('##class(FCE.AccountHolder).%ExistsId(zzc5v7)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"FCE.CurrencyOrder.AccountHolder("_$zu(144,1,zzc5v7)_")")) }
		if (zzc5v6'="")&&('##class(FCE.Branch).%ExistsId(zzc5v6)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"FCE.CurrencyOrder.Branch("_$zu(144,1,zzc5v6)_")")) }
		set zzc10v1=$zu(28,zzc5v2,7,32768)
		set zzc10v2=$s(zzc5v3'="":zzc5v3,1:-1E14)
		set zzc10v3=$s(zzc5v4'="":zzc5v4,1:-1E14)
		set zzc10v4=$s(zzc5v5'="":zzc5v5,1:-1E14)
		set zzc10v5=$s(zzc5v7'="":zzc5v7,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^BaRe.BSqw.1(id))) {
					set insert=1
					if lock { lock -(^BaRe.BSqw.1(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^BaRe.BSqw.1(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if (zzc5v3'=""),'..PaymentFKCheck(zzc5v3) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".PaymentFK","INSERT"))
				if zzc5v3'="" { if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^BaRe.BSqw.7(zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^BaRe.BSqw.7(zzc10v2)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PaymentIndex:"_$zreference)) }}
				set ^BaRe.BSqw.1(id)=data
				set $bit(^BaRe.BSqw.2(pidchunk),pidoffset)=1
				set ^BaRe.BSqw.3(zzc10v5,id)=zzc5v8
				set $bit(^BaRe.BSqw.4(zzc5v6,pidchunk),pidoffset)=1
				set $bit(^BaRe.BSqw.5(zzc10v4,pidchunk),pidoffset)=1
				set $bit(^BaRe.BSqw.6(zzc10v3,pidchunk),pidoffset)=1
				set ^BaRe.BSqw.7(zzc10v2,id)=zzc5v8
				set $bit(^BaRe.BSqw.8(zzc10v1,pidchunk),pidoffset)=1
			}
			else {
				set zzc31v1=^BaRe.BSqw.1(zzc5v1)
				set zzc31v2=$listget(zzc31v1,14)
				set zzc31v3=$listget(zzc31v1,17)
				set zzc31v4=$s(zzc31v3'="":zzc31v3,1:-1E14)
				set zzc31v5=$listget(zzc31v1,6)
				set zzc31v6=$listget(zzc31v1,8)
				set zzc31v7=$listget(zzc31v1,15)
				set zzc31v8=$listget(zzc31v1,16)
				if ((zzc5v3'=zzc31v3))&&((zzc5v3'=""))&&('..PaymentFKCheck(zzc5v3)) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".PaymentFK","UPDATE"))
				if zzc5v3'="" { if zzc5v3'=zzc31v3 { if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^BaRe.BSqw.7(zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } if zzc31v3'="" { l +^BaRe.BSqw.7(zzc31v4):$zu(115,4) if $t { l -^BaRe.BSqw.7(zzc31v4) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }}} If ($data(^BaRe.BSqw.7(zzc10v2)))&&('$data(^BaRe.BSqw.7(zzc10v2,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PaymentIndex:"_$zreference)) } } }
				if $get(%updcas)="" {
					if ((zzc5v3'=zzc31v3))&&((zzc31v3'=""))&&('..PaymentFKCheck(zzc31v3,1)) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5795,$classname()_".PaymentFK","UPDATE"))
				}
				set tNew(1)=id,tNew(5)=$listget(data,5),tNew(6)=zzc5v6,tNew(8)=zzc5v4,tNew(13)=$listget(data,3)
				set tNew(1)=id,tSQLCODE=0 do ..%SQLGetOld(id,.tNew,.tOld,.tSQLCODE)
				if tSQLCODE < 0 { throw ##class(%Exception.SQL).CreateFromSQLCODE(tSQLCODE,"Error loading old values for Object triggers"_$select($get(%msg)'="":": "_%msg,1:"")) }
				if (zzc5v7'=zzc31v8) {
					kill ^BaRe.BSqw.3($s(zzc31v8'="":zzc31v8,1:-1E14),zzc5v1)
					set ^BaRe.BSqw.3(zzc10v5,id)=zzc5v8
				}
				if (zzc5v6'=zzc31v7) {
					set $bit(^BaRe.BSqw.4(zzc31v7,pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.4(zzc5v6,pidchunk),pidoffset)=1
				}
				if (zzc5v5'=zzc31v6) {
					set $bit(^BaRe.BSqw.5($s(zzc31v6'="":zzc31v6,1:-1E14),pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.5(zzc10v4,pidchunk),pidoffset)=1
				}
				if (zzc5v4'=zzc31v5) {
					set $bit(^BaRe.BSqw.6($s(zzc31v5'="":zzc31v5,1:-1E14),pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.6(zzc10v3,pidchunk),pidoffset)=1
				}
				if (zzc5v3'=zzc31v3) {
					kill ^BaRe.BSqw.7(zzc31v4,zzc5v1)
					if zzc5v3'=zzc31v3{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"PaymentIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"PaymentIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v3,zzc5v3) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^BaRe.BSqw.7(zzc10v2,id)=zzc5v8
				}
				if (zzc5v2'=zzc31v2) {
					set $bit(^BaRe.BSqw.8($zu(28,zzc31v2,7,32768),pidchunk),pidoffset)=0
					set $bit(^BaRe.BSqw.8(zzc10v1,pidchunk),pidoffset)=1
				}
				set ^BaRe.BSqw.1(id)=data
				do ..%ExecuteAfterTriggers("UPDATE",$select(id="":"",1:$listbuild(id_"",$classname())),.tNew,.tOld)
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		lock:$Ascii($Extract(locku,1)) -^BaRe.BSqw.7(zzc10v2)#"D"
		if lock lock -(^BaRe.BSqw.1(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) methodimpl {
	If lockExtent {
		Set sc=..%LockExtent(0)
		Quit:('sc) sc
	}
	s id=$order(^BaRe.BSqw.1(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^BaRe.BSqw.1(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^BaRe.BSqw.1(id))
	set pidchunk=id\64000+1,pidoffset=id#64000+1
	Set $bit(^BaRe.BSqw.2(pidchunk),pidoffset)=1
	Set bsv0N2=$listget(bsv0N1,16)
	Set bsv0N3=$s(bsv0N2'="":bsv0N2,1:-1E14)
	Set ^BaRe.BSqw.3(bsv0N3,id)=$listget(bsv0N1,1)
	Set $bit(^BaRe.BSqw.4($listget(bsv0N1,15),pidchunk),pidoffset)=1
	Set bsv0N4=$listget(bsv0N1,8)
	Set $bit(^BaRe.BSqw.5($s(bsv0N4'="":bsv0N4,1:-1E14),pidchunk),pidoffset)=1
	Set bsv0N5=$listget(bsv0N1,6)
	Set $bit(^BaRe.BSqw.6($s(bsv0N5'="":bsv0N5,1:-1E14),pidchunk),pidoffset)=1
	Set bsv0N6=$listget(bsv0N1,17)
	Set bsv0N7=$s(bsv0N6'="":bsv0N6,1:-1E14)
	Set ^BaRe.BSqw.7(bsv0N7,id)=$listget(bsv0N1,1)
	Set $bit(^BaRe.BSqw.8($zu(28,$listget(bsv0N1,14),7,32768),pidchunk),pidoffset)=1
	g BSLoop
BSLoopDun
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit 1
CatchError	Set $ZTrap=""
	If $ZE'="" {
		Set sc = $$Error^%apiOBJ(5002,$ZE)
	}
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit sc }
%SerializeObject(serial,partial=0) methodimpl {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%AccountHolder'="" { Set:'$data(%objTX(0,+r%AccountHolder)) %objTX(0,+r%AccountHolder)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%AccountHolder))=r%AccountHolder,%objTX(1,%objTX(0,+r%AccountHolder),1)=..AccountHolderGetObject(1),%objTX(1,%objTX(0,+r%AccountHolder),6)=1 Set M%AccountHolder=1,i%AccountHolder=$listget(%objTX(1,%objTX(0,+r%AccountHolder),1)) }
		If r%Branch'="" { Set:'$data(%objTX(0,+r%Branch)) %objTX(0,+r%Branch)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Branch))=r%Branch,%objTX(1,%objTX(0,+r%Branch),1)=..BranchGetObject(1),%objTX(1,%objTX(0,+r%Branch),6)=1 Set M%Branch=1,i%Branch=$listget(%objTX(1,%objTX(0,+r%Branch),1)) }
		If i%Branch="" Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5659,$classname()_"::"_"Branch"))
		If r%Payment'="" { Set:'$data(%objTX(0,+r%Payment)) %objTX(0,+r%Payment)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Payment))=r%Payment,%objTX(1,%objTX(0,+r%Payment),1)=..PaymentGetObject(1),%objTX(1,%objTX(0,+r%Payment),6)=1 Set M%Payment=1,i%Payment=$listget(%objTX(1,%objTX(0,+r%Payment),1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) methodimpl {
	Set sc=1,intOref=+$this
	If $data(%objTX(0,intOref),index) {
		If 'refresh RETURN 1
		Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	}
	Set:'$d(index) (index,%objTX(0,intOref))=$i(%objTX(1)),%objTX(1,index)=$this Set %objTX(1,index,1)=i%"%%OID",%objTX(1,index,6)=1 If (i%"%%OID" '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,index)=$lb(intOref,1) }
	Set Poref=r%AccountHolder If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%Branch If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%Payment If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0) methodimpl
	if $select(idxlist="":1,$listfind(idxlist,"AccountHolderIndex"):1,1:0) If $SortBegin(^BaRe.BSqw.3)
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"PaymentIndex"):1,1:0) If $SortBegin(^BaRe.BSqw.7)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) methodimpl {
	if $select(idxlist="":1,$listfind(idxlist,"AccountHolderIndex"):1,1:0) If $SortEnd(^BaRe.BSqw.3,commit)
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"PaymentIndex"):1,1:0) If $SortEnd(^BaRe.BSqw.7,commit)
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -^BaRe.BSqw.1
			 Quit 1
		}
		Lock -^BaRe.BSqw.1#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^BaRe.BSqw.1#"S"
		Quit 1
	}
	Lock -^BaRe.BSqw.1#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -(^BaRe.BSqw.1(id)#"E")
			Quit 1
		}
		Lock -(^BaRe.BSqw.1(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^BaRe.BSqw.1(id)#"SE")
		Quit 1
	}
	Lock -(^BaRe.BSqw.1(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors) methodimpl
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.CurrencyOrder).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.CurrencyOrder).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.CurrencyOrder).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.CurrencyOrder).%ValidateIndices()","multiProcess","'0' or '1'") }
	if $case(verbose,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.CurrencyOrder).%ValidateIndices()","verbose","'0' or '1'") }
	new mapList QUIT $$ValidateIndices^%SYS.SECURITY("FCE.CurrencyOrder",idxList,autoCorrect,lockOption,multiProcess,,verbose,.errors)
%ValidateObject(unused=0,checkserial=1) methodimpl {
	set sc=1
	If r%Branch="",i%Branch="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Branch("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If '$system.CLS.GetModified() Quit sc
	If m%ATM Set iv=..ATM If iv'="" Set rc=(..ATMIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ATM",iv)
	If m%AmountIn Set iv=..AmountIn If iv'="" Set rc=(..AmountInIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"AmountIn",iv)
	If m%AmountOut Set iv=..AmountOut If iv'="" Set rc=(..AmountOutIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"AmountOut",iv)
	If m%CurrencyIn Set iv=..CurrencyIn If iv'="" Set rc=(..CurrencyInIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"CurrencyIn",iv)
	If m%CurrencyOut Set iv=..CurrencyOut If iv'="" Set rc=(..CurrencyOutIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"CurrencyOut",iv)
	If m%DateStamp Set iv=..DateStamp If iv'="" Set rc=(..DateStampIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DateStamp",iv)
	If m%ExchangeRate Set iv=..ExchangeRate If iv'="" Set rc=(..ExchangeRateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ExchangeRate",iv)
	If m%Fee Set iv=..Fee If iv'="" Set rc=(..FeeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Fee",iv)
	If m%Requestor Set iv=..Requestor If iv'="" Set rc=(..RequestorIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Requestor",iv)
	If m%RequestorEmail Set iv=..RequestorEmail If iv'="" Set rc=(..RequestorEmailIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"RequestorEmail",iv)
	If m%Satisfaction Set iv=..Satisfaction If iv'="" Set rc=(..SatisfactionIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Satisfaction",iv)
	If m%Status Set iv=..Status If iv'="" Set rc=(..StatusIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Status",iv)
	If m%TimeStamp Set iv=..TimeStamp If iv'="" Set rc=(..TimeStampIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"TimeStamp",iv)
	Quit sc }
OnPopulate() methodimpl {
	// link this order to one of its Branch's ATMs (if the Branch has any)
	// otherwise, this CurrencyOrder happened at the Branch itself (no ATM)
	set ATMs = ..Branch.ATMs
	set count = ATMs.Count()
	if (count > 0) {
		set rand = $random(count) + 1
		set serialNumber = ATMs.GetAt(rand)
		set ..ATM = serialNumber
	}
	else {
		set ..ATM = ""
	}
	// 70% of CurrencyOrders are Status = Completed
	if ($random(10) > 2) {
		set ..Status = "Completed"
	}
	else {
		set ..Status = ##class(%Library.PopulateUtils).ValueList("-Requested-Pending-Rejected-Paid-Problem-Canceled")
	}
	// make sure CurrencyIn and CurrencyOut are different
	while (..CurrencyIn = ..CurrencyOut) {
		set ..CurrencyOut = ##class(FCE.Tests.Utilities).Currency()
	}
	// set fee
	set ..Fee = ..AmountIn * ..#FEERATE
	// get exchange rate
	set rate = ##class(FCE.Currency).ComputeRate(..CurrencyIn, ..CurrencyOut)
	set ..ExchangeRate = rate
	// set correct AmountOut
	set ..AmountOut = (..AmountIn - ..Fee) * rate
	// assign a random payment to this CurrencyOrder
	set rand = $random(3), payment = 1
	if (rand = 0) { do ##class(FCE.Cash).Populate(1,,, .payment) }
	elseif (rand = 1) { do ##class(FCE.CreditCard).Populate(1,,, .payment)}
	elseif (rand = 2) { do ##class(FCE.AccountPayment).Populate(1,,, .payment)}
	set ..Payment = payment(1)
	// only CurrencyOrders with AccountPayments have an AccountHolder
	if (rand '= 2) { set ..AccountHolder = "" }
	return 1 }
OrdersByCity(orderStatus="Pending") [ SQLCODE,orderStatus ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	// check for SELECT privileges on FCE.CurrencyOrder and -> referenced tables
	if '$system.SQL.Security.CheckPrivilege($username, 1, "FCE.CurrencyOrder", "s") ||
	   '$system.SQL.Security.CheckPrivilege($username, 1, "FCE.Branch", "s") ||
	   '$system.SQL.Security.CheckPrivilege($username, 1, "FCE.RealEstate", "s") {
		set message = "User " _ $username _ " is not privileged for the operation"
		set status = $$Error^%apiOBJ(5540, -99, message)
		return status
	}
	 ;---&sql(DECLARE bycity CURSOR FOR
 	 ;---		 SELECT Branch->Address->City, AmountIn, CurrencyIn, AmountOut, CurrencyOut,
 	 ;---				DateStamp, TimeStamp
 	 ;---		 FROM FCE.CurrencyOrder
 	 ;---		 WHERE Status = :orderStatus
 	 ;---		 ORDER BY Branch->Address->City)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, orderStatus
	 
	 ;---&sql(OPEN bycity)
	if $g(%bycity0281)'="" { s SQLCODE=-101 } else { try { s %bycity0281="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EPskKR5flWQD7zTNLs9gphyQLEi",%bycity0281=$classmethod(%bycity0281,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%bycity0281)),$ze'["<ZSQLU>" { throw } } if '$isobject(%bycity0281) { s %bycity0281=$$%0dsqlF() } }
	quit:(SQLCODE '= 0) // error -101 if cursor already open
	write !, orderStatus, " Orders"
	write !, "City", ?20, "Amount In", ?30, "Currency In", ?55, "Amount Out", ?70,
			 "Currency Out", ?95, "Date Stamp", ?110, "Time Stamp"
	for {
		 ;---&sql(FETCH bycity INTO :city, :amountIn, :currencyIn, :amountOut,
 		 ;---							   :currencyOut, :dateStamp, :timeStamp)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%bycity0281))'=1 { s SQLCODE=-102 } else { do %bycity0281.FET() i SQLCODE=0 { s city=%bycity0281.sqlcol1,amountIn=%bycity0281.sqlcol2,currencyIn=%bycity0281.sqlcol3,amountOut=%bycity0281.sqlcol4,currencyOut=%bycity0281.sqlcol5,dateStamp=%bycity0281.sqlcol6,timeStamp=%bycity0281.sqlcol7 } }
		quit:(SQLCODE '= 0)
		write !, city, ?20, amountIn, ?30, currencyIn, ?55, amountOut, ?70,
				 currencyOut, ?95, dateStamp, ?110, timeStamp
	}
	if SQLCODE = 100 {
		write !!, %ROWCOUNT, " row(s) returned."
		set status = 1
	}
	else { set status = $$Error^%apiOBJ(5001, "SQLCODE: " _ SQLCODE _ " " _ %msg) }
	 ;---&sql(CLOSE bycity)
	if '$isobject($get(%bycity0281)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %bycity0281 }
	quit:(SQLCODE '= 0) // error -102 if cursor not open
    return status }
 q
%0dsqlF()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE bycity CURSOR FOR SELECT Branch -> Address -> City , AmountIn , CurrencyIn , AmountOut , CurrencyOut , DateStamp , TimeStamp "
	s %xxsql("S",2)="INTO  :i%sqlcol1, :i%sqlcol2, :i%sqlcol3, :i%sqlcol4, :i%sqlcol5, :i%sqlcol6, :i%sqlcol7"
	s %xxsql("S",3)="FROM FCE . CurrencyOrder WHERE Status = :orderStatus ORDER BY Branch -> Address -> City"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","FCE",0,"",),",7,bycity,","FCE.CurrencyOrder.CLS",1)
	q %xxoref
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0) methodimpl
	New errcnt,i,id,keepobjects,obj,rss1,rss2,rss3,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	Kill ^||%Populate
	d ##class(%Library.PopulateUtils).BuildReferenceSample("FCE.AccountHolder",.rss1)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("FCE.Branch",.rss2)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("FCE.Payment",.rss3)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(FCE.CurrencyOrder).%New()
	. Set obj.ATM=##class(%Library.PopulateUtils).String(5)_##class(%Library.PopulateUtils).String(5)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(FCE.AccountHolder).%ExistsId(id) Do obj.AccountHolderSetObjectId(id)
	. Set obj.AmountIn=##class(%Library.PopulateUtils).Float(0,,2)
	. Set obj.AmountOut=##class(%Library.PopulateUtils).Float(0,,2)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss2) If id'="",##class(FCE.Branch).%ExistsId(id) Do obj.BranchSetObjectId(id)
	. Set obj.CurrencyIn=##class(%Library.PopulateUtils).ValueList("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")
	. Set obj.CurrencyOut=##class(%Library.PopulateUtils).ValueList("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")
	. Set obj.DateStamp=##class(%Library.PopulateUtils).Date(59901,+$system.SYS.TimeStamp())
	. Set obj.ExchangeRate=##class(%Library.PopulateUtils).Float(0,,3)
	. Set obj.Fee=##class(%Library.PopulateUtils).Float(,,2)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss3) If id'="",##class(FCE.Payment).%ExistsId(id) Do obj.PaymentSetObjectId(id)
	. Set obj.Requestor=##class(%Library.PopulateUtils).Name()
	. Set obj.RequestorEmail=##class(%Library.PopulateUtils).String(50)
	. Set obj.Satisfaction=##class(%Library.PopulateUtils).ValueList("-1-2-3-4-5")
	. Set obj.Status=##class(%Library.PopulateUtils).ValueList("-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled")
	. Set obj.TimeStamp=##class(%Library.PopulateUtils).Integer(0,86399)
	. s save=obj.OnPopulate() i ('save) Do:verbose DisplayError^%apiOBJ(save) s obj="" q
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	Kill ^||%Populate
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("FCE.CurrencyOrder",1,verbose,.%msg,1)
	Quit saved
zXMLDTD(top,format,input,dtdlist) methodimpl
 Quit ##class(%XML.Implementation).XMLDTD("FCE.CurrencyOrder",.top,.format,.input,.dtdlist)
zXMLExportInternal() methodimpl
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"FCE.CurrencyOrder")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"FCE.CurrencyOrder")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="FCE.CurrencyOrder"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="CurrencyOrder"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"CurrencyOrder"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"CurrencyOrder"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..ATM
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"ATM"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"ATM>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Requestor
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Requestor"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Requestor>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..RequestorEmail
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"RequestorEmail"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"RequestorEmail>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..AmountOut
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"AmountOut"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"AmountOut>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..CurrencyOut
 If val'="" {
   Set temp="",temp1=$parameter("FCE.CurrencyName","NAMESPACE")
   Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
   Set %xmlmsg=currentIndent_beginprefix_"CurrencyOut"_$select(xsitype:" "_xsiPrefix_"type="""_temp1_"CurrencyName"""_temp,1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"CurrencyOut>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..AmountIn
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"AmountIn"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"AmountIn>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..CurrencyIn
 If val'="" {
   Set temp="",temp1=$parameter("FCE.CurrencyName","NAMESPACE")
   Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
   Set %xmlmsg=currentIndent_beginprefix_"CurrencyIn"_$select(xsitype:" "_xsiPrefix_"type="""_temp1_"CurrencyName"""_temp,1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"CurrencyIn>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..ExchangeRate
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"ExchangeRate"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"ExchangeRate>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Fee
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Fee"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"Fee>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..DateStamp
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"DateStamp"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"date""",1:"")_">"_$select(val="":"",1:$zdate(val,3,,,,,59901))_endprefix_"DateStamp>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..TimeStamp
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"TimeStamp"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"time""",1:"")_">"_$select(val="":"",1:$ztime(val,1,$l($p(val,".",2)),,1)_"Z")_endprefix_"TimeStamp>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Satisfaction
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Satisfaction"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Satisfaction>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Status
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Status"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Status>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Payment
 If $IsObject(val) , deepFlag {
   Set id=""
   If encoded,'inlineFlag {
     Set temp=$select($parameter("FCE.Payment","XMLSUMMARY")'="":-1,1:1)
     Set id=+$get(idlist(temp*val))
     If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
   }
   If +id'=0 {
     Set %xmlmsg=currentIndent_beginprefix_"Payment "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   } Else { if id=0 Set id=$increment(idlist)
     Set topArg="Payment",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"FCE.Payment"),local=1,savexsiAttrs=xsiAttrs
     Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
   }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="FCE.CurrencyOrder" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes) methodimpl
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("FCE.CurrencyOrder",.imports,.classes)
zXMLImportAttributes() methodimpl
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal() methodimpl
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"FCE.CurrencyOrder")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="ATM" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..ATM=data
   Goto XMLLOOP } }
 If tag="Requestor" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Requestor=data
   Goto XMLLOOP } }
 If tag="RequestorEmail" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..RequestorEmail=data
   Goto XMLLOOP } }
 If tag="AmountOut" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$inumber(data,"LO","") Goto:data="" XMLImportErrchild Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,2,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..AmountOut=data
   Goto XMLLOOP } }
 If tag="CurrencyOut" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..CurrencyOut=data
   Goto XMLLOOP } }
 If tag="AmountIn" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$inumber(data,"LO","") Goto:data="" XMLImportErrchild Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,2,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..AmountIn=data
   Goto XMLLOOP } }
 If tag="CurrencyIn" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..CurrencyIn=data
   Goto XMLLOOP } }
 If tag="ExchangeRate" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$inumber(data,"LO","") Goto:data="" XMLImportErrchild Goto:('$select($isvalidnum(data,3,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..ExchangeRate=data
   Goto XMLLOOP } }
 If tag="Fee" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$inumber(data,"LO","") Goto:data="" XMLImportErrchild Goto:('$select($isvalidnum(data,2,,):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Fee=data
   Goto XMLLOOP } }
 If tag="DateStamp" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..DateStampXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$s($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,0,59901,+$system.SYS.TimeStamp()):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<59901:$$Error^%apiOBJ(7204,data,59901),1:$$Error^%apiOBJ(7203,data,+$system.SYS.TimeStamp()))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..DateStamp=data
   Goto XMLLOOP } }
 If tag="TimeStamp" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..TimeStampXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,,0,86400)&&(data<86400):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<0:$$Error^%apiOBJ(7204,data,0),1:$$Error^%apiOBJ(7203,+data,86400))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..TimeStamp=data
   Goto XMLLOOP } }
 If tag="Satisfaction" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$select(data'["-"&&("-1-2-3-4-5-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-1-2-3-4-5"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Satisfaction=data
   Goto XMLLOOP } }
 If tag="Status" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'["-"&&("-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled-"[("-"_$select(data=$c(0):"",1:data)_"-")):1,1:$$Error^%apiOBJ(7205,data,"-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Status=data
   Goto XMLLOOP } }
 If tag="Payment" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="Payment") {
       Set class="FCE.Payment"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("FCE.Payment",85,"s",class))_$get(^oddXML("FCE.Payment","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..Payment=data
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull) methodimpl
 If ..ATM'="" Quit 0
 If ..Requestor'="" Quit 0
 If ..RequestorEmail'="" Quit 0
 If ..AmountOut'="" Quit 0
 If ..CurrencyOut'="" Quit 0
 If ..AmountIn'="" Quit 0
 If ..CurrencyIn'="" Quit 0
 If ..ExchangeRate'="" Quit 0
 If ..Fee'="" Quit 0
 If ..DateStamp'="" Quit 0
 If ..TimeStamp'="" Quit 0
 If ..Satisfaction'="" Quit 0
 If ..Status'="" Quit 0
 If $IsObject(..Payment) Quit 0
 Quit 1
zXMLNew(document,node,containerOref="") methodimpl
	Quit (##class(FCE.CurrencyOrder).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema) methodimpl
 Quit ##class(%XML.Implementation).XMLSchema("FCE.CurrencyOrder",top,format,namespacePrefix,input,refOnly,.schema)
ATMGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),2),1:"") }
AccountHolderGetObject(force=0) methodimpl {
	Quit $select(r%AccountHolder=""||(i%AccountHolder'=""):$select(i%AccountHolder="":"",1:$listbuild(i%AccountHolder_"")),(''..AccountHolder.%GetSwizzleObject(force,.oid)):oid,1:"") }
AccountHolderGetObjectId(force=0) methodimpl {
	Quit $listget(..AccountHolderGetObject(force)) }
AccountHolderGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),16),1:"") }
AccountHolderGetSwizzled(noswizzle=0) methodimpl {
	If r%AccountHolder'="" Quit r%AccountHolder
	If i%AccountHolder="" Quit ""
	Set oid=$select(i%AccountHolder="":"",1:$listbuild(i%AccountHolder_""))
	Set oref=##class("FCE.AccountHolder").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%AccountHolder=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.CurrencyOrdersRelate($this)
	Quit oref }
AccountHolderNewObject() methodimpl {
	Set newobject=##class("FCE.AccountHolder").%New() If newobject="" Quit ""
	Set ..AccountHolder=newobject
	Do ..AccountHolder.CurrencyOrdersRelate($this)
	Quit newobject }
AccountHolderOnDelete(id="",concurrency=-1) [ SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(select %ID into :id from FCE.CurrencyOrder where AccountHolder = :id)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ElMVjY8AwGpc3c6HKz5dgidfo5d","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ElMVjY8AwGpc3c6HKz5dgidfo5d"))||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"AccountHolder")) }
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE AccountHolder = :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
AccountHolderRClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
AccountHolderRExec(%qHandle,inverse) [ SQLCODE,inverse ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID FROM %NOPARALLEL FCE.CurrencyOrder where AccountHolder=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, inverse
	 
	 ;---&sql(OPEN Q2)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EOgqZpE2AGiyGiAziYc2qcAQIQh",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlK() } }
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_$s($get(%msg)="":"",1:" %msg="_%msg))
	Quit 1 }
AccountHolderRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,inverse ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,inverse 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q2 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%0dsqlK()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE Q2 CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL FCE . CurrencyOrder WHERE AccountHolder = :inverse"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),",1,Q2,","FCE.CurrencyOrder.CLS",1)
	q %xxoref
AccountHolderRelate(oref) methodimpl {
	If r%AccountHolder=oref Quit 1
	If i%AccountHolder'="",$listget(oref."%%OID")=i%AccountHolder Set modstate=$system.CLS.GetModifiedBits() Set r%AccountHolder=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%AccountHolder'="" Do ..AccountHolderUnRelate(r%AccountHolder)
	Set tmp=i%AccountHolder Kill i%AccountHolder,r%AccountHolder Set r%AccountHolder=oref,i%AccountHolder=tmp
	Quit 1 }
AccountHolderSet(newvalue) methodimpl {
	If newvalue="" {
		If r%AccountHolder="",i%AccountHolder="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%AccountHolder=newvalue Quit 1
		If r%AccountHolder="",i%AccountHolder'="",i%AccountHolder=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%AccountHolder=newvalue Do newvalue.CurrencyOrdersRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	If r%AccountHolder'="" Do r%AccountHolder.CurrencyOrdersUnRelate($this)
	Set r%AccountHolder=newvalue,i%AccountHolder=0,i%AccountHolder=""
	If newvalue'="" Do newvalue.CurrencyOrdersRelate($this)
	Quit 1 }
AccountHolderSetObject(newvalue) methodimpl {
	If r%AccountHolder="" Set i%AccountHolder=$listget(newvalue) Quit 1
	If newvalue'="",i%AccountHolder=$listget(newvalue) Quit 1
	Set sc=..AccountHolder.%GetSwizzleObject(0,.oid) Quit:('sc) sc
	If newvalue'="",$listget(oid)=$listget(newvalue) Quit 1
	Do ..AccountHolder.CurrencyOrdersUnRelate($this) Set r%AccountHolder="",i%AccountHolder=0,i%AccountHolder=$listget(newvalue) Quit 1 }
AccountHolderSetObjectId(newid) methodimpl {
	Quit ..AccountHolderSetObject($select(newid="":"",1:$listbuild(newid_""))) }
AccountHolderUnRelate(oref) methodimpl {
	If r%AccountHolder=oref Set r%AccountHolder="",i%AccountHolder=0,i%AccountHolder="" Quit 1
	If r%AccountHolder'="" Quit $$Error^%apiOBJ(5499)
	Set i%AccountHolder=0,i%AccountHolder=""
	Quit 1 }
AccountHolderUnSwizzle(force=0) methodimpl {
 Quit:r%AccountHolder="" 1
	Set sc=..AccountHolder.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%AccountHolder="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%AccountHolder=$listget(newvalue)
 Quit 1 }
AmountInDisplayToLogical(%val) methodimpl {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
AmountInGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),7),1:"") }
AmountInIsValid(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,2,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0)) }
AmountInLogicalToDisplay(%val) methodimpl {
	Quit $s(%val="":"",1:$fn(%val,"",2)) }
AmountInLogicalToJSON(%val) methodimpl {
	Quit $select($extract(%val)=".":"0"_%val,$extract(%val,1,2)="-.":"-0."_$extract(%val,3,*),1:%val) }
AmountInNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:$normalize($decimal(%val),2)) }
AmountInXSDToLogical(%val) methodimpl {
	Quit $inumber(%val,"LO","") }
AmountOutGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),5),1:"") }
BranchGetObject(force=0) methodimpl {
	Quit $select(r%Branch=""||(i%Branch'=""):$select(i%Branch="":"",1:$listbuild(i%Branch_"")),(''..Branch.%GetSwizzleObject(force,.oid)):oid,1:"") }
BranchGetObjectId(force=0) methodimpl {
	Quit $listget(..BranchGetObject(force)) }
BranchGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),15),1:"") }
BranchGetSwizzled(noswizzle=0) methodimpl {
	If r%Branch'="" Quit r%Branch
	If i%Branch="" Quit ""
	Set oid=$select(i%Branch="":"",1:$listbuild(i%Branch_""))
	Set oref=##class("FCE.Branch").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%Branch=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.OrdersRelate($this)
	Quit oref }
BranchNewObject() methodimpl {
	Set newobject=##class("FCE.Branch").%New() If newobject="" Quit ""
	Set ..Branch=newobject
	Do ..Branch.OrdersRelate($this)
	Quit newobject }
BranchOnDelete(id="",concurrency=-1) [ SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(select %ID into :id from FCE.CurrencyOrder where Branch = :id)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjVY7Cl617tmTRwBPrAVkbHiDAk","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjVY7Cl617tmTRwBPrAVkbHiDAk"))||($ze["<ZSQLU>") { d %0dsqlN } else { throw } }
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"Branch")) }
 q
%0dsqlN	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE Branch = :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
BranchRClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
BranchRExec(%qHandle,inverse) [ SQLCODE,inverse ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(DECLARE Q3 CURSOR FOR
 	 ;---		SELECT ID FROM %NOPARALLEL FCE.CurrencyOrder where Branch=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, inverse
	 
	 ;---&sql(OPEN Q3)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EZuJ89lMHDOoVGtVf5Xvc6KR1eA",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlP() } }
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_$s($get(%msg)="":"",1:" %msg="_%msg))
	Quit 1 }
BranchRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,inverse ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,inverse 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q3 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%0dsqlP()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE Q3 CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL FCE . CurrencyOrder WHERE Branch = :inverse"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),",1,Q3,","FCE.CurrencyOrder.CLS",1)
	q %xxoref
BranchRelate(oref) methodimpl {
	If r%Branch=oref Quit 1
	If i%Branch'="",$listget(oref."%%OID")=i%Branch Set modstate=$system.CLS.GetModifiedBits() Set r%Branch=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%Branch'="" Do ..BranchUnRelate(r%Branch)
	Set tmp=i%Branch Kill i%Branch,r%Branch Set r%Branch=oref,i%Branch=tmp
	Quit 1 }
BranchSet(newvalue) methodimpl {
	If newvalue="" {
		If r%Branch="",i%Branch="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%Branch=newvalue Quit 1
		If r%Branch="",i%Branch'="",i%Branch=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%Branch=newvalue Do newvalue.OrdersRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	If r%Branch'="" Do r%Branch.OrdersUnRelate($this)
	Set r%Branch=newvalue,i%Branch=0,i%Branch=""
	If newvalue'="" Do newvalue.OrdersRelate($this)
	Quit 1 }
BranchSetObject(newvalue) methodimpl {
	If r%Branch="" Set i%Branch=$listget(newvalue) Quit 1
	If newvalue'="",i%Branch=$listget(newvalue) Quit 1
	Set sc=..Branch.%GetSwizzleObject(0,.oid) Quit:('sc) sc
	If newvalue'="",$listget(oid)=$listget(newvalue) Quit 1
	Do ..Branch.OrdersUnRelate($this) Set r%Branch="",i%Branch=0,i%Branch=$listget(newvalue) Quit 1 }
BranchSetObjectId(newid) methodimpl {
	Quit ..BranchSetObject($select(newid="":"",1:$listbuild(newid_""))) }
BranchUnRelate(oref) methodimpl {
	If r%Branch=oref Set r%Branch="",i%Branch=0,i%Branch="" Quit 1
	If r%Branch'="" Quit $$Error^%apiOBJ(5499)
	Set i%Branch=0,i%Branch=""
	Quit 1 }
BranchUnSwizzle(force=0) methodimpl {
 Quit:r%Branch="" 1
	Set sc=..Branch.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%Branch="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%Branch=$listget(newvalue)
 Quit 1 }
CurrencyInDisplayToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
CurrencyInGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),8),1:"") }
CurrencyInIsValid(%val) methodimpl {
	Quit $select(%val'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%val_"-")):1,1:$$Error^%apiOBJ(7205,%val,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")) }
CurrencyInLogicalToDisplay(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
CurrencyInLogicalToOdbc(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
CurrencyInOdbcToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
CurrencyOutGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),6),1:"") }
DateStampDisplayToLogical(%val) methodimpl {
 q:%val="" "" quit:$isvalidnum(%val,0,-672045,2980013) %val set %val=$zdateh(%val,,,,,,-672045,,"Error: '"_%val_"' is an invalid DISPLAY Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
DateStampGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),11),1:"") }
DateStampIsValid(%val) methodimpl {
	Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,59901,+$system.SYS.TimeStamp()):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<59901:$$Error^%apiOBJ(7204,%val,59901),1:$$Error^%apiOBJ(7203,%val,+$system.SYS.TimeStamp())) }
DateStampJSONToLogical(%val) methodimpl {
   Quit $select(%val="":"",1:$zdateh(%val,3,,,,,59901,+$system.SYS.TimeStamp(),"")) }
DateStampLogicalToDisplay(%val) methodimpl {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,-1,,4,,,-672045),1:$$FormatJulian^%qarfunc(%val,-1)) }
DateStampLogicalToJSON(%val) methodimpl {
   quit $select(%val="":"",1:$zdate(%val,3,,,,,59901)) }
DateStampLogicalToOdbc(%val="") methodimpl {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,3,,,,,-672045),1:$piece(%val," ",1)) }
DateStampLogicalToXSD(%val) methodimpl {
   quit $select(%val="":"",1:$zdate(%val,3,,,,,59901)) }
DateStampNormalize(%val) methodimpl {
   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1) }
DateStampOdbcToLogical(%val="") methodimpl {
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" quit:$isvalidnum(%val,0,-672045,2980013) %val set %val=$zdateh(%val,3,,,,,-672045,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
DateStampXSDToLogical(%val) methodimpl {
   Set len=$length(%val)
   If len'=10 {
       If $extract(%val,len)="Z" {
           Set %val=$extract(%val,1,len-1),len=len-1
       } ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
           Set %val=$extract(%val,1,len-6),len=len-6
       }
   }
   If $extract(%val,11,19)="T00:00:00" {
       If (len=19)||(($extract(%val,20,21)=".0")&&($translate($extract(%val,22,len),"0","")="")) {
           Set %val=$extract(%val,1,10)
       }
   }
   Quit $select(%val="":"",1:$zdateh(%val,3,,,,,59901,+$system.SYS.TimeStamp(),"")) }
ExchangeRateDisplayToLogical(%val) methodimpl {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
ExchangeRateGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),9),1:"") }
ExchangeRateIsValid(%val) methodimpl {
	Quit $select($isvalidnum(%val,3,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0)) }
ExchangeRateLogicalToDisplay(%val) methodimpl {
	Quit $s(%val="":"",1:$fn(%val,"",3)) }
ExchangeRateLogicalToJSON(%val) methodimpl {
	Quit $select($extract(%val)=".":"0"_%val,$extract(%val,1,2)="-.":"-0."_$extract(%val,3,*),1:%val) }
ExchangeRateNormalize(%val) methodimpl {
	Quit $normalize($decimal(%val),3) }
ExchangeRateXSDToLogical(%val) methodimpl {
	Quit $inumber(%val,"LO","") }
FeeDisplayToLogical(%val) methodimpl {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
FeeGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),10),1:"") }
FeeIsValid(%val) methodimpl {
	Quit $select($isvalidnum(%val,2,,):1,1:$$Error^%apiOBJ(7207,%val)) }
FeeLogicalToDisplay(%val) methodimpl {
	Quit $s(%val="":"",1:$fn(%val,"",2)) }
FeeLogicalToJSON(%val) methodimpl {
	Quit $select($extract(%val)=".":"0"_%val,$extract(%val,1,2)="-.":"-0."_$extract(%val,3,*),1:%val) }
FeeNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:$normalize($decimal(%val),2)) }
FeeXSDToLogical(%val) methodimpl {
	Quit $inumber(%val,"LO","") }
PaymentGetObject(force=0) methodimpl {
	Quit $select(r%Payment=""||(i%Payment'=""):$select(i%Payment="":"",1:$listbuild(i%Payment_"")),(''..Payment.%GetSwizzleObject(force,.oid)):oid,1:"") }
PaymentGetObjectId(force=0) methodimpl {
	Quit $listget(..PaymentGetObject(force)) }
PaymentGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),17),1:"") }
PaymentGetSwizzled(noswizzle=0) methodimpl {
	If noswizzle Quit r%Payment
	If i%Payment="" Quit ""
	Set oref=##class(FCE.Payment).%Open($select(i%Payment="":"",1:$listbuild(i%Payment_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%Payment=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
PaymentNewObject() methodimpl {
	Set newobject=##class(FCE.Payment).%New() If newobject="" Quit ""
	Set ..Payment=newobject
	Quit newobject }
PaymentSetObject(newvalue) methodimpl {
	If newvalue'="",$data(i%Payment,tmp),tmp=$listget(newvalue) Quit 1
	Set i%Payment=$listget(newvalue),r%Payment=0,r%Payment=""
	Quit 1 }
PaymentSetObjectId(newid) methodimpl {
	Quit ..PaymentSetObject($select(newid="":"",1:$listbuild(newid_""))) }
PaymentUnSwizzle(force=0) methodimpl {
	If r%Payment="" Quit 1
	Set sc=..Payment.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%Payment="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%Payment=$listget(newvalue)
	Quit 1 }
RequestorGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),3),1:"") }
RequestorEmailGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),4),1:"") }
SatisfactionDisplayToLogical(%val) methodimpl {
	RETURN $case(%val,"Great":1,"Good":2,"OK":3,"Bad":4,"Horrible":5,:%val) }
SatisfactionGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),13),1:"") }
SatisfactionIsValid(%val) methodimpl {
	Quit $select(%val'["-"&&("-1-2-3-4-5-"[("-"_%val_"-")):1,1:$$Error^%apiOBJ(7205,%val,"-1-2-3-4-5")) }
SatisfactionLogicalToDisplay(%val) methodimpl {
	RETURN $case(%val,1:"Great",2:"Good",3:"OK",4:"Bad",5:"Horrible",:%val) }
SatisfactionLogicalToOdbc(%val) methodimpl {
	RETURN $case(%val,1:"Great",2:"Good",3:"OK",4:"Bad",5:"Horrible",:%val) }
SatisfactionOdbcToLogical(%val) methodimpl {
	RETURN $case(%val,"Great":1,"Good":2,"OK":3,"Bad":4,"Horrible":5,:%val) }
StatusGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),14),1:"") }
StatusIsValid(%val) methodimpl {
	Q $s(%val'["-"&&("-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled-"[("-"_$select(%val=$c(0):"",1:%val)_"-")):1,1:$$Error^%apiOBJ(7205,%val,"-Requested-Pending-Rejected-Paid-Completed-Problem-Canceled")) }
TimeStampDisplayToLogical(%val) methodimpl {
 quit:%val="" "" s %val=$ztimeh(%val,,"Error: '"_%val_"' is an invalid DISPLAY Time value") q:%val||(%val=0) %val s %msg=%val ZTRAP "OTIM" }
TimeStampGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^BaRe.BSqw.1(id)),12),1:"") }
TimeStampIsValid(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,0,86400)&&(%val<86400):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<0:$$Error^%apiOBJ(7204,%val,0),1:$$Error^%apiOBJ(7203,+%val,86400)) }
TimeStampLogicalToDisplay(%val) methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,,$l($p(%val,".",2)))) }
TimeStampLogicalToOdbc(%val="") methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,,$l($p(%val,".",2)),,1)) }
TimeStampLogicalToXSD(%val) methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,1,$l($p(%val,".",2)),,1)_"Z") }
TimeStampNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:+%val) }
TimeStampOdbcToLogical(%val="") methodimpl {
	quit:%val=""||($zu(115,13)&&(%val=$c(0))) ""  quit:$isvalidnum(%val) %val s %val=$ztimeh(%val,,"Error: '"_%val_"' is an invalid ODBC/JDBC Time value",1) q:%val||(%val=0) %val s %msg=%val ZTRAP "OTIM" }
TimeStampXSDToLogical(%val) methodimpl {
 If $get(%val)="" Quit ""
 If $length(%val,"T")=2 Set %val=$piece(%val,"T",2)
 Set len=$length(%val)
 If $extract(%val,len)="Z" {
   Set %val=$extract(%val,1,len-1)
 } ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
   If $extract(%val,len-2)'=":" Quit ""
   Set s=$ztimeh($extract(%val,1,len-6),1,"",1) If s="" Quit ""
   Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
   If $extract(%val,len-5)="-" {
     Set s=s+z
   } Else {
     Set s=s-z
   }
   Quit s#86400
 }
 Quit $ztimeh(%val,1,"",1) }
ExtentClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentExecute(%qHandle) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM %NOPARALLEL FCE.CurrencyOrder)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EtwLl64IPuMo4nG6QVs4EQmiDlL",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlS() } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_" %msg = "_$g(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
ExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
ExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport(row,60)
	}
	RETURN }
 q
%0dsqlS()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL FCE . CurrencyOrder"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),",1,QExtent,","FCE.CurrencyOrder.CLS",1)
	q %xxoref
ExtentFunc() methodimpl {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM %NOPARALLEL FCE . CurrencyOrder /*#OPTIONS {""DynamicSQL"":1} */")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
ExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) methodimpl {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) methodimpl
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","CurrencyOrder","FCE","",$c(0,0,0,0,0,0,0,0,0,0,0,1,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1
AccountHolderCheck(id="",lockonly=0) methodimpl {
	Quit ##class(FCE.AccountHolder).%1Check(id,lockonly)
}
AccountHolderDelete(id="",concurrency=-1) methodimpl {
	quit ..AccountHolderOnDelete(.id,.concurrency) }
zAccountHolderSQLFKeyExists(%p...) methodimpl
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT AccountHolder
 	 ;---	     FROM   FCE.CurrencyOrder
 	 ;---	     WHERE  AccountHolder=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %p, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EiJg6OIMng9eysG06hM73jjlrxy","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EiJg6OIMng9eysG06hM73jjlrxy"))||($ze["<ZSQLU>") { d %0dsqlW } else { throw } }
	QUIT SQLCODE=0
 q
%0dsqlW	n %xxsql
	s %xxsql("S",1)="SELECT AccountHolder FROM FCE . CurrencyOrder WHERE AccountHolder = :%p(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return
zAccountHolderSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...) methodimpl
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..AccountHolderSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"FCE"_"."_"CurrencyOrder",k,"AccountHolder","'AccountHolder'") QUIT rx
BranchCheck(id="",lockonly=0) methodimpl {
	Quit ##class(FCE.Branch).%1Check(id,lockonly)
}
BranchDelete(id="",concurrency=-1) methodimpl {
	quit ..BranchOnDelete(.id,.concurrency) }
zBranchSQLFKeyExists(%p...) methodimpl
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT Branch
 	 ;---	     FROM   FCE.CurrencyOrder
 	 ;---	     WHERE  Branch=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %p, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8jGfmJ4ewLrKtYJGCsgi4MXGdI","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8jGfmJ4ewLrKtYJGCsgi4MXGdI"))||($ze["<ZSQLU>") { d %0dsqlY } else { throw } }
	QUIT SQLCODE=0
 q
%0dsqlY	n %xxsql
	s %xxsql("S",1)="SELECT Branch FROM FCE . CurrencyOrder WHERE Branch = :%p(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return
zBranchSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...) methodimpl
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..BranchSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"FCE"_"."_"CurrencyOrder",k,"Branch","'Branch'") QUIT rx
PaymentFKCheck(kp1,lockonly=0) methodimpl {
	Quit ##class(FCE.Payment).%1Check(kp1,lockonly)
}
PaymentFKDelete(kp1) [ SQLCODE,id,kp1 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,id 
	 ;---&sql(select %ID into :id from FCE.CurrencyOrder where Payment = :kp1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, kp1
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ETgA7LiS451XCXvyVsRUE9rgnC1","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ETgA7LiS451XCXvyVsRUE9rgnC1"))||($ze["<ZSQLU>") { d %0dsql0 } else { throw } }
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5831,"FCE.CurrencyOrder","FCE.Payment","DELETE","%%IDKEY")) }
 q
%0dsql0	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE Payment = :kp1"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
zPaymentFKSQLFKeyExists(%p...) methodimpl
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT Payment
 	 ;---	     FROM   FCE.CurrencyOrder
 	 ;---	     WHERE  Payment=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %p, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EmskmY8IgGr93Ydihq4miWTe9NM","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EmskmY8IgGr93Ydihq4miWTe9NM"))||($ze["<ZSQLU>") { d %0dsql2 } else { throw } }
	QUIT SQLCODE=0
 q
%0dsql2	n %xxsql
	s %xxsql("S",1)="SELECT Payment FROM FCE . CurrencyOrder WHERE Payment = :%p(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return
zPaymentFKSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...) methodimpl
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..PaymentFKSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"FCE"_"."_"CurrencyOrder",k,"PaymentFK","'Payment'") QUIT rx
PaymentFKUpdate(kp1,nkp1) [ SQLCODE,id,kp1 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,id 
	 ;---&sql(select %ID into :id from FCE.CurrencyOrder where Payment = :kp1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, kp1
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ETgA7LiS451XCXvyVsRUE9rgnC1","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ETgA7LiS451XCXvyVsRUE9rgnC1"))||($ze["<ZSQLU>") { d %0dsql4 } else { throw } }
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5831,"FCE.CurrencyOrder","FCE.Payment","UPDATE","%%IDKEY")) }
 q
%0dsql4	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE Payment = :kp1"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
PaymentIndexCheckUnique(id="",pValue...) [ SQLCODE,id,pValue ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	if $Get(pValue(1))'="" {
		 ;---&sql(SELECT 1 as _PassFail FROM FCE.CurrencyOrder WHERE Payment = :pValue(1) AND %ID <> :id)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, pValue
		try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpOtwTef4S9GaDh3ebWVXLMFB31","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpOtwTef4S9GaDh3ebWVXLMFB31"))||($ze["<ZSQLU>") { d %0dsql6 } else { throw } }
		Quit SQLCODE=100
	} else { quit 1 } }
 q
%0dsql6	n %xxsql
	s %xxsql("S",1)="SELECT 1 AS _PassFail FROM FCE . CurrencyOrder WHERE Payment = :pValue(1) AND %ID <> :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return
AccountHolderIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.CurrencyOrder WHERE (:K1 is not null and AccountHolder = :K1) OR (:K1 IS NULL AND AccountHolder IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Eh6LXfkotqU3UDlKnSi0JCmAjiS","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Eh6LXfkotqU3UDlKnSi0JCmAjiS"))||($ze["<ZSQLU>") { d %0dsql8 } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsql8	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE ( :K1 IS NOT NULL AND AccountHolder = :K1 ) OR ( :K1 IS NULL AND AccountHolder IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
IDKEYCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
IDKEYDelete(K1,concurrency=-1) methodimpl {
	Quit ..%DeleteId(.K1,concurrency) }
IDKEYExists(K1,id="") methodimpl {
	s id=K1 q ..%ExistsId(K1) }
IDKEYOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"CurrencyOrder"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^BaRe.BSqw.1(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
PaymentIndexCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s exists=..PaymentIndexExists(K1,.id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"PaymentIndex",K1),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..PaymentIndexExists(K1,.idcheck) d:concurrency ..%UnlockId(id,1,0) quit $s(('exists)||(id'=idcheck):$$Error^%apiOBJ(5797,$classname(),"PaymentIndex",K1),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
PaymentIndexDelete(K1,concurrency=-1) methodimpl {
	i ..PaymentIndexExists(K1,.id){ s sc=..%DeleteId(id,concurrency) } Else { s sc=$$Error^%apiOBJ(5771,"PaymentIndex",K1) }
	QUIT sc }
PaymentIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.CurrencyOrder WHERE (:K1 is not null and Payment = :K1) OR (:K1 IS NULL AND Payment IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4TBdXbKnA4gtHovgRAkRzYFPhx","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4TBdXbKnA4gtHovgRAkRzYFPhx"))||($ze["<ZSQLU>") { d %0dsqla } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqla	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE ( :K1 IS NOT NULL AND Payment = :K1 ) OR ( :K1 IS NULL AND Payment IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
PaymentIndexOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
 i ..PaymentIndexExists(K1,.id){ s return=..%OpenId(id,concurrency,.sc) } Else { s sc=$$Error^%apiOBJ(5770,"PaymentIndex",K1),return="" }
 QUIT return }
zPaymentIndexSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::PaymentIndexSQLCheckUnique")
zPaymentIndexSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key PaymentIndex.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=..PaymentIndexSQLFindRowIDByConstraint($lb(%pVal(1)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"CurrencyOrder"_":"_"PaymentIndex") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^BaRe.BSqw.7(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zPaymentIndexSQLFindPKeyByConst(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::PaymentIndexSQLFindPKeyByConstraint")
zPaymentIndexSQLFindRowIDByCons(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key PaymentIndex value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(12)=$lg(%con,1)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM FCE.CurrencyOrder WHERE Payment = :%d(12))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E9x9pIuwnmbgtJYgO2qezHwOTns","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E9x9pIuwnmbgtJYgO2qezHwOTns"))||($ze["<ZSQLU>") { d %0dsqlc } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlc	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . CurrencyOrder WHERE Payment = :%d(12)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
zDeletePaymentExecute(%oper=0,pNew,pOld,pChanged,%ok,%msg) methodimpl
	return:(pNew(12) = "")
    new SQLCODE // ensure SQLCODE is private to trigger
     ;---&sql(DELETE FROM FCE.Payment WHERE ID = :pNew(12))
      ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, pNew
    try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EEgQ0u8S7JMqXOsH7IUbeT5i6rn","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EEgQ0u8S7JMqXOsH7IUbeT5i6rn"))||($ze["<ZSQLU>") { d %0dsqle } else { throw } }
	if (SQLCODE < 0) { set %ok = 0, %msg = "SQLCODE: "_ SQLCODE }
	QUIT
 q
%0dsqle	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Payment WHERE ID = :pNew(12)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.CurrencyOrder.CLS")
	return
zUpdateDeleteInNotesExecute(%oper=0,pNew,pOld,pChanged,%ok,%msg) methodimpl
	new action, note, auditNote, branch, st // ensure variables are private to trigger
	set action = $case($g(%oper), "DELETE":"deleted", "UPDATE":"updated")
	set note = "At " _ $zdt($h) _ ", " _ $username _ " " _ action _ " Order #"
			   _ pNew(1) _ " originally requested by " _ pNew(13)
	           _ " (for " _ pNew(5) _ " " _ pNew(8) _ ")"
	set auditNote = "Order #" _ pNew(1) _ " " _ action
	set branch = ##class(FCE.Branch).%OpenId(pNew(6), 4, .st)
	if (''st) {
		do branch.Notes.MoveToEnd()
		do branch.Notes.WriteLine(note)
		set st = branch.%Save()
	}
	if (('st)) { set %msg = "Couldn't update branch notes." }
	do $system.Security.Audit("Application", "FCE.CurrencyOrder", "Change", auditNote , "UpdateDelete")
	QUIT
%sqllistUCQ(t) public	{
	s t("%0dsql0")="",t("%0dsql2")="",t("%0dsql4")="",t("%0dsql6")="",t("%0dsql8")="",t("%0dsqlA")="",t("%0dsqlC")="",t("%0dsqlF")=""
	s t("%0dsqlI")="",t("%0dsqlK")="",t("%0dsqlN")="",t("%0dsqlP")="",t("%0dsqlS")="",t("%0dsqlW")="",t("%0dsqlY")="",t("%0dsqla")=""
	s t("%0dsqlc")="",t("%0dsqle")=""
}