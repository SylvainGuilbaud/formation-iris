ROUTINE FCE.BranchCurrencyBalances.1 [Type=INT,Generated]
 ;FCE.BranchCurrencyBalances.1
 ;Generated for class FCE.BranchCurrencyBalances.  Do NOT edit. 08/14/2023 08:17:24AM
 ;;65514F62;FCE.BranchCurrencyBalances
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0) methodimpl
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),subs(7)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))),"FCE.BranchCurrencyBalances",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="") methodimpl
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^FCE.BranchD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"FCE"_"."_"Branch_Balance") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"FCE"_"."_"Branch_Balance") } QUIT 0
	Return
%SQLAfterTriggers() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
	RETURN ##class(FCE.Branch).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="") methodimpl
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.Branch_Balance'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.Branch_Balance'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.Branch_Balance' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.Branch_Balance' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2)
		set subs(7)=$p(%d(0),"||",1)
		if ((pIndices="")||($lf(pIndices,"CBIndex"))),'$listfind(pIgnoreIndexList,"CBIndex") {
			if pActions["P" {
				set sn(1)=%d(4) set sn(2)=subs(7) k ^FCE.BranchI("CBIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(4) set sn(2)=subs(7) set ^FCE.BranchI("CBIndex",sn(1),sn(2))=%d(2)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
	 ;---&sql(SELECT ID FROM FCE.Branch_Balance WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Egd35lPufQczA5WYrDkAWlvzqpZ","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Egd35lPufQczA5WYrDkAWlvzqpZ"))||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM FCE . Branch_Balance WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return
%SQLCheckUniqueIndices(pIndices,pOK) methodimpl
	new d,g,n,o set d=0
	set pOK=1 QUIT
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName() methodimpl
	if %oper="DELETE" {
		set:$d(%d(0)) %f("Branch")=%d(0) set:$d(%d(1)) %f("ID")=%d(1) set:$d(%d(4)) %f("element_key")=%d(4)
		QUIT
	}
	set:$d(%d(0)) %f("Branch")=%d(0) set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("x__classname")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("Balance")=%d(3) set:$d(%d(4)) %f("element_key")=%d(4)
	QUIT
%SQLCopyNameIntoIcol() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master) methodimpl
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0,%bufferedColumns=0) methodimpl
	// SQL DELETE method for table FCE.Branch_Balance
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),subs(7)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("FCE.BranchCurrencyBalances"))>$zu(156,50,1) { lock +^FCE.BranchD:$zu(115,4) lock:$t -^FCE.BranchD set %ls=$s($t:2,1:0) } else { lock +^FCE.BranchD(subs(7),"CurrencyBalances",%d(4)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"FCE"_"."_"Branch_Balance",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"FCE"_"."_"Branch_Balance",%rowid) do ..%SQLEExit() QUIT  }
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(4),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","FCE.BranchCurrencyBalances",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","FCE.BranchCurrencyBalances",%k,"f",%t)) quit:%t=""  set %st=(%t="FCE.BranchCurrencyBalances") set %fk="" for  set %fk=$o(^rINDEXEXT("F","FCE.BranchCurrencyBalances",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("FCE","Branch_Balance","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		set sn(1)=%d(4) set sn(2)=subs(7) k ^FCE.BranchI("CBIndex",sn(1),sn(2))
	}
	k ^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Branch_Balance",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Branch_Balance") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteBufferedColumns(%bufferedColumns) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLDeleteBufferedColumns")
%SQLDeleteChildren(%parent,%check,sqlcode) methodimpl
	// Delete all rows where Branch = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM FCE.Branch_Balance WHERE Branch = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EQXjAFmwXgzZgRlAQyGNA8o6lPh","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EQXjAFmwXgzZgRlAQyGNA8o6lPh"))||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM FCE . Branch_Balance WHERE Branch = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return
%SQLDeleteTempStreams() methodimpl
	// Delete all temporary streams
	QUIT
%SQLEExit() methodimpl
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Branch_Balance"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef) methodimpl
	if $tlevel,$i(%0CacheLock("FCE.BranchCurrencyBalances"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^FCE.BranchD#s:$zu(115,4) lock:$t -^FCE.BranchD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode) methodimpl
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname INTO :%e() FROM %IGNOREINDEX * FCE.Branch_Balance WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %e, %msg, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EzDiSk9bDtsOk47pEbV63szCjHy","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EzDiSk9bDtsOk47pEbV63szCjHy"))||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	 ;---&sql(SELECT x__classname INTO :%d(2) FROM %IGNOREINDEX * FCE.Branch WHERE %ID = :%d(0))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EegMcMpDZWLRD1ORgPJMEQ1QJYR","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EegMcMpDZWLRD1ORgPJMEQ1QJYR"))||($ze["<ZSQLU>") { d %0dsqlG } else { throw } }
	set sqlcode=SQLCODE
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%e() FROM %IGNOREINDEX * FCE . Branch_Balance WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%d(2) FROM %IGNOREINDEX * FCE . Branch WHERE %ID = :%d(0)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set %d(2)="" } catch {} }
	return
%SQLGetOldAll() methodimpl
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname,Balance INTO :%e() FROM %IGNOREINDEX * FCE.Branch_Balance WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %e, %msg, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E2JeangmL8edNBIqQWEaG2d5yy4","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E2JeangmL8edNBIqQWEaG2d5yy4"))||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	 ;---&sql(SELECT x__classname INTO :%d(2) FROM %IGNOREINDEX * FCE.Branch WHERE %ID = :%d(0))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EegMcMpDZWLRD1ORgPJMEQ1QJYR","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EegMcMpDZWLRD1ORgPJMEQ1QJYR"))||($ze["<ZSQLU>") { d %0dsqlK } else { throw } }
	set sqlcode=SQLCODE
	QUIT
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT x__classname , Balance INTO :%e() FROM %IGNOREINDEX * FCE . Branch_Balance WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return
%0dsqlK	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%d(2) FROM %IGNOREINDEX * FCE . Branch WHERE %ID = :%d(0)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set %d(2)="" } catch {} }
	return
%SQLGetOldIndex(%rowid,%e,pF=0,sqlcode,%buffervector=0,fld="") methodimpl
	// Get index old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname,Branch,element_key INTO :%d() FROM %IGNOREINDEX * FCE.Branch_Balance WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Es9Kny8SUlSKqBAPfhgvFuC0RNH","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Es9Kny8SUlSKqBAPfhgvFuC0RNH"))||($ze["<ZSQLU>") { d %0dsqlM } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	 ;---&sql(SELECT x__classname INTO :%d(2) FROM %IGNOREINDEX * FCE.Branch WHERE %ID = :%d(0))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EegMcMpDZWLRD1ORgPJMEQ1QJYR","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EegMcMpDZWLRD1ORgPJMEQ1QJYR"))||($ze["<ZSQLU>") { d %0dsqlO } else { throw } }
	set sqlcode=SQLCODE
	QUIT
 q
%0dsqlM	n %xxsql
	s %xxsql("S",1)="SELECT x__classname , Branch , element_key INTO :%d() FROM %IGNOREINDEX * FCE . Branch_Balance WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return
%0dsqlO	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%d(2) FROM %IGNOREINDEX * FCE . Branch WHERE %ID = :%d(0)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set %d(2)="" } catch {} }
	return
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0,%bufferedColumns=0) methodimpl
	// SQL INSERT method for table FCE.Branch_Balance
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(7)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(FCE.Branch).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"FCE"_"."_"Branch",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"FCE"_"."_"Branch_Balance") }
		do ..%SQLEExit() RETURN ""
	}
	do ..%SQLInsertComputes()
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("Branch") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(4))="" { do ..%SQLMissing("element_key") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set %d(1)=%d(0)_"||"_%d(4),subs(7)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
			new %unlockcon
				// Constraint IDKEY
				if '$a(%check,2) { lock +^FCE.BranchD("IDKEY",%d(0),%d(4)):$zu(115,4) if $t { set %unlockcon(13)=$name(^FCE.BranchD("IDKEY",%d(0),%d(4))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if $a(%check,7) { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(4)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
				if '..IDKEYSQLCheckUnique(0,,%d(0),%d(4)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Branch_Balance","IDKEY","Branch"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(4)))) quit  } // INSERT
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	set:'($d(%d(2))#2) %d(2)=""
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("FCE.BranchCurrencyBalances"))>$zu(156,50,1) { lock +^FCE.BranchD:$zu(115,4) lock:$t -^FCE.BranchD set %ls=$s($t:2,1:0) } else { lock +^FCE.BranchD(subs(7),"CurrencyBalances",%d(4)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"FCE"_"."_"Branch_Balance",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))=$g(%d(3))
	if '$a(%check,3) {
		set sn(1)=%d(4) set sn(2)=subs(7) set ^FCE.BranchI("CBIndex",sn(1),sn(2))=%d(2)
	}
	lock:$a(%l,2) -@(%unlockcon(13)_"#""D""") 
	lock:$a(%l) -^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Branch_Balance",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Branch_Balance") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertBufferedColumns(%bufferedColumns) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertBufferedColumns")
%SQLInsertComputes(view=0) methodimpl
	if 'view {
	set %d(2)="" do .."%%CLASSNAMESQLCompute"()
	}
	else {
	set %d(2)="" do .."%%CLASSNAMESQLCompute"()
	}
	QUIT
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) methodimpl {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) methodimpl {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"FCE"_"."_"Branch_Balance"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] methodimpl {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname) methodimpl
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"FCE"_"."_"Branch_Balance") quit
%SQLNormalizeCompFields() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields() methodimpl
	set:$g(%d(0))'="" %d(0)=$$NormalizeField0(%d(0))
	set:$g(%d(3))'="" %d(3)=$select($zu(115,13)&&(%d(3)=$c(0)):"",1:$normalize($decimal(%d(3)),2))
	QUIT
NormalizeField0(%val) {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:$decimal(%val)\1)
}
	Return
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="") methodimpl
	RETURN ##class(FCE.Branch).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0) methodimpl
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"FCE"_"."_"Branch_Balance",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(Branch),%INTERNAL(ID),x__classname,Balance,element_key INTO :d(0),:d(1),:d(2),:d(3),:d(4) FROM FCE.Branch_Balance WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E6PrNqdcDwHi7RzS7jexTtwg0Gc","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E6PrNqdcDwHi7RzS7jexTtwg0Gc"))||($ze["<ZSQLU>") { d %0dsqlQ } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(2)'="" { new sn set sn=$p(d(2),$e(d(2)),$l(d(2),$e(d(2)))-1) if "FCE.BranchCurrencyBalances"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("FCE.BranchCurrencyBalances",18),d=5,d=$zobjexport(d,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlQ	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( Branch ) , %INTERNAL ( ID ) , x__classname , Balance , element_key INTO :d(0) , :d(1) , :d(2) , :d(3) , :d(4) FROM FCE . Branch_Balance WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set d(0)="",d(1)="",d(2)="",d(3)="",d(4)="" } catch {} }
	return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="") methodimpl
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),subs(7)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))#s
	set:i&&($g(%0CacheLock("FCE.BranchCurrencyBalances"))) %0CacheLock("FCE.BranchCurrencyBalances")=%0CacheLock("FCE.BranchCurrencyBalances")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0) methodimpl
	set s=$e("S",s)_$e("D",i) lock -^FCE.BranchD#s QUIT 1
	Return
%SQLStorageValidation() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock() methodimpl
	lock:$a(%l) -^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))
	QUIT
%SQLUnlock2() methodimpl
	lock:$a(%l,2) -@(%unlockcon(13)_"#""D""") QUIT
%SQLUnlockError(cname) methodimpl
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"FCE"_"."_"Branch_Balance",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"FCE"_"."_"Branch_Balance",cname) } quit
	Return
%SQLUnlockRef() methodimpl
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid,%bufferedColumns=0,%bufferedColumnsDel=0) methodimpl
	// SQL UPDATE method for table FCE.Branch_Balance
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'$a(%check,7),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(4))&&($g(%d(4))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'Branch', or 'element_key'","FCE"_"."_"Branch_Balance") QUIT  }
	for icol=2:1:4 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(4)=$p(%d(1),"||",2),subs(7)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("FCE.BranchCurrencyBalances"))>$zu(156,50,1) { lock +^FCE.BranchD:$zu(115,4) lock:$t -^FCE.BranchD set %ls=$s($t:2,1:0) } else { lock +^FCE.BranchD(subs(7),"CurrencyBalances",%d(4)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"FCE"_"."_"Branch_Balance",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"Branch_Balance",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"Branch_Balance",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,3) ^FCE.BranchD(subs(7),"CurrencyBalances",%d(4))=$g(%d(3))
	if '$a(%check,3) { 
		if $a(%e,2) { 	// CBIndex index map
			set sn(1)=%d(4) set sn(2)=subs(7) set ^FCE.BranchI("CBIndex",sn(1),sn(2))=%d(2) }
	}
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Branch_Balance",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Branch_Balance") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0) methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) methodimpl {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode) methodimpl
	QUIT 'sqlcode
%SQLValidateFields(sqlcode) methodimpl
	if $g(%d(3))'="",'($select($zu(115,13)&&(%d(3)=$c(0)):1,$isvalidnum(%d(3),2,0,1000000):1,'$isvalidnum(%d(3)):$$Error^%apiOBJ(7207,%d(3)),%d(3)<0:$$Error^%apiOBJ(7204,%d(3),0),1:$$Error^%apiOBJ(7203,%d(3),1000000))) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	if $g(%d(4))'="",'(($l(%d(4))'>50)) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	QUIT 'sqlcode
%SQLicompView() methodimpl
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() methodimpl {
	set %n=$lb("ID","ID","x__classname","Balance","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors) methodimpl
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.BranchCurrencyBalances).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.BranchCurrencyBalances).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.BranchCurrencyBalances).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.BranchCurrencyBalances).%ValidateIndices()","multiProcess","'0' or '1'") }
	if $case(verbose,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.BranchCurrencyBalances).%ValidateIndices()","verbose","'0' or '1'") }
	new mapList QUIT $$ValidateIndices^%SYS.SECURITY("FCE.BranchCurrencyBalances",idxList,autoCorrect,lockOption,multiProcess,,verbose,.errors)
%CLASSNAMESQLCompute() methodimpl
	// Compute code for field x__classname
 s %d(2)=""
 QUIT
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
	 ;---&sql(SELECT Branch,element_key FROM FCE.Branch_Balance WHERE  Branch=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EggwCgDY3x38DG16JerjnMhrYVW","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EggwCgDY3x38DG16JerjnMhrYVW"))||($ze["<ZSQLU>") { d %0dsqlS } else { throw } } QUIT SQLCODE=100
 q
%0dsqlS	n %xxsql
	s %xxsql("S",1)="SELECT Branch , element_key FROM FCE . Branch_Balance WHERE Branch = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Branch_Balance"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(4)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Branch_Balance WHERE Branch = :%d(0) AND element_key = :%d(4))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E3rvJEYHCaOqKeg4ElkFNxj72x3","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E3rvJEYHCaOqKeg4ElkFNxj72x3"))||($ze["<ZSQLU>") { d %0dsqlU } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlU	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Branch_Balance WHERE Branch = :%d(0) AND element_key = :%d(4)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),,"FCE.BranchCurrencyBalances.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
%sqllistUCQ(t) public	{
	s t("%0dsqlA")="",t("%0dsqlC")="",t("%0dsqlE")="",t("%0dsqlG")="",t("%0dsqlI")="",t("%0dsqlK")="",t("%0dsqlM")="",t("%0dsqlO")=""
	s t("%0dsqlQ")="",t("%0dsqlS")="",t("%0dsqlU")=""
}