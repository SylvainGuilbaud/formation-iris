ROUTINE FCE.Tests.BasicTests.1 [Type=INT,Generated]
 ;FCE.Tests.BasicTests.1
 ;Generated for class FCE.Tests.BasicTests.  Do NOT edit. 08/16/2023 04:19:52PM
 ;;57725171;FCE.Tests.BasicTests
 ;
%ConstructCloneInit(object,deep=0,cloned,location) methodimpl {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..Manager)=1 Set r%Manager=r%Manager.%ConstructClone(1,.cloned),i%Manager=""
		If $isobject(..RefdRealEstate)=1 Set r%RefdRealEstate=r%RefdRealEstate.%ConstructClone(1,.cloned),i%RefdRealEstate=""
		If $isobject(..UnrefdRealEstate)=1 Set r%UnrefdRealEstate=r%UnrefdRealEstate.%ConstructClone(1,.cloned),i%UnrefdRealEstate=""
	}
	Quit 1 }
%SerializeObject(serial,partial=0) methodimpl {
	try {
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%RefdRealEstate'="" { Set:'$data(%objTX(0,+r%RefdRealEstate)) %objTX(0,+r%RefdRealEstate)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%RefdRealEstate))=r%RefdRealEstate,%objTX(1,%objTX(0,+r%RefdRealEstate),1)=..RefdRealEstateGetObject(1),%objTX(1,%objTX(0,+r%RefdRealEstate),6)=1 Set M%RefdRealEstate=1,i%RefdRealEstate=$listget(%objTX(1,%objTX(0,+r%RefdRealEstate),1)) }
		If r%UnrefdRealEstate'="" { Set:'$data(%objTX(0,+r%UnrefdRealEstate)) %objTX(0,+r%UnrefdRealEstate)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%UnrefdRealEstate))=r%UnrefdRealEstate,%objTX(1,%objTX(0,+r%UnrefdRealEstate),1)=..UnrefdRealEstateGetObject(1),%objTX(1,%objTX(0,+r%UnrefdRealEstate),6)=1 Set M%UnrefdRealEstate=1,i%UnrefdRealEstate=$listget(%objTX(1,%objTX(0,+r%UnrefdRealEstate),1)) }
		set sc=1
	}
	catch tException {
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) methodimpl {
	Set sc=1,intOref=+$this
	If $data(%objTX(0,intOref),index) {
		If 'refresh RETURN 1
		Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	}
	Set:'$d(index) (index,%objTX(0,intOref))=$i(%objTX(1)),%objTX(1,index)=$this Set %objTX(1,index,1)=-1
	Set Poref=r%Manager If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%RefdRealEstate If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%UnrefdRealEstate If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
OnAfterAllTests() [ ID1,ID2,SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,ID1,ID2,SQLCODE 
	/// in case any tests fail to *complete*
	/// remove the leftover branch and the initial branch
	 ;---&sql(DELETE FROM FCE.Branch
 	 ;---	     WHERE (Phone = '999-999-9999') OR (Phone = '999-999-0000'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EuahzCheDq06yOat9ignVyHGaYR","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EuahzCheDq06yOat9ignVyHGaYR"))||($ze["<ZSQLU>") { d %0dsqlA } else { throw } }
	return:(SQLCODE < 0) $$Error^%apiOBJ(5521,SQLCODE,%msg)
	set ID1 = ..RefdRealEstate.%Id(), ID2 = ..UnrefdRealEstate.%Id()
	 ;---&sql(DELETE FROM FCE.RealEstate WHERE ID IN (:ID1, :ID2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, ID1, ID2, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EQAUiCutXhNSkpxngZpWLD1rJV7","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EQAUiCutXhNSkpxngZpWLD1rJV7"))||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	return:(SQLCODE < 0) $$Error^%apiOBJ(5521,SQLCODE,%msg)
	return 1 }
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch WHERE ( Phone = '999-999-9999' ) OR ( Phone = '999-999-0000' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . RealEstate WHERE ID IN ( :ID1 , :ID2 )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
OnBeforeAllTests() methodimpl {
 	// create a Branch with this phone #
	set branch = ##class(FCE.Branch).%New()
	set branch.Phone = "999-999-9999"
 	/* create a dummy RealEstate object, link it to the Branch above
       and save the object in the "global" RefdRealEstate property */
	set realestate = ##class(FCE.RealEstate).%New()
	set realestate.Street = "10 Main Street"
	set realestate.City = "New York"
	set realestate.State = "NY"
	set realestate.Zip = "99999"
	set status = realestate.%Save()
	set branch.Address = realestate
	set status = branch.%Save()
	return:('status) status
	set ..RefdRealEstate = realestate
	/* create a dummy RealEstate object that *isn't* referenced by a Branch
	   save the object in the "global" UnrefdRealEstate property */
	set realestate = ##class(FCE.RealEstate).%New()
	set realestate.Street = "20 Oak Street"
	set realestate.City = "Boston"
	set realestate.State = "MA"
	set realestate.Zip = "99999"
	set status = realestate.%Save()
	return:('status) status
	set ..UnrefdRealEstate = realestate
 	return 1 }
TestAccountHolder() methodimpl {
	// assertion 1
	set accountHolder = ##class(FCE.AccountHolder).%New()
	do ..AssertTrueViaMacro("$isobject(accountHolder), ""Create new account holder""",$isobject(accountHolder), "Create new account holder")
	// assertion 2
	set status = accountHolder.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Name is required""",status, "Name is required")
	set accountHolder.Name = "Smith,John"
	// assertion 3
	set status = accountHolder.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Email is required""",status, "Email is required")
	set accountHolder.Email = "Smith@zzz.com"
	// assertion 4
	set status = accountHolder.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Home/work address is required""",status, "Home/work address is required")
	set accountHolder.Home.Street = "10 High St."
	set accountHolder.Home.City = "Cambridge"
	set accountHolder.Home.State = "MA"
	set accountHolder.Home.Zip = "02142"
	set work = accountHolder.Home.%ConstructClone()
	set accountHolder.Work = work
	// assertion 5
	set accountHolder.DOB = $zdh("01/01/2100")
	set status = accountHolder.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""DOB must be in past""",status, "DOB must be in past")
	set accountHolder.DOB = $zdh("01/01/1980")
	// assertion 6
	set accountHolder.Currency = "DKK"
	set status = accountHolder.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Invalid currency type""",status, "Invalid currency type")
	set accountHolder.Currency = "INR"
	// assertion 7
	set accountHolder.Balance = -5
	set status = accountHolder.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Balance must be >= 0""",status, "Balance must be >= 0")
	set accountHolder.Balance = 1000
	// assertion 8
	set status = accountHolder.%Save()
	do ..AssertStatusOKViaMacro("status, ""New account holder saved""",status, "New account holder saved")
	// assertion 9
	set status = ##class(FCE.AccountHolder).%DeleteId(accountHolder.%Id())
	do ..AssertStatusOKViaMacro("status, ""New account holder deleted""",status, "New account holder deleted") }
TestAccountHolderSQL() [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(INSERT INTO FCE.AccountHolder (Name) VALUES ('Smith,John'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Eg5IR18XlmwTgMUAAX3JmcHJDP6","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Eg5IR18XlmwTgMUAAX3JmcHJDP6"))||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Email is required""",SQLCODE, -108, "Email is required")
	 ;---&sql(INSERT INTO FCE.AccountHolder (Name, Email)
 	 ;---	     VALUES ('Smith,John', 'Smith@zzz.com'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EKqAyNvCCo0TnJbR9gkK02imziH","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EKqAyNvCCo0TnJbR9gkK02imziH"))||($ze["<ZSQLU>") { d %0dsqlG } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Home/work addresses required""",SQLCODE, -108, "Home/work addresses required")
	 ;---&sql(INSERT INTO FCE.AccountHolder (Name, Email, DOB,
 	 ;---		 Home_Street, Home_City, Home_State, Home_Zip,
 	 ;---		 Work_Street, Work_City, Work_State, Work_Zip)
 	 ;---		 VALUES ('Smith,John', 'Smith@zzz.com', {d '2100-01-01'},
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142',
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ea4cljKAfPcuRquqOTT0m1DilE3","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ea4cljKAfPcuRquqOTT0m1DilE3"))||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""DOB must be in past""",SQLCODE, -104, "DOB must be in past")
	 ;---&sql(INSERT INTO FCE.AccountHolder (Name, Email, DOB, Currency,
 	 ;---		 Home_Street, Home_City, Home_State, Home_Zip,
 	 ;---		 Work_Street, Work_City, Work_State, Work_Zip)
 	 ;---		 VALUES ('Smith,John', 'Smith@zzz.com', {d '1980-01-01'}, 'DKK',
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142',
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpEA3lxaDs3PJZjQtoQJXGyDObW","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpEA3lxaDs3PJZjQtoQJXGyDObW"))||($ze["<ZSQLU>") { d %0dsqlK } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""Invalid currency type""",SQLCODE, -104, "Invalid currency type")
	 ;---&sql(INSERT INTO FCE.AccountHolder (Name, Email, DOB, Currency, Balance,
 	 ;---		 Home_Street, Home_City, Home_State, Home_Zip,
 	 ;---		 Work_Street, Work_City, Work_State, Work_Zip)
 	 ;---		 VALUES ('Smith,John', 'Smith@zzz.com', {d '1980-01-01'}, 'INR', -5,
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142',
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EDkPSAG3Pwh8PZDn0rZQUkRgjEs","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EDkPSAG3Pwh8PZDn0rZQUkRgjEs"))||($ze["<ZSQLU>") { d %0dsqlM } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""Balance must be >= 0""",SQLCODE, -104, "Balance must be >= 0")
	 ;---&sql(INSERT INTO FCE.AccountHolder (Name, Email, DOB, Currency, Balance,
 	 ;---		 Home_Street, Home_City, Home_State, Home_Zip,
 	 ;---		 Work_Street, Work_City, Work_State, Work_Zip)
 	 ;---		 VALUES ('Smith,John', 'Smith@zzz.com', {d '1980-01-01'}, 'INR', 100,
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142',
 	 ;---		 '10 High St.', 'Cambridge', 'MA', '02142'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ENkki2Up3S4c3DuBwjmgcfKpg3z","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ENkki2Up3S4c3DuBwjmgcfKpg3z"))||($ze["<ZSQLU>") { d %0dsqlO } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""New account holder saved:""",SQLCODE, 0, "New account holder saved:")
	 ;---&sql(DELETE FROM FCE.AccountHolder WHERE ID = :%ROWID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EgqNcSTBfmSIKsagy1krwCyzSA4","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EgqNcSTBfmSIKsagy1krwCyzSA4"))||($ze["<ZSQLU>") { d %0dsqlQ } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""New account holder deleted""",SQLCODE, 0, "New account holder deleted") }
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . AccountHolder ( Name ) VALUES ( 'Smith,John' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlG	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . AccountHolder ( Name , Email ) VALUES ( 'Smith,John' , 'Smith@zzz.com' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlI	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . AccountHolder ( Name , Email , DOB , Home_Street , Home_City , Home_State , Home_Zip , Work_Street , Work_City , Work_State , Work_Zip ) VALUES ( 'Smith,John' , 'Smith@zzz.com' , { d '2100-01-01' } , '10 High St.' , 'Cambridge' , 'MA' , '02142' , '10 High St.' , 'Cambridge' , 'MA' , '02142' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlK	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . AccountHolder ( Name , Email , DOB , Currency , Home_Street , Home_City , Home_State , Home_Zip , Work_Street , Work_City , Work_State , Work_Zip ) VALUES ( 'Smith,John' , 'Smith@zzz.com' , { d '1980-01-01' } , 'DKK' , '10 High St.' , 'Cambridge' , 'MA' , '02142' , '10 High St.' , 'Cambridge' , 'MA' , '02142' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlM	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . AccountHolder ( Name , Email , DOB , Currency , Balance , Home_Street , Home_City , Home_State , Home_Zip , Work_Street , Work_City , Work_State , Work_Zip ) VALUES ( 'Smith,John' , 'Smith@zzz.com' , { d '1980-01-01' } , 'INR' , - 5 , '10 High St.' , 'Cambridge' , 'MA' , '02142' , '10 High St.' , 'Cambridge' , 'MA' , '02142' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlO	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . AccountHolder ( Name , Email , DOB , Currency , Balance , Home_Street , Home_City , Home_State , Home_Zip , Work_Street , Work_City , Work_State , Work_Zip ) VALUES ( 'Smith,John' , 'Smith@zzz.com' , { d '1980-01-01' } , 'INR' , 100 , '10 High St.' , 'Cambridge' , 'MA' , '02142' , '10 High St.' , 'Cambridge' , 'MA' , '02142' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlQ	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . AccountHolder WHERE ID = :%ROWID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
TestBranch() methodimpl {
	// assertion 1
	set branch = ##class(FCE.Branch).%New()
	do ..AssertTrueViaMacro("$isobject(branch),""Created New Branch""",$isobject(branch),"Created New Branch")	
	// assertion 2
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Phone is required""",status, "Phone is required")	
	// assertion 3
	set branch.Phone = "9999999999" // bad pattern
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Phone doesn't match pattern: ###-###-####""",status, "Phone doesn't match pattern: ###-###-####")
	// assertion 4
	set branch.Phone = "999-999-9999" // pre-existing number
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Phone must be unique""",status, "Phone must be unique")
	// assertion 5
	set branch.Phone = "999-999-0000"
	set branch.Address = ..RefdRealEstate
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Another Branch already has this address""",status, "Another Branch already has this address")
	// assertion 6
	set branch.Address = ..UnrefdRealEstate
	set branch.Opens = 18000 // open at 5am
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Opening at 5am too early""",status, "Opening at 5am too early")	
	// assertion 7
	set branch.Opens = 28800 // open at 8am
	set branch.Closes = 82800 // close at 11pm
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Closing at 11pm too late""",status, "Closing at 11pm too late")
	// assertion 8
	set branch.Closes = 64800 // close at 6pm
	set branch.NationalCurrency = "ABC" // invalid currency
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""ABC is invalid currency""",status, "ABC is invalid currency")
	// assertion 9
	set branch.NationalCurrency = "USD" // valid currency
	set status = branch.%Save()
	do ..AssertStatusOKViaMacro("status, ""Branch saved""",status, "Branch saved")
	// assertion 10
	set branchID = branch.%Id()
	do ..AssertNotEqualsViaMacro("branchID, """", ""ID assigned""",branchID, "", "ID assigned")
	// assertion 11
	set status = ##class(FCE.Branch).%DeleteId(branchID)
	do ..AssertStatusOKViaMacro("status, ""Branch deleted""",status, "Branch deleted") }
TestBranchSQL() [ SQLCODE,branchID,realestateID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,branchID,realestateID 
	set realestateID = ..UnrefdRealEstate.%Id()
	 ;---&sql(INSERT INTO FCE.Branch (Address)
 	 ;---	     VALUES (:realestateID))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EDAWvtLvTvQirNPjBtMdfdaUUGT","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EDAWvtLvTvQirNPjBtMdfdaUUGT"))||($ze["<ZSQLU>") { d %0dsqlS } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Phone is required""",SQLCODE, -108, "Phone is required")
	 ;---&sql(INSERT INTO FCE.Branch (Phone, Address)
 	 ;---	     VALUES ('9999999999',:realestateID))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EsiFyXySWiZiQp4tNaXLaaTvcT1","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EsiFyXySWiZiQp4tNaXLaaTvcT1"))||($ze["<ZSQLU>") { d %0dsqlU } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""Phone doesn't match pattern: ###-###-####""",SQLCODE, -104, "Phone doesn't match pattern: ###-###-####")
	 ;---&sql(INSERT INTO FCE.Branch (Phone, Address)
 	 ;---	     VALUES ('999-999-9999',:realestateID))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ESXzGrdBkJkykyrWIGgubsqPr1i","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ESXzGrdBkJkykyrWIGgubsqPr1i"))||($ze["<ZSQLU>") { d %0dsqlW } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -119, ""Phone must be unique""",SQLCODE, -119, "Phone must be unique")
	 ;---&sql(INSERT INTO FCE.Branch (Phone, Address, Opens)
 	 ;---	     VALUES ('999-999-0000',:realestateID,18000))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ERGqyRpwcN1eHIhRfHvyrI5sEgj","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ERGqyRpwcN1eHIhRfHvyrI5sEgj"))||($ze["<ZSQLU>") { d %0dsqlY } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""Opening at 5am too early""",SQLCODE, -104, "Opening at 5am too early")
	 ;---&sql(INSERT INTO FCE.Branch (Phone, Address, Opens, Closes)
 	 ;---	     VALUES ('999-999-0000',:realestateID,28800,82800))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EYlEbjgbNPHoggnZkl67P9OU0cl","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EYlEbjgbNPHoggnZkl67P9OU0cl"))||($ze["<ZSQLU>") { d %0dsql0 } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""Closing at 11pm too late""",SQLCODE, -104, "Closing at 11pm too late")
	 ;---&sql(INSERT INTO FCE.Branch (Phone, Address, Opens, Closes, NationalCurrency)
 	 ;---	     VALUES ('999-999-0000',:realestateID,28800,64800,'ABC'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ELqMxa6QFnFDrC9U1H1liDQagBJ","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ELqMxa6QFnFDrC9U1H1liDQagBJ"))||($ze["<ZSQLU>") { d %0dsql2 } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""ABC is invalid currency""",SQLCODE, -104, "ABC is invalid currency")
	 ;---&sql(INSERT INTO FCE.Branch (Phone, Address, Opens, Closes, NationalCurrency)
 	 ;---	     VALUES ('999-999-0000',:realestateID,28800,64800,'USD'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EVyY1dwPcUC4joqxcck1Lv0zQ3V","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EVyY1dwPcUC4joqxcck1Lv0zQ3V"))||($ze["<ZSQLU>") { d %0dsql4 } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch saved""",SQLCODE, 0, "Branch saved")
	set branchID = %ROWID
	do ..AssertNotEqualsViaMacro("branchID, """", ""ID assigned""",branchID, "", "ID assigned")
	 ;---&sql(DELETE FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5KURhV4fHYV6dM74073Sc8YyQq","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5KURhV4fHYV6dM74073Sc8YyQq"))||($ze["<ZSQLU>") { d %0dsql6 } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch deleted""",SQLCODE, 0, "Branch deleted") }
 q
%0dsqlS	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Address ) VALUES ( :realestateID )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlU	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address ) VALUES ( '9999999999' , :realestateID )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlW	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address ) VALUES ( '999-999-9999' , :realestateID )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlY	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address , Opens ) VALUES ( '999-999-0000' , :realestateID , 18000 )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsql0	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address , Opens , Closes ) VALUES ( '999-999-0000' , :realestateID , 28800 , 82800 )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsql2	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address , Opens , Closes , NationalCurrency ) VALUES ( '999-999-0000' , :realestateID , 28800 , 64800 , 'ABC' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsql4	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address , Opens , Closes , NationalCurrency ) VALUES ( '999-999-0000' , :realestateID , 28800 , 64800 , 'USD' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsql6	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
TestCurrenciesATMs() methodimpl {
	if '$$$PropertyExists(FCE.Branch,CurrencyBalances) ||
	   '$$$PropertyExists(FCE.Branch,ATMs) {
		do ..AssertSkippedViaMacro("Can't run test yet")
		quit
	}
	set branch = ##class(FCE.Branch).%New()
	set branch.Phone = "999-999-0000"
	do branch.CurrencyBalances.SetAt(9999999,"USD")
	set status = branch.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Currency Balance must be <= 1000000""",status, "Currency Balance must be <= 1000000")
	do branch.CurrencyBalances.SetAt(1000,"USD")
	/// test this AFTER writing %OnValidateObject()
	if $$$MethodExists(FCE.Branch,%OnValidateObject) {
		do branch.CurrencyBalances.SetAt(1000,"ABC")
		set status = branch.%Save()
		do ..AssertStatusNotOKViaMacro("status, $system.Status.GetErrorText(status)",status, $system.Status.GetErrorText(status))
		do branch.CurrencyBalances.RemoveAt("ABC")
	}	
	set status = branch.%Save()
	do ..AssertStatusOKViaMacro("status, ""Branch with Currency Balance saved""",status, "Branch with Currency Balance saved")
	set count = branch.CurrencyBalances.Count()
	do ..AssertEqualsViaMacro("count, 1, ""Branch has one Currency Balance""",count, 1, "Branch has one Currency Balance")
	do branch.CurrencyBalances.RemoveAt("US")
	set count = branch.CurrencyBalances.Count()
	do ..AssertNotEqualsViaMacro("count, 0, ""RemoveAt() requires exact key""",count, 0, "RemoveAt() requires exact key")
	do branch.CurrencyBalances.RemoveAt("USD")
	set count = branch.CurrencyBalances.Count()
	do ..AssertEqualsViaMacro("count, 0, ""Currency Balance Removed""",count, 0, "Currency Balance Removed")
	do branch.ATMs.Insert("a111")
	do branch.ATMs.Insert("b222")
	do branch.ATMs.Insert("c333")
	set count = branch.ATMs.Count()
	do ..AssertEqualsViaMacro("count, 3, ""Branch has three ATMs""",count, 3, "Branch has three ATMs")
	do branch.ATMs.RemoveAt(2)
	set count = branch.ATMs.Count()
	do ..AssertEqualsViaMacro("count, 2, ""Branch's original 2nd ATM deleted""",count, 2, "Branch's original 2nd ATM deleted")
	set ATM = branch.ATMs.GetAt(2)
	do ..AssertEqualsViaMacro("ATM, ""c333"", ""Branch's original 3rd ATM now in position 2""",ATM, "c333", "Branch's original 3rd ATM now in position 2")
	set status = ##class(FCE.Branch).%DeleteId(branch.%Id())
	do ..AssertStatusOKViaMacro("status, ""Branch deleted""",status, "Branch deleted") }
TestCurrenciesSQL() [ SQLCODE,branchID,count ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,branchID,count 
	if '$$$PropertyExists(FCE.Branch,CurrencyBalances) {
		do ..AssertSkippedViaMacro("Can't run test yet")
		quit
	}
	 ;---&sql(INSERT INTO FCE.Branch (Phone) VALUES ('999-999-0000'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpMJtJp23eps6xTzZ5N8QkiQ9sj","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpMJtJp23eps6xTzZ5N8QkiQ9sj"))||($ze["<ZSQLU>") { d %0dsql8 } else { throw } }
	set branchID = %ROWID
	 ;---&sql(INSERT INTO FCE.Branch_Balance (Branch, element_key, Balance)
 	 ;---             VALUES (:branchID, 'USD', '9999999'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ERqoKsaFrswhm2i2QkC5If3zRDL","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ERqoKsaFrswhm2i2QkC5If3zRDL"))||($ze["<ZSQLU>") { d %0dsqla } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""Currency Balance must be <= 1000000""",SQLCODE, -104, "Currency Balance must be <= 1000000")
	 ;---&sql(INSERT INTO FCE.Branch_Balance (Branch, element_key, Balance)
 	 ;---             VALUES (:branchID, 'USD', '10000'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4gZCS9dDXaQuy4H5ofl9m5M6gr","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4gZCS9dDXaQuy4H5ofl9m5M6gr"))||($ze["<ZSQLU>") { d %0dsqlc } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch with Currency Balance saved""",SQLCODE, 0, "Branch with Currency Balance saved")
	 ;---&sql(SELECT COUNT(*) INTO :count FROM FCE.Branch_Balance WHERE Branch = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID, count
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EfuG67C8R56tTtl8gUMykgZscpz","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EfuG67C8R56tTtl8gUMykgZscpz"))||($ze["<ZSQLU>") { d %0dsqle } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Currency Balance count retrieved""",SQLCODE, 0, "Currency Balance count retrieved")
	do ..AssertEqualsViaMacro("count, 1, ""Branch has one Currency Balance""",count, 1, "Branch has one Currency Balance")
	 ;---&sql(DELETE FROM FCE.Branch_Balance WHERE (element_key = 'USD') AND (Branch = :branchID))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EwDxK89jiBTTJY0qAvXwqlA9J6q","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EwDxK89jiBTTJY0qAvXwqlA9J6q"))||($ze["<ZSQLU>") { d %0dsqlg } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Currency Balance removed""",SQLCODE, 0, "Currency Balance removed")
	 ;---&sql(DELETE FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4kWcbrduJhPFsUelTE6NoE9TZF","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4kWcbrduJhPFsUelTE6NoE9TZF"))||($ze["<ZSQLU>") { d %0dsqli } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch deleted""",SQLCODE, 0, "Branch deleted") }
 q
%0dsql8	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone ) VALUES ( '999-999-0000' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqla	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch_Balance ( Branch , element_key , Balance ) VALUES ( :branchID , 'USD' , '9999999' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlc	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch_Balance ( Branch , element_key , Balance ) VALUES ( :branchID , 'USD' , '10000' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqle	n %xxsql
	s %xxsql("S",1)="SELECT COUNT ( * ) INTO :count FROM FCE . Branch_Balance WHERE Branch = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set count="" } catch {} }
	return
%0dsqlg	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch_Balance WHERE ( element_key = 'USD' ) AND ( Branch = :branchID )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqli	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
TestCurrencyOrder() methodimpl {
 	if '$$$ClassExists(FCE.CurrencyOrder) {
		do ..AssertSkippedViaMacro("Can't run test yet")
		quit
	}
	set branch = ##class(FCE.Branch).%New()
	set branch.Phone = "999-999-0000"
	set status = branch.%Save()
	do ..AssertStatusOKViaMacro("status, ""Branch saved""",status, "Branch saved")
	set branchID = branch.%Id()
	set countOfOrders = branch.Orders.Count()
	do ..AssertEqualsViaMacro("countOfOrders, 0, ""No orders yet""",countOfOrders, 0, "No orders yet")
	set order1 = ##class(FCE.CurrencyOrder).%New()
	do ..AssertTrueViaMacro("$isobject(order1), ""Create order 1""",$isobject(order1), "Create order 1")
	set order1.ATM = "a111"
	set order1.Branch = branch
	set countOfOrders = branch.Orders.Count()
	do ..AssertEqualsViaMacro("countOfOrders, 1, ""Branch has 1 order""",countOfOrders, 1, "Branch has 1 order")
	set status = order1.%Save()
	do ..AssertStatusOKViaMacro("status, ""Order 1 saved""",status, "Order 1 saved")
	set order1ID = order1.%Id()
	do ..AssertNotEqualsViaMacro("order1ID, """", ""Order 1 ID assigned""",order1ID, "", "Order 1 ID assigned")
	set order2 = ##class(FCE.CurrencyOrder).%New()
	do ..AssertTrueViaMacro("$isobject(order2), ""Create order 2""",$isobject(order2), "Create order 2")
	set order2.ATM = "b222"
	do branch.Orders.Insert(order2)
	set countOfOrders = branch.Orders.Count()
	do ..AssertEqualsViaMacro("countOfOrders, 2, ""Branch has 2 orders""",countOfOrders, 2, "Branch has 2 orders")
	set status = branch.%Save()
	do ..AssertStatusOKViaMacro("status, ""Branch and order 2 saved""",status, "Branch and order 2 saved")
	set order2ID = order2.%Id()
	do ..AssertNotEqualsViaMacro("order2ID, """", ""Order 2 ID assigned""",order2ID, "", "Order 2 ID assigned")
	set (branch, order1, order2) = ""
	do ..LogMessage("All objects closed")
	set order2 = ##class(FCE.CurrencyOrder).%OpenId(order2ID)
	do ..AssertTrueViaMacro("$isobject(order2), ""Order 2 retrieved""",$isobject(order2), "Order 2 retrieved")
	set branch = order2.Branch
	do ..AssertEqualsViaMacro("branch.Phone, ""999-999-0000"", ""Branch retrieved""",branch.Phone, "999-999-0000", "Branch retrieved")
	set countOfOrders = branch.Orders.Count()
	do ..AssertEqualsViaMacro("countOfOrders, 2, ""Branch has 2 orders""",countOfOrders, 2, "Branch has 2 orders")
	set (branch, order1, order2) = ""
	do ..LogMessage("All objects closed")
	set order3 = ##class(FCE.CurrencyOrder).%New()
	set order3.ATM = "c333"
	set status = order3.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Order 3 not saved, branch required""",status, "Order 3 not saved, branch required")
	set status = ##class(FCE.Branch).%DeleteId(branchID)
	do ..AssertStatusNotOKViaMacro("status, ""Branch can't be deleted while it has orders""",status, "Branch can't be deleted while it has orders")
	set status = ##class(FCE.CurrencyOrder).%DeleteId(order1ID)
	do ..AssertStatusOKViaMacro("status, ""Order 1 deleted""",status, "Order 1 deleted")
	set status = ##class(FCE.CurrencyOrder).%DeleteId(order2ID)
	do ..AssertStatusOKViaMacro("status, ""Order 2 deleted""",status, "Order 2 deleted")
	set status = ##class(FCE.Branch).%DeleteId(branchID)
	do ..AssertStatusOKViaMacro("status, ""Branch deleted""",status, "Branch deleted") }
TestCurrencyOrderSQL() [ SQLCODE,branchID,order1ID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,branchID,order1ID 
 	if '$$$ClassExists(FCE.CurrencyOrder) {
		do ..AssertSkippedViaMacro("Can't run test yet")
		quit
	}
	 ;---&sql(INSERT INTO FCE.Branch (Phone) VALUES ('999-999-0000'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpMJtJp23eps6xTzZ5N8QkiQ9sj","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EpMJtJp23eps6xTzZ5N8QkiQ9sj"))||($ze["<ZSQLU>") { d %0dsqlk } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch saved""",SQLCODE, 0, "Branch saved")
	set branchID = %ROWID
	do ..AssertNotEqualsViaMacro("branchID, """", ""Branch ID assigned""",branchID, "", "Branch ID assigned")
	 ;---&sql(INSERT INTO FCE.CurrencyOrder (Branch, ATM)
 	 ;---	     VALUES (:branchID, 'a111'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ec82TUvZNJbv5N2YelOjlzUuuk0","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ec82TUvZNJbv5N2YelOjlzUuuk0"))||($ze["<ZSQLU>") { d %0dsqlm } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Order 1 linked to Branch and saved""",SQLCODE, 0, "Order 1 linked to Branch and saved")
	set order1ID = %ROWID
	do ..AssertNotEqualsViaMacro("order1ID, """", ""Order 1 ID assigned""",order1ID, "", "Order 1 ID assigned")
	 ;---&sql(INSERT INTO FCE.CurrencyOrder (ATM)
 	 ;---	     VALUES ('b222'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EcAxvIAg5VT1GNheJccpgPeYIiB","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EcAxvIAg5VT1GNheJccpgPeYIiB"))||($ze["<ZSQLU>") { d %0dsqlo } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Order 2 not saved, branch required""",SQLCODE, -108, "Order 2 not saved, branch required")
	 ;---&sql(DELETE FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4kWcbrduJhPFsUelTE6NoE9TZF","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4kWcbrduJhPFsUelTE6NoE9TZF"))||($ze["<ZSQLU>") { d %0dsqlq } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -124, ""Branch can't be deleted while it has orders""",SQLCODE, -124, "Branch can't be deleted while it has orders")
	 ;---&sql(DELETE FROM FCE.CurrencyOrder WHERE ID = :order1ID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, order1ID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EzaEPjl5FiAScrXHxFBAcYmtTfL","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EzaEPjl5FiAScrXHxFBAcYmtTfL"))||($ze["<ZSQLU>") { d %0dsqls } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Order 1 deleted""",SQLCODE, 0, "Order 1 deleted")
	 ;---&sql(DELETE FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4kWcbrduJhPFsUelTE6NoE9TZF","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E4kWcbrduJhPFsUelTE6NoE9TZF"))||($ze["<ZSQLU>") { d %0dsqlu } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch deleted""",SQLCODE, 0, "Branch deleted") }
 q
%0dsqlk	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone ) VALUES ( '999-999-0000' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlm	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . CurrencyOrder ( Branch , ATM ) VALUES ( :branchID , 'a111' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlo	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . CurrencyOrder ( ATM ) VALUES ( 'b222' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlq	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqls	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . CurrencyOrder WHERE ID = :order1ID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlu	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("runtime","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
TestRealEstate() methodimpl {
	set realestate = ##class(FCE.RealEstate).%New()
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Real Estate requires all 4 properties""",status, "Real Estate requires all 4 properties")
	set realestate.Street = "10 Main St."
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Real Estate requires all 4 properties""",status, "Real Estate requires all 4 properties")
	set realestate.City = "New York"
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Real Estate requires all 4 properties""",status, "Real Estate requires all 4 properties")
	set realestate.State = "ny"
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""State must be on VALUELIST and must match case""",status, "State must be on VALUELIST and must match case")
	set realestate.State = "NY"
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""Real Estate requires all 4 properties""",status, "Real Estate requires all 4 properties")
	set realestate.Zip = "123"
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""ZipCode must be ##### or #####-####""",status, "ZipCode must be ##### or #####-####")
	set realestate.Zip = "12345-1"
	set status = realestate.%Save()
	do ..AssertStatusNotOKViaMacro("status, ""ZipCode must be ##### or #####-####""",status, "ZipCode must be ##### or #####-####")
	set realestate.Zip = "99999-4567"
	set status = realestate.%Save()
	set realestateID = realestate.%Id()
	do ..AssertStatusOKViaMacro("status, ""Real Estate saved""",status, "Real Estate saved")
	set branch = ##class(FCE.Branch).%New()
	set branch.Phone = "999-999-0000"
	set branch.Address = realestate
	set status = branch.%Save()
	set branchID = branch.%Id()
	do ..AssertStatusOKViaMacro("status, ""Branch saved""",status, "Branch saved")
	set (branch, realestate) = ""
	do ..LogMessage("All objects closed")
	set branch = ##class(FCE.Branch).%OpenId(branchID)
	set realestate = ##class(FCE.RealEstate).%OpenId(realestateID)
	do ..AssertEqualsViaMacro("branch.Address.City, realestate.City, ""Branch references Real Estate""",branch.Address.City, realestate.City, "Branch references Real Estate")
	set (branch, realestate) = ""
	do ..LogMessage("All objects closed")
	set status = ##class(FCE.RealEstate).%DeleteId(realestateID)
	do ..AssertStatusOKViaMacro("status, ""Real Estate deleted""",status, "Real Estate deleted")
	set realestateID = ##class(FCE.Branch).AddressGetStored(branchID)
	do ..AssertEqualsViaMacro("realestateID, """", ""Branch not linked to Real Estate""",realestateID, "", "Branch not linked to Real Estate")
	set status = ##class(FCE.Branch).%DeleteId(branchID)
	do ..AssertStatusOKViaMacro("status, ""Branch deleted""",status, "Branch deleted") }
TestRealEstateSQL() [ SQLCODE,branchID,city,realestateID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,branchID,city,realestateID 
	 ;---&sql(INSERT INTO FCE.RealEstate (Street) VALUES ('10 Main St.'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EUd7U2JtfGbSRiGMJQFFp6TMBQo","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EUd7U2JtfGbSRiGMJQFFp6TMBQo"))||($ze["<ZSQLU>") { d %0dsqlw } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Real Estate requires all 4 properties""",SQLCODE, -108, "Real Estate requires all 4 properties")
	 ;---&sql(INSERT INTO FCE.RealEstate (Street,City) VALUES ('10 Main St.','New York'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E2HigC18mEfK2Zm116GSmLdwJCD","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E2HigC18mEfK2Zm116GSmLdwJCD"))||($ze["<ZSQLU>") { d %0dsqly } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Real Estate requires all 4 properties""",SQLCODE, -108, "Real Estate requires all 4 properties")
	 ;---&sql(INSERT INTO FCE.RealEstate (Street,City,State)
 	 ;---             VALUES ('10 Main St.','New York','ny'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ebcx9XjS9kg8WiUEewbovdKPbBC","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ebcx9XjS9kg8WiUEewbovdKPbBC"))||($ze["<ZSQLU>") { d %0dsqlAA } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""State must be on VALUELIST and must match case""",SQLCODE, -104, "State must be on VALUELIST and must match case")
	 ;---&sql(INSERT INTO FCE.RealEstate (Street,City,State)
 	 ;---             VALUES ('10 Main St.','New York','NY'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EXnXxuVgb1666IgGFyoReas5zgk","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EXnXxuVgb1666IgGFyoReas5zgk"))||($ze["<ZSQLU>") { d %0dsqlAC } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -108, ""Real Estate requires all 4 properties""",SQLCODE, -108, "Real Estate requires all 4 properties")
	 ;---&sql(INSERT INTO FCE.RealEstate (Street,City,State,Zip) 
 	 ;---             VALUES ('10 Main St.','New York','NY','123'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E0jg5BBFJvf9YQnuTfNkUIaCCQI","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E0jg5BBFJvf9YQnuTfNkUIaCCQI"))||($ze["<ZSQLU>") { d %0dsqlAE } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""ZipCode must be ##### or #####-####""",SQLCODE, -104, "ZipCode must be ##### or #####-####")
	 ;---&sql(INSERT INTO FCE.RealEstate (Street,City,State,Zip) 
 	 ;---             VALUES ('10 Main St.','New York','NY','12345-1'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EBdVI6gpHmuMVHJyStnD5HNLxgY","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EBdVI6gpHmuMVHJyStnD5HNLxgY"))||($ze["<ZSQLU>") { d %0dsqlAG } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, -104, ""ZipCode must be ##### or #####-####""",SQLCODE, -104, "ZipCode must be ##### or #####-####")
	 ;---&sql(INSERT INTO FCE.RealEstate (Street,City,State,Zip)
 	 ;---             VALUES ('10 Main St.','New York','NY','99999-4567'))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EbDsJMyLSaJapOM0oLWM08YiDAr","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EbDsJMyLSaJapOM0oLWM08YiDAr"))||($ze["<ZSQLU>") { d %0dsqlAI } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Real Estate saved""",SQLCODE, 0, "Real Estate saved")
	set realestateID = %ROWID
	do ..AssertNotEqualsViaMacro("realestateID, """", ""Real Estate ID assigned""",realestateID, "", "Real Estate ID assigned")
	 ;---&sql(INSERT INTO FCE.Branch (Phone,Address) VALUES ('999-999-0000',:realestateID))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EKxPgsc2YPjq7So40pYIgnstfS0","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EKxPgsc2YPjq7So40pYIgnstfS0"))||($ze["<ZSQLU>") { d %0dsqlAK } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch saved""",SQLCODE, 0, "Branch saved")
	set branchID = %ROWID
	 ;---&sql(SELECT Address->City INTO :city FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID, city
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EwRyeIXY45DZCzGnsudInqEg7yX","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EwRyeIXY45DZCzGnsudInqEg7yX"))||($ze["<ZSQLU>") { d %0dsqlAM } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""City retrieved""",SQLCODE, 0, "City retrieved")
	do ..AssertEqualsViaMacro("city, ""New York"", ""Branch references Real Estate""",city, "New York", "Branch references Real Estate")
	 ;---&sql(DELETE FROM FCE.RealEstate WHERE ID = :realestateID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EMQz1dX58FkyLPGWMa5WSOqesGC","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EMQz1dX58FkyLPGWMa5WSOqesGC"))||($ze["<ZSQLU>") { d %0dsqlAO } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Real Estate deleted""",SQLCODE, 0, "Real Estate deleted")
	 ;---&sql(SELECT Address INTO :realestateID FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID, realestateID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EUhRCefj4g66qTecYSog4DnJUzi","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EUhRCefj4g66qTecYSog4DnJUzi"))||($ze["<ZSQLU>") { d %0dsqlAQ } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Real Estate ID retrieved""",SQLCODE, 0, "Real Estate ID retrieved")
	do ..AssertEqualsViaMacro("realestateID, """", ""Branch not linked to Real Estate""",realestateID, "", "Branch not linked to Real Estate")
	 ;---&sql(DELETE FROM FCE.Branch WHERE ID = :branchID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, branchID
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5KURhV4fHYV6dM74073Sc8YyQq","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5KURhV4fHYV6dM74073Sc8YyQq"))||($ze["<ZSQLU>") { d %0dsqlAS } else { throw } }
	do ..AssertEqualsViaMacro("SQLCODE, 0, ""Branch deleted""",SQLCODE, 0, "Branch deleted") }
 q
%0dsqlw	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street ) VALUES ( '10 Main St.' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqly	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street , City ) VALUES ( '10 Main St.' , 'New York' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAA	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street , City , State ) VALUES ( '10 Main St.' , 'New York' , 'ny' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAC	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street , City , State ) VALUES ( '10 Main St.' , 'New York' , 'NY' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAE	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street , City , State , Zip ) VALUES ( '10 Main St.' , 'New York' , 'NY' , '123' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAG	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street , City , State , Zip ) VALUES ( '10 Main St.' , 'New York' , 'NY' , '12345-1' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAI	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . RealEstate ( Street , City , State , Zip ) VALUES ( '10 Main St.' , 'New York' , 'NY' , '99999-4567' )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAK	n %xxsql
	s %xxsql("S",1)="INSERT INTO FCE . Branch ( Phone , Address ) VALUES ( '999-999-0000' , :realestateID )"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAM	n %xxsql
	s %xxsql("S",1)="SELECT Address -> City INTO :city FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set city="" } catch {} }
	return
%0dsqlAO	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . RealEstate WHERE ID = :realestateID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
%0dsqlAQ	n %xxsql
	s %xxsql("S",1)="SELECT Address INTO :realestateID FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set realestateID="" } catch {} }
	return
%0dsqlAS	n %xxsql
	s %xxsql("S",1)="DELETE FROM FCE . Branch WHERE ID = :branchID"
	s %xxsql("I","%outUnitTest")="",%xxsql("I","%systemInclude")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE.Tests",0,"",),,"FCE.Tests.BasicTests.CLS")
	return
TestUpdateBranch() methodimpl {
	// create branch
	set branch = ##class(FCE.Branch).%New()
	set branch.Phone = "999-999-0000"
	set euros = 150, dollars = 50
	do branch.CurrencyBalances.SetAt(euros, "EUR")
	do branch.CurrencyBalances.SetAt(dollars, "USD")
	set currencyOut = "EUR", amountOut   = 1000
	set currencyIn  = "USD", amountIn    = 100
	set status = branch.Update(currencyOut, amountOut, currencyIn, amountIn)
	do ..AssertStatusNotOKViaMacro("status, $system.Status.GetErrorText(status)",status, $system.Status.GetErrorText(status))
	set currentEuros = branch.CurrencyBalances.GetAt("EUR")
	set currentDollars = branch.CurrencyBalances.GetAt("USD")
	do ..AssertEqualsViaMacro("currentEuros, euros, ""Outgoing currency remains the same""",currentEuros, euros, "Outgoing currency remains the same")
	do ..AssertEqualsViaMacro("currentDollars, dollars, ""Incoming currency remains the same""",currentDollars, dollars, "Incoming currency remains the same")
	set amountIn  = 9999999, amountOut = 100
	set status = branch.Update(currencyOut, amountOut, currencyIn, amountIn)
	do ..AssertStatusNotOKViaMacro("status, $system.Status.GetErrorText(status)",status, $system.Status.GetErrorText(status))
	set currentEuros = branch.CurrencyBalances.GetAt("EUR")
	set currentDollars = branch.CurrencyBalances.GetAt("USD")
	do ..AssertEqualsViaMacro("currentEuros, euros, ""Outgoing currency remains the same""",currentEuros, euros, "Outgoing currency remains the same")
	do ..AssertEqualsViaMacro("currentDollars, dollars, ""Incoming currency remains the same""",currentDollars, dollars, "Incoming currency remains the same")
	set amountIn = 100
	set status = branch.Update(currencyOut, amountOut, currencyIn, amountIn)
	do ..AssertStatusOKViaMacro("status, ""Branch updated""",status, "Branch updated")
	set currentEuros = branch.CurrencyBalances.GetAt("EUR")
	set currentDollars = branch.CurrencyBalances.GetAt("USD")
	set euros = euros - amountOut, dollars = dollars + amountIn
	do ..AssertEqualsViaMacro("currentEuros, euros, ""Outgoing currency updated correctly""",currentEuros, euros, "Outgoing currency updated correctly")
	do ..AssertEqualsViaMacro("currentDollars, dollars, ""Incoming currency updated correctly""",currentDollars, dollars, "Incoming currency updated correctly")
	set amountOut = 20
	set status = branch.Update(currencyOut, amountOut)
	do ..AssertStatusOKViaMacro("status, ""Outgoing-only currency allowed (credit card or account payment)""",status, "Outgoing-only currency allowed (credit card or account payment)")
	set currentEuros = branch.CurrencyBalances.GetAt("EUR")
	set currentDollars = branch.CurrencyBalances.GetAt("USD")
	set euros = euros - amountOut
	do ..AssertEqualsViaMacro("currentEuros, euros, ""Outgoing currency updated correctly""",currentEuros, euros, "Outgoing currency updated correctly")
	do ..AssertEqualsViaMacro("currentDollars, dollars, ""Incoming currency remains the same""",currentDollars, dollars, "Incoming currency remains the same")
	set amountIn = 20
	set status = branch.Update(,,currencyIn, amountIn)
	do ..AssertStatusOKViaMacro("status, ""Incoming-only currency allowed (crediting account balance)""",status, "Incoming-only currency allowed (crediting account balance)")
	set currentEuros = branch.CurrencyBalances.GetAt("EUR")
	set currentDollars = branch.CurrencyBalances.GetAt("USD")
	set dollars = dollars + amountIn
	do ..AssertEqualsViaMacro("currentEuros, euros, ""Outgoing currency remains the same""",currentEuros, euros, "Outgoing currency remains the same")
	do ..AssertEqualsViaMacro("currentDollars, dollars, ""Incoming currency updated correctly""",currentDollars, dollars, "Incoming currency updated correctly")
	set currencyIn = "ABC", amountIn = 20
	set status = branch.Update(,,currencyIn, amountIn)
	do ..AssertStatusNotOKViaMacro("status, ""Invalid incoming currency""",status, "Invalid incoming currency")
	set currentEuros = branch.CurrencyBalances.GetAt("EUR")
	set currentDollars = branch.CurrencyBalances.GetAt("USD")
	do ..AssertEqualsViaMacro("currentEuros, euros, ""Outgoing currency remains the same""",currentEuros, euros, "Outgoing currency remains the same")
	do ..AssertEqualsViaMacro("currentDollars, dollars, ""Incoming currency remains the same""",currentDollars, dollars, "Incoming currency remains the same") }
RefdRealEstateGetObject(force=0) methodimpl {
	Quit $select(r%RefdRealEstate=""||(i%RefdRealEstate'=""):$select(i%RefdRealEstate="":"",1:$listbuild(i%RefdRealEstate_"")),(''..RefdRealEstate.%GetSwizzleObject(force,.oid)):oid,1:"") }
RefdRealEstateGetObjectId(force=0) methodimpl {
	Quit $listget(..RefdRealEstateGetObject(force)) }
RefdRealEstateGetSwizzled(noswizzle=0) methodimpl {
	If noswizzle Quit r%RefdRealEstate
	If i%RefdRealEstate="" Quit ""
	Set oref=##class(FCE.RealEstate).%Open($select(i%RefdRealEstate="":"",1:$listbuild(i%RefdRealEstate_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%RefdRealEstate=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
RefdRealEstateNewObject() methodimpl {
	Set newobject=##class(FCE.RealEstate).%New() If newobject="" Quit ""
	Set ..RefdRealEstate=newobject
	Quit newobject }
RefdRealEstateSetObject(newvalue) methodimpl {
	If newvalue'="",$data(i%RefdRealEstate,tmp),tmp=$listget(newvalue) Quit 1
	Set i%RefdRealEstate=$listget(newvalue),r%RefdRealEstate=0,r%RefdRealEstate=""
	Quit 1 }
RefdRealEstateSetObjectId(newid) methodimpl {
	Quit ..RefdRealEstateSetObject($select(newid="":"",1:$listbuild(newid_""))) }
RefdRealEstateUnSwizzle(force=0) methodimpl {
	If r%RefdRealEstate="" Quit 1
	Set sc=..RefdRealEstate.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%RefdRealEstate="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%RefdRealEstate=$listget(newvalue)
	Quit 1 }
UnrefdRealEstateGetObject(force=0) methodimpl {
	Quit $select(r%UnrefdRealEstate=""||(i%UnrefdRealEstate'=""):$select(i%UnrefdRealEstate="":"",1:$listbuild(i%UnrefdRealEstate_"")),(''..UnrefdRealEstate.%GetSwizzleObject(force,.oid)):oid,1:"") }
UnrefdRealEstateGetObjectId(force=0) methodimpl {
	Quit $listget(..UnrefdRealEstateGetObject(force)) }
UnrefdRealEstateGetSwizzled(noswizzle=0) methodimpl {
	If noswizzle Quit r%UnrefdRealEstate
	If i%UnrefdRealEstate="" Quit ""
	Set oref=##class(FCE.RealEstate).%Open($select(i%UnrefdRealEstate="":"",1:$listbuild(i%UnrefdRealEstate_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%UnrefdRealEstate=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
UnrefdRealEstateNewObject() methodimpl {
	Set newobject=##class(FCE.RealEstate).%New() If newobject="" Quit ""
	Set ..UnrefdRealEstate=newobject
	Quit newobject }
UnrefdRealEstateSetObject(newvalue) methodimpl {
	If newvalue'="",$data(i%UnrefdRealEstate,tmp),tmp=$listget(newvalue) Quit 1
	Set i%UnrefdRealEstate=$listget(newvalue),r%UnrefdRealEstate=0,r%UnrefdRealEstate=""
	Quit 1 }
UnrefdRealEstateSetObjectId(newid) methodimpl {
	Quit ..UnrefdRealEstateSetObject($select(newid="":"",1:$listbuild(newid_""))) }
UnrefdRealEstateUnSwizzle(force=0) methodimpl {
	If r%UnrefdRealEstate="" Quit 1
	Set sc=..UnrefdRealEstate.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%UnrefdRealEstate="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%UnrefdRealEstate=$listget(newvalue)
	Quit 1 }
%sqllistUCQ(t) public	{
	s t("%0dsql0")="",t("%0dsql2")="",t("%0dsql4")="",t("%0dsql6")="",t("%0dsql8")="",t("%0dsqlA")="",t("%0dsqlAA")="",t("%0dsqlAC")=""
	s t("%0dsqlAE")="",t("%0dsqlAG")="",t("%0dsqlAI")="",t("%0dsqlAK")="",t("%0dsqlAM")="",t("%0dsqlAO")="",t("%0dsqlAQ")="",t("%0dsqlAS")=""
	s t("%0dsqlC")="",t("%0dsqlE")="",t("%0dsqlG")="",t("%0dsqlI")="",t("%0dsqlK")="",t("%0dsqlM")="",t("%0dsqlO")="",t("%0dsqlQ")=""
	s t("%0dsqlS")="",t("%0dsqlU")="",t("%0dsqlW")="",t("%0dsqlY")="",t("%0dsqla")="",t("%0dsqlc")="",t("%0dsqle")="",t("%0dsqlg")=""
	s t("%0dsqli")="",t("%0dsqlk")="",t("%0dsqlm")="",t("%0dsqlo")="",t("%0dsqlq")="",t("%0dsqls")="",t("%0dsqlu")="",t("%0dsqlw")=""
	s t("%0dsqly")=""
}