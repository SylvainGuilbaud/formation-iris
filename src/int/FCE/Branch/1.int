ROUTINE FCE.Branch.1 [Type=INT,Generated]
 ;FCE.Branch.1
 ;Generated for class FCE.Branch.  Do NOT edit. 08/14/2023 08:17:24AM
 ;;48495247;FCE.Branch
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BMEBuilt(bmeName) methodimpl
	Set bmeName = "$Branch"
	RETURN ''$d(^FCE.BranchI("$Branch"))
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) methodimpl {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..ATMs
 s proporef=..Address
 s proporef=..CurrencyBalances
 s proporef=..Notes
 s proporef=..Orders
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/5
 s proporef=..ATMs
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(1_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
 s proporef=..Address
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..CurrencyBalances
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(2_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . s idx="" f  s value=proporef.GetNext(.idx) q:idx=""  s t=$io u dev i $zobjexport(idx_"",3)!1 u t s t=$io u dev i $zobjexport(value_"",3)!1 u t
 s proporef=..Notes
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..Orders
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
   Quit sc }
%BuildDeferredIndices(lockFlag=0,journalFlag=1) methodimpl {
	return $$Error^%apiOBJ(5758,"%Storage.Persistent::%BuildDeferredIndices") }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") methodimpl {
	if ($listlength(pIndexList)=1)&&($listget(pIndexList,1)="") { return 1 }
	Set class=$classname(),tBuildFlags=1,tBuildFlags(class)=$c(0,0,0,0,0,0)
	Set tPtr=0,tStatus=1
	While $listnext(pIndexList,tPtr,tIndex) {
		continue:tIndex=""
		If '$d(^oddCOM(class,"i",tIndex)) {
			Set tStatus=$select(+tStatus:$$Error^%apiOBJ(5066,class_"::"_tIndex),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5066,class_"::"_tIndex)))
		}
	}
	If ('tStatus) RETURN tStatus
	if ((pIndexList="")||($listfind(pIndexList,"$Branch"))),'$listfind(pIgnoreIndexList,"$Branch") { set $Extract(tBuildFlags(class),1)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"ATMIndex"))),'$listfind(pIgnoreIndexList,"ATMIndex") { set $Extract(tBuildFlags(class),2)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"AddressIndex"))),'$listfind(pIgnoreIndexList,"AddressIndex") { set $Extract(tBuildFlags(class),3)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"CBIndex"))),'$listfind(pIgnoreIndexList,"CBIndex") { set $Extract(tBuildFlags(class),4)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"NotesiFind"))),'$listfind(pIgnoreIndexList,"NotesiFind") { set $Extract(tBuildFlags(class),5)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"PhoneIndex"))),'$listfind(pIgnoreIndexList,"PhoneIndex") { set $Extract(tBuildFlags(class),6)=$c(1) }
	Quit ..%BuildIndexInternal(.pLockFlag,.pAutoPurge,.pStartID,.pEndID,.pIndexList,.tBuildFlags,"^FCE.BranchD",1,.pJournalFlag,0) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") methodimpl {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),2),$SortBegin(^FCE.BranchI("ATMIndex")),$increment(^IRIS.TempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,1))) }
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),3),$SortBegin(^FCE.BranchI("AddressIndex")),$increment(^IRIS.TempIndexBuild(pJob,2)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,2))) }
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),4),$SortBegin(^FCE.BranchI("CBIndex")),$increment(^IRIS.TempIndexBuild(pJob,3)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,3))) }
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),6),$SortBegin(^FCE.BranchI("PhoneIndex")),$increment(^IRIS.TempIndexBuild(pJob,4)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,4))) }
		Set tPrefetch=$prefetchon(^FCE.BranchD)
		If 'pFirstRange||('$data(^FCE.BranchD(pStartID))) { Set tID=$order(^FCE.BranchD(pStartID)) } Else { Set tID=pStartID }
		Set tCurrentChunk=tID\64000+1
		Do ..NotesiFindSegmentInitialize(.%tIndexBuffer,pStartID,pEndID)
		While tID'="",(pEndID="")||(tID']]pEndID) {
			If pLockFlag=2 {
				Set tSC = ..%LockId(tID,1)
				If (''tSC) {
					If $data(^FCE.BranchD(tID)) {
						If (tID\64000+1)'=tCurrentChunk { set tCurrentChunk=(tID\64000+1) kill tVectorBuffer }
						Set tSC=..%FileIndices(tID,.pIndexHandle,.tVectorBuffer)
					}
					Do ..%UnlockId(tID,1,1)
				}
				If ('tSC) Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
				Set tID=$order(^FCE.BranchD(tID))
				Continue
			}
			Set tChunk=tID\64000+1
			If tChunk'=tCurrentChunk {
				Do BitMerge^%occLibrary($name(^FCE.BranchI("$Branch")),$name(%tIndexBuffer(2)))
				kill %tIndexBuffer(2)
				kill tVectorBuffer
				Set tCurrentChunk=tChunk
			}
			Set tSC=..%FileIndicesBuffered(tID,.pIndexHandle,.%tIndexBuffer,.tVectorBuffer)
			If ('tSC) {
				Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
			}
			Set tID=$order(^FCE.BranchD(tID))
		}
		Do BitMerge^%occLibrary($name(^FCE.BranchI("$Branch")),$name(%tIndexBuffer(2)))
		Do ..NotesiFindSegmentFinalize(.%tIndexBuffer,pStartID,pEndID)
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),2) {
		If $increment(^IRIS.TempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^FCE.BranchI("ATMIndex")) {}
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),3) {
		If $increment(^IRIS.TempIndexBuild(pJob,2),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,2))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,2))) } Catch {} }
		If $SortEnd(^FCE.BranchI("AddressIndex")) {}
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),4) {
		If $increment(^IRIS.TempIndexBuild(pJob,3),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,3))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,3))) } Catch {} }
		If $SortEnd(^FCE.BranchI("CBIndex")) {}
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),6) {
		If $increment(^IRIS.TempIndexBuild(pJob,4),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,4))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,4))) } Catch {} }
		If $SortEnd(^FCE.BranchI("PhoneIndex")) {}
	}
	Set:$Get(tPrefetch) tPrefetch=$prefetchoff(^FCE.BranchD)
	Quit tStatus }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) [ SQLCODE,pID,tCol1,tCol2 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tCol1,tCol2 
	set tStatus = ..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC) if ('tStatus) { set pErrorInfo = $Listbuild(pID) quit tStatus } if tMSTC '= $classname() { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) }
	set tStatus = 1, pErrorInfo = ""
	 ;---&sql(select Address,Phone INTO :tCol1,:tCol2 FROM FCE.Branch WHERE %ID = :pID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, pID, tCol1, tCol2
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5CesARVbxpdhLW1LgvXbAmUtmk","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E5CesARVbxpdhLW1LgvXbAmUtmk"))||($ze["<ZSQLU>") { d %0dsqlA } else { throw } }
	if 'SQLCODE {
		if ((pConstraintList="")||($lf(pConstraintList,"AddressIndex"))) && ('..AddressIndexCheckUnique(pID,tCol1)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5808,$classname()_".AddressIndex"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5808,$classname()_".AddressIndex"))) }
		if ((pConstraintList="")||($lf(pConstraintList,"PhoneIndex"))) && ('..PhoneIndexCheckUnique(pID,tCol2)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5808,$classname()_".PhoneIndex"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5808,$classname()_".PhoneIndex"))) }
		if ((pConstraintList="")||($lf(pConstraintList,"RealEstateFK"))) && ('..RealEstateFKCheck(tCol1)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5829,$classname()_".RealEstateFK","CHECK"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5829,$classname()_".RealEstateFK","CHECK"))) }
		set pErrorInfo = $Listbuild(pID,tCol1,tCol2)
	} elseif SQLCODE < 0 { set tStatus = $$Error^%apiOBJ(5540,SQLCODE,$Get(%msg)) }
	quit tStatus }
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT Address , Phone INTO :tCol1 , :tCol2 FROM FCE . Branch WHERE %ID = :pID"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set tCol1="",tCol2="" } catch {} }
	return
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM %NOPARALLEL FCE.Branch)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, tID
	 
	 ;---&sql(open ext)
	if $g(%ext0277)'="" { s SQLCODE=-101 } else { try { s %ext0277="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ee3SJnB4wccR6vSJi7YDYUji2Wm",%ext0277=$classmethod(%ext0277,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%ext0277)),$ze'["<ZSQLU>" { throw } } if '$isobject(%ext0277) { s %ext0277=$$%0dsqlC() } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0277))'=1 { s SQLCODE=-102 } else { do %ext0277.FET() }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0277)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0277 }
	}
	quit tStatusAll }
 q
%0dsqlC()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM %NOPARALLEL FCE . Branch"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),",0,ext,","FCE.Branch.CLS",1)
	i $g(SQLCODE) { s tID="" }
	q %xxoref
%ComposeOid(id) methodimpl {
	set tCLASSNAME = $listget($g(^FCE.BranchD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","FCE.Branch")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) methodimpl {
	Set i%%Concurrency=$zu(115,10),i%NationalCurrency="USD",i%Orders=$listbuild("FCE.CurrencyOrder","Branch",+$this,"many",1,1)
	Set m%ATMs=0,M%ATMs=0,m%CurrencyBalances=0,M%CurrencyBalances=0,m%Orders=0,M%Orders=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) methodimpl {
	Set i%ATMs="",r%ATMs=""
	Set i%CurrencyBalances="",r%CurrencyBalances=""
	If i%Notes'=""||($isobject(r%Notes)=1) Set r%Notes=..Notes.%ConstructClone(deep,.cloned),i%Notes=""
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..Address)=1 Set r%Address=r%Address.%ConstructClone(1,.cloned),i%Address=""
		If $isobject(..Orders)=1 {
			If ..Orders.NotLoaded Do ..Orders.Load()
			Set tmprel=r%Orders,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%Orders=r%Orders.%ConstructClone(1,.cloned),i%Orders=""
			Set tmprel.InverseReference=tmpref
		}
	} Else {
		If ..Orders'="" {
			If deep=-1 {
				Set r%Orders="",i%Orders=$listbuild("FCE.CurrencyOrder","Branch",+$this,"many",1,1)
			} Else {
				If ..Orders.NotLoaded Do ..Orders.Load()
				Set tmprel=r%Orders,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%Orders=r%Orders.%ConstructClone(0,.cloned),i%Orders=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%Delete(oid="",concurrency=-1) methodimpl {
	RETURN:oid="" $$Error^%apiOBJ(5813,$classname())
	set id=$listget(oid) RETURN:id="" $$Error^%apiOBJ(5812,$classname())
	set traninit=0
	set $zt="%DeleteERR"
	if concurrency = -1 { set concurrency=$zu(115,10) }
	if (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) { RETURN $$Error^%apiOBJ(5828) }
	set class=$listget(oid,2)
	if class="" { set sc=..%OnDetermineClass(oid,.class) RETURN:('sc) sc set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } else { set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
	if $classname()'=class { RETURN $classmethod(class,"%Delete",oid,concurrency) }
	if +$g(%objtxSTATUS)=0 { set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	set sc=##class(FCE.CurrencyOrder).BranchOnDelete(id,concurrency) goto:('sc) %DeleteEnd
	set oref=..%Open(oid,concurrency) if oref="" { set sc=$$Error^%apiOBJ(5810,$classname(),$listget(oid)) goto %DeleteEnd }
	set stream=oref.NotesGetObject() if stream'="" { set ^||%isc.strd($i(^||%isc.strd))=$lb(stream,"%Stream.GlobalCharacter") }
	set oref=""
	set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } if $isobject(oref)=1 { do oref.%DeleteOID() }
	set sc=..%DeleteData(id,concurrency)
	if (''sc) {
		set tPtr = "" for { set tPtr=$order(^||%isc.strd(tPtr),1,tStreamData) quit:tPtr=""  set stream=$li(tStreamData,1),cls=$li(tStreamData,2),sc=$classmethod(cls,"%Delete",stream,concurrency) quit:('sc) }
		kill ^||%isc.strd
	}
%DeleteEnd if ('sc) { kill ^||%isc.strd } if traninit { if (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } } else { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
	RETURN sc
%DeleteERR	set $zt="",sc=$$Error^%apiOBJ(5002,$ZE)
	goto %DeleteEnd }
%DeleteData(id,concurrency) methodimpl {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^FCE.BranchD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^FCE.BranchD(id))) {
		Set bsv0N1=$G(^FCE.BranchD(id))
		Set bsv0N2=$zu(28,$listget(bsv0N1,2),7,32768)
		Set bsv0N3=$listget(bsv0N1,3)
		Set bsv0N4=$s(bsv0N3'="":bsv0N3,1:-1E14)
		Set pidchunk=id\64000+1,pidoffset=id#64000+1
		If concurrency, ('$g(%0CacheLock($classname(),"E"))) && ($listget(bsv0N1,3)'="") {
			Lock +^FCE.BranchI("AddressIndex",bsv0N4):$zu(115,4)
			If $test {
				Lock -^FCE.BranchI("AddressIndex",bsv0N4)
			} Else {
				Set sc = $$Error^%apiOBJ(5803,$classname())
				Goto DeleteDataEXIT
			}
		}
		If concurrency, ('$g(%0CacheLock($classname(),"E"))) {
			Lock +^FCE.BranchI("PhoneIndex",bsv0N2):$zu(115,4)
			If $test {
				Lock -^FCE.BranchI("PhoneIndex",bsv0N2)
			} Else {
				Set sc = $$Error^%apiOBJ(5803,$classname())
				Goto DeleteDataEXIT
			}
		}
		If ($listget(bsv0N1,3)'=""), '..RealEstateFKCheck($listget(bsv0N1,3),1) {
			Set sc=$$Error^%apiOBJ(5795,$classname()_".RealEstateFK","DELETE")
			Goto DeleteDataEXIT
		}
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"AddressIndex","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"AddressIndex","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",$listget(bsv0N1,3))
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"PhoneIndex","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"PhoneIndex","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",$listget(bsv0N1,2))
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		set bsv14N1=$ListLength($listget(bsv0N1,7)) set:bsv14N1'>0 bsv14N1=1 for bsv10N1 = 1:1:bsv14N1 {
			Kill ^FCE.BranchI("ATMIndex",$zu(28,$lg($listget(bsv0N1,7),bsv10N1),7,32768),id)
		}
		set bsv10N2 = $Order(^FCE.BranchD(id,"CurrencyBalances",""))
		While bsv10N2 '= "" {
			Kill ^FCE.BranchI("CBIndex",bsv10N2,id)
			set bsv10N2 = $Order(^FCE.BranchD(id,"CurrencyBalances",bsv10N2))
		}
		Set bsv0N5=$zu(28,$listget(bsv0N1,2),7,32768)
		Set bsv0N6=$listget(bsv0N1,3)
		Set bsv0N7=$s(bsv0N6'="":bsv0N6,1:-1E14)
		Set $bit(^FCE.BranchI("$Branch",pidchunk),pidoffset)=0
		Kill ^FCE.BranchI("AddressIndex",bsv0N7,id)
		try { do ..NotesiFindDeleteIndex(id,$listget(bsv0N1,8)) } catch tException { set sc=tException.AsStatus() goto DeleteDataEXIT }
		Kill ^FCE.BranchI("PhoneIndex",bsv0N5,id)
		Kill ^FCE.BranchD(id)
		Kill ^FCE.BranchD(id,"CurrencyBalances")
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^FCE.BranchD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Destruct() methodimpl {
	Kill %objtxLIST(+$this),%objtxOIDASSIGNED(+$this),%objtxOIDUNASSIGNED(+$this),%objtxMODIFIED(+$this)
	If $get(i%"%%OID")'="" {
		If i%%Concurrency=3 { Do ..%ReleaseLock("s") } ElseIf i%%Concurrency=4 { Do ..%ReleaseLock("e") }
		Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"=""
	}
	If $isobject($get(r%ATMs))=1,$zobjcnt(r%ATMs)>1 Do r%ATMs.%Disconnect()
	If $isobject($get(r%CurrencyBalances))=1,$zobjcnt(r%CurrencyBalances)>1 Do r%CurrencyBalances.%Disconnect()
	Quit 1 }
%Exists(oid="") methodimpl {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) methodimpl {
	Try { set tExists = $s(id="":0,$d(^FCE.BranchD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0,pVectorBuffer) methodimpl {
	try {
		Set bsv0N2=$Get(^FCE.BranchD(id))
		Set bsv0N3=$listget(bsv0N2,1)
		if bsv0N3'="" {
			set bsv0N1=$piece(bsv0N3,"~",*-1)
			set:bsv0N1'["." bsv0N1="User."_bsv0N1
			if bsv0N1'="" { RETURN $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) }
		}
		Set bsv0N4=$listget(bsv0N2,7)
		Set pidchunk=id\64000+1,pidoffset=id#64000+1
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),1)=1) {
			Set $bit(^FCE.BranchI("$Branch",pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),2)=1) {
			set bsv18N1=$ListLength(bsv0N4) set:bsv18N1'>0 bsv18N1=1 for bsv17N1 = 1:1:bsv18N1 {
				Set bsv0N5=$zu(28,$lg(bsv0N4,bsv17N1),7,32768)
				Set ^FCE.BranchI("ATMIndex",bsv0N5,id)=$listget(bsv0N2,1)
			}
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),3)=1) {
			Set bsv0N6=$listget(bsv0N2,3)
			Set bsv0N7=$s(bsv0N6'="":bsv0N6,1:-1E14)
			Set ^FCE.BranchI("AddressIndex",bsv0N7,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),4)=1) {
			set bsv27N1 = $Order(^FCE.BranchD(id,"CurrencyBalances",""))
			While bsv27N1 '= "" {
				Set ^FCE.BranchI("CBIndex",bsv27N1,id)=$listget(bsv0N2,1)
				set bsv27N1 = $Order(^FCE.BranchD(id,"CurrencyBalances",bsv27N1))
			}
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),5)=1) {
			try { do ..NotesiFindInsertIndex(id,$listget(bsv0N2,8),$listget(bsv0N2,1)) } catch tException { set sc=tException.AsStatus(),$ze="" RETURN sc }
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),6)=1) {
			Set bsv0N8=$zu(28,$listget(bsv0N2,2),7,32768)
			Set ^FCE.BranchI("PhoneIndex",bsv0N8,id)=$listget(bsv0N2,1)
		}
	}
	catch {
		RETURN $$Error^%apiOBJ(5002,$ze)
	}
	RETURN 1
getbuffered(glo,&vectorbuffer,id)
	if '$d(vectorbuffer(id)) { set vectorbuffer(id)=@glo }
	RETURN vectorbuffer(id) }
%FileIndicesBuffered(id,pIndexHandle=0,pIndexBuffer="",pVectorBuffer) methodimpl {
	try {
		Set bsv0N2=$Get(^FCE.BranchD(id))
		Set bsv0N3=$listget(bsv0N2,1)
		If bsv0N3'="" {
			Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
			Set:bsv0N1'["." bsv0N1="User."_bsv0N1
			If bsv0N1'="" {
				RETURN $classmethod(bsv0N1,"%FileIndicesBuffered",id,.pIndexHandle,.pIndexBuffer)
			}
		}
		Set bsv0N4=$listget(bsv0N2,7)
		Set pidchunk=id\64000+1,pidoffset=id#64000+1
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),1)=1) {
			Set $bit(pIndexBuffer(2,pidchunk),pidoffset)=1
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),2)=1) {
			set bsv18N1=$ListLength(bsv0N4) set:bsv18N1'>0 bsv18N1=1 for bsv17N1 = 1:1:bsv18N1 {
				Set bsv0N5=$zu(28,$lg(bsv0N4,bsv17N1),7,32768)
				Set ^FCE.BranchI("ATMIndex",bsv0N5,id)=$listget(bsv0N2,1)
			}
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),3)=1) {
			Set bsv0N6=$listget(bsv0N2,3)
			Set bsv0N7=$s(bsv0N6'="":bsv0N6,1:-1E14)
			Set ^FCE.BranchI("AddressIndex",bsv0N7,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),4)=1) {
			set bsv27N1 = $Order(^FCE.BranchD(id,"CurrencyBalances",""))
			While bsv27N1 '= "" {
				Set ^FCE.BranchI("CBIndex",bsv27N1,id)=$listget(bsv0N2,1)
				set bsv27N1 = $Order(^FCE.BranchD(id,"CurrencyBalances",bsv27N1))
			}
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),5)=1) {
			try { do ..NotesiFindSegmentInsert(.pIndexBuffer,id,$listget(bsv0N2,8),$listget(bsv0N2,1)) } catch tException { set sc=tException.AsStatus(),$ze="" RETURN sc }
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Branch")),6)=1) {
			Set bsv0N8=$zu(28,$listget(bsv0N2,2),7,32768)
			Set ^FCE.BranchI("PhoneIndex",bsv0N8,id)=$listget(bsv0N2,1)
		}
	}
	catch {
		RETURN $$Error^%apiOBJ(5002,$ze)
	}
	RETURN 1
getbuffered(glo,&vectorbuffer,id)
	if '$d(vectorbuffer(id)) { set vectorbuffer(id)=@glo }
	RETURN vectorbuffer(id) }
%InsertBatch(objects,concurrency=0,useTransactions=0) methodimpl {
 QUIT $$Error^%apiOBJ(5758,$classname()_"::%InsertBatch") }
%JSONExportInternal() methodimpl {
  Set sc=1
  Write "{" Set sep=""
  Set value=..Phone
  If value'="" {
    Write sep_"""Phone"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Address
  If value'="" {
    Write sep_"""Address"":"
    Set sc=value.%JSONExportInternal() If ('sc) Goto %JSONExportExit
    Set $extract(sep,1)=","
  }
  Set value=..Opens
  If value'="" {
    Write sep_"""Opens"":"""_$select(value="":"",1:$ztime(value,1,$l($p(value,".",2)),,1)_"Z")_""""
    Set $extract(sep,1)=","
  }
  Set value=..Closes
  If value'="" {
    Write sep_"""Closes"":"""_$select(value="":"",1:$ztime(value,1,$l($p(value,".",2)),,1)_"Z")_""""
    Set $extract(sep,1)=","
  }
  Set value=..NationalCurrency
  If value'="" {
    Write sep_"""NationalCurrency"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
    Set aval=..CurrencyBalances
  If aval.Count()>0 {
    Write sep_"""CurrencyBalances"":"
    Set sep="{"
    Set aval=..CurrencyBalances,k=""
    For {
      Set value=aval.GetNext(.k) If k="" Quit
      If value'="" {
        Write sep_""""_k_""":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
      } Else {
        Write sep_""""_k_""":null"
      }
      Set $extract(sep,1)=","
    }
    Write "}"
  }
    Set aval=..ATMs
  If aval.Count()>0 {
    Write sep_"""ATMs"":"
    Set sep="["
    Set k="" For {
      Set value=aval.GetNext(.k) If k="" Quit
        If value'="" {
          Write sep_""""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
        } Else {
          Write sep_"null"
        }
        Set $extract(sep,1)=","
    }
    Write "]"
  }
  Set value=..Notes
  If (value'="")&&'value.IsNull() {
    Write sep_"""Notes"":"
    Write """" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { Write $zcvt(value.Read(,.sc),"O","JSON") If ('sc) Goto %JSONExportExit }} Write """"
    Set $extract(sep,1)=","
  }
  Write "}"
%JSONExportExit Quit sc }
%JSONExportToStringInternal() methodimpl {
  Set sc=1
  Set %export=%export_"{" Set sep=""
  Set value=..Phone
  If value'="" {
    Set %export=%export_sep_"""Phone"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..Address
  If value'="" {
    Set %export=%export_sep_"""Address"":"
    Set sc=value.%JSONExportToStringInternal() If ('sc) Goto %JSONExportExitToString
    Set $extract(sep,1)=","
  }
  Set value=..Opens
  If value'="" {
    Set %export=%export_sep_"""Opens"":"""_$select(value="":"",1:$ztime(value,1,$l($p(value,".",2)),,1)_"Z")_""""
    Set $extract(sep,1)=","
  }
  Set value=..Closes
  If value'="" {
    Set %export=%export_sep_"""Closes"":"""_$select(value="":"",1:$ztime(value,1,$l($p(value,".",2)),,1)_"Z")_""""
    Set $extract(sep,1)=","
  }
  Set value=..NationalCurrency
  If value'="" {
    Set %export=%export_sep_"""NationalCurrency"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
    Set aval=..CurrencyBalances
  If aval.Count()>0 {
    Set %export=%export_sep_"""CurrencyBalances"":"
    Set sep="{"
    Set aval=..CurrencyBalances,k=""
    For {
      Set value=aval.GetNext(.k) If k="" Quit
      If value'="" {
        Set %export=%export_sep_""""_k_""":"_$select($extract(value)=".":"0"_value,$extract(value,1,2)="-.":"-0."_$extract(value,3,*),1:value)
      } Else {
        Set %export=%export_sep_""""_k_""":null"
      }
      Set $extract(sep,1)=","
    }
    Set %export=%export_"}"
  }
    Set aval=..ATMs
  If aval.Count()>0 {
    Set %export=%export_sep_"""ATMs"":"
    Set sep="["
    Set k="" For {
      Set value=aval.GetNext(.k) If k="" Quit
        If value'="" {
          Set %export=%export_sep_""""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
        } Else {
          Set %export=%export_sep_"null"
        }
        Set $extract(sep,1)=","
    }
    Set %export=%export_"]"
  }
  Set value=..Notes
  If (value'="")&&'value.IsNull() {
    Set %export=%export_sep_"""Notes"":"
    Set %export=%export_"""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { Set %export=%export_$zcvt(value.Read(,.sc),"O","JSON") If ('sc) Goto %JSONExportExitToString }} Set %export=%export_""""
    Set $extract(sep,1)=","
  }
  Set %export=%export_"}"
%JSONExportExitToString Quit sc }
%JSONImportInternal() methodimpl {
  Set sc=1
  Set testInvalidField=1
  Set proplist("Phone")=""
  Set field="Phone" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Goto %JSONImportRequired
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Phone
      If ('$s(($l(data)'>50)&&(data?3n1"-"3n1"-"4n):1,$l(data)>50:$$Error^%apiOBJ(7201,data,50),1:$$Error^%apiOBJ(7209,data,"3n1""-""3n1""-""4n"))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..Phone=data
    }
  } Else { Goto %JSONImportRequired }
  Set proplist("Address")=""
  Set field="Address" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Address=""
    } Else {
      If jsontype="object" {
        Set newobj=##class(FCE.RealEstate).%JSONNew(%JSONObject,$this)
        Set saveJSON=%JSONObject
        Set %JSONObject=%JSONObject.Address
        Set sc=newobj.%JSONImportInternal()
        Set %JSONObject=saveJSON
        If ('sc) Goto %JSONImportExit
        Set ..Address=newobj
      } ElseIf jsontype="oref" {
        Set ..Address=%JSONObject.Address
      } Else { Goto %JSONImportError }
    }
  }
  Set proplist("Opens")=""
  Set field="Opens" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Opens=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Opens
      Set data=..OpensXSDToLogical(data) Goto:data="" %JSONImportError If ('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,,$ztimeh("6:00am"),$ztimeh("12:00n")):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<$ztimeh("6:00am"):$$Error^%apiOBJ(7204,data,$ztimeh("6:00am")),1:$$Error^%apiOBJ(7203,+data,$ztimeh("12:00n")))) Goto %JSONImportError
      Set ..Opens=data
    }
  }
  Set proplist("Closes")=""
  Set field="Closes" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Closes=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.Closes
      Set data=..ClosesXSDToLogical(data) Goto:data="" %JSONImportError If ('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,,$ztimeh("1:00pm"),$ztimeh("10:00pm")):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<$ztimeh("1:00pm"):$$Error^%apiOBJ(7204,data,$ztimeh("1:00pm")),1:$$Error^%apiOBJ(7203,+data,$ztimeh("10:00pm")))) Goto %JSONImportError
      Set ..Closes=data
    }
  }
  Set proplist("NationalCurrency")=""
  Set field="NationalCurrency" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..NationalCurrency=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.NationalCurrency
      If ('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..NationalCurrency=data
    }
  }
  Set proplist("DurationOpen")=""
  Set proplist("CurrencyBalances")=""
  Set field="CurrencyBalances" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..CurrencyBalances=""
    } Else {
      If jsontype'="object" Goto %JSONImportError
      Set data=%JSONObject.CurrencyBalances
      Set iterator=data.%GetIterator()
      While iterator.%GetNext(.index,.value) {
        Set jsontype=$CASE(data.%GetTypeCodeOf(index),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
        If jsontype="null" {
          Do ..CurrencyBalances.SetAt("",index)
        } Else {
          If jsontype'="number" Goto %JSONImportError
          Set value=$inumber(value,"LO","") Goto:value="" %JSONImportError If ('$select($zu(115,13)&&(value=$c(0)):1,$isvalidnum(value,2,0,1000000):1,'$isvalidnum(value):$$Error^%apiOBJ(7207,value),value<0:$$Error^%apiOBJ(7204,value,0),1:$$Error^%apiOBJ(7203,value,1000000))) Goto %JSONImportError
          Do ..CurrencyBalances.SetAt(value,index)
        }
      }}
  }
  Set proplist("ATMs")=""
  Set field="ATMs" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..ATMs=""
    } Else {
      If jsontype'="array" Goto %JSONImportError
      Set data=%JSONObject.ATMs
      For index=0:1:data.%Size()-1 {
        Set jsontype=$CASE(data.%GetTypeCodeOf(index),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
        If jsontype="null" {
          Do ..ATMs.Insert("")
        } Else {
          Set value=data.%Get(index)
          If jsontype'="string" Goto %JSONImportError
          If ('$s(($l(value)'>50):1,1:$$Error^%apiOBJ(7201,value,50))) Goto %JSONImportError
          If value="" Set value=$c(0)
          Do ..ATMs.Insert(value)
        }
      }}
  }
  Set proplist("Orders")=""
  Set proplist("Notes")=""
  Set field="Notes" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"string",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If (jsontype="string")&&(%JSONObject.%Get(field)="") Set jsontype="null"
    If jsontype="null" {
      Set ..Notes=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set tStream = %JSONObject.%Get("Notes",,"stream")
      Set stream=..Notes Do stream.Rewind()
      If tStream.Size>0 { 
        Set sc=stream.CopyFrom(tStream) If ('sc) Goto %JSONImportExit
      }
      Set %JSONObject.Notes = ""
      Do %JSONObject.%Remove("Notes")
    }
  }
  If $get(testInvalidField) {
    Set invalid=0,iterator=%JSONObject.%GetIterator()
    While iterator.%GetNext(.key,.value) { If $data(proplist(key))=0 Set invalid=1 Quit  }
    If invalid Quit $$Error^%apiOBJ(9404,key,$select(%mappingName="":"class base",1:%mappingName))
  }
%JSONImportExit Quit sc
%JSONImportError Quit $$Error^%apiOBJ(9406,field,$select(%mappingName="":"class base",1:%mappingName))
%JSONImportRequired Quit $$Error^%apiOBJ(9405,field,$select(%mappingName="":"class base",1:%mappingName)) }
%JSONNew(dynamicObject,containerOref="") methodimpl {
  Quit ##class(FCE.Branch).%New()
}
%KillExtentData(killstreams=0) methodimpl
	Set $sequence(^FCE.BranchD)=""
	If killstreams Set $sequence(^FCE.BranchS)="" Kill ^FCE.BranchS
	Kill ^FCE.BranchD
	Quit 1
%LoadData(id) methodimpl {
	New %s1,%s3
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^FCE.BranchD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>0 {
		Lock +(^FCE.BranchD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	Set sc=""
	If $d(^FCE.BranchD(id)) {
		Set sc=1
		Set %s3=$g(^FCE.BranchD(id))
		S i%Phone=$lg(%s3,2),i%Address=$lg(%s3,3),i%Opens=$lg(%s3,4),i%Closes=$lg(%s3,5),i%NationalCurrency=$lg(%s3,6),%s1=$lg(%s3,7),i%Notes=$lg(%s3,8)
		Set ptr=0,index=0
		While $listnext(%s1,ptr,element) {
			Set index=index+1,i%ATMs(index)=element
		}
		Kill i%CurrencyBalances Merge i%CurrencyBalances=^FCE.BranchD(id,"CurrencyBalances")
	} Else {
		do init
	}
	If i%%Concurrency=2||(i%%Concurrency=1) {
		Lock -(^FCE.BranchD(id)#"SIE")
	}
	s:$ze="" $ze=userze
	RETURN $s((''sc):1,1:$$Error^%apiOBJ(5809,$classname(),id))
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^FCE.BranchD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%ATMs="",i%Address="",i%Closes="",i%CurrencyBalances="",i%NationalCurrency="",i%Notes="",i%Opens="",i%Phone=""
	quit }
%LoadDataFromMemory(id,objstate,obj) methodimpl {
	New %s1,%s3
	Set sc=""
	If $d(objstate(id)) {
		Set sc=1
		Set %s3=$g(objstate(id))
		S i%Phone=$lg(%s3,2),i%Address=$lg(%s3,3),i%Opens=$lg(%s3,4),i%Closes=$lg(%s3,5),i%NationalCurrency=$lg(%s3,6),%s1=$lg(%s3,7),i%Notes=$lg(%s3,8)
		Set ptr=0,index=0
		While $listnext(%s1,ptr,element) {
			Set index=index+1,i%ATMs(index)=element
		}
		Kill i%CurrencyBalances Merge i%CurrencyBalances=objstate(id,"CurrencyBalances")
	} Else {
		set i%ATMs="",i%Address="",i%Closes="",i%CurrencyBalances="",i%NationalCurrency="",i%Notes="",i%Opens="",i%Phone=""
	}
	Quit:sc'="" sc
	Quit $$Error^%apiOBJ(5809,$classname(),id) }
%LoadInit(oid="",concurrency="",reset=0) methodimpl {
	Set:concurrency'="" i%%Concurrency=concurrency
	If reset {
		Kill r%ATMs,i%ATMs,i%Address,r%CurrencyBalances,i%CurrencyBalances,i%Notes,i%Orders
	}
	Set i%ATMs="",r%ATMs="",r%Address="",i%CurrencyBalances="",r%CurrencyBalances="",r%Notes="",i%Orders=$listbuild("FCE.CurrencyOrder","Branch",+$this,"many",1,1),r%Orders=""
	If 'reset { Set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } Set $zobjoid("",$listget(oid),,sfn)=$this,i%"%%OID"=oid }
	Quit 1 }
%LockExtent(shared=0) methodimpl {
	If shared {
		Lock +(^FCE.BranchD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^FCE.BranchD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) methodimpl { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^FCE.BranchD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^FCE.BranchD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() methodimpl {
	If '$system.CLS.GetModified() Quit 1
	If m%ATMs Set key="" For  Set key=$order(i%ATMs(key),1,data) Quit:key=""  Set:data'="" i%ATMs(key)=..ATMsNormalize(data)
	If m%Closes Set:i%Closes'="" i%Closes=(..ClosesNormalize(i%Closes))
	If m%CurrencyBalances Set key="" For  Set key=$order(i%CurrencyBalances(key),1,data) Quit:key=""  Set:data'="" i%CurrencyBalances(key)=..CurrencyBalancesNormalize(data)
	If m%NationalCurrency Set:i%NationalCurrency'="" i%NationalCurrency=(..NationalCurrencyNormalize(i%NationalCurrency))
	If m%Opens Set:i%Opens'="" i%Opens=(..OpensNormalize(i%Opens))
	If m%Phone Set:i%Phone'="" i%Phone=(..PhoneNormalize(i%Phone))
	Quit 1 }
%ObjectModified() methodimpl {
	If $system.CLS.GetModified() Quit 1
	If r%Notes'="",..Notes.%ObjectModified() Quit 1
	Quit 0 }
%OnDetermineClass(oid,class) methodimpl {
	Set id=$listget($get(oid))
	RETURN:id="" $$Error^%apiOBJ(5812)
	set idclass=$lg($get(^FCE.BranchD(id)),1)
	if idclass="" { set class="FCE.Branch" RETURN 1 }
	set class=$piece(idclass,"~",*-1)
	set:class'["." class="User."_class
	RETURN 1 }
%OnValidateObject() methodimpl {
    // convert currency abbreviations to $list format
    set abbreviations = ##class(FCE.CurrencyName).#VALUELIST
	set validKeys = ##class(FCE.Currency).ConvertCurrenciestoListString(abbreviations)
    // loop through keys until either reaching end or key is not in validKeys
    set key = ""
    do { do ..CurrencyBalances.GetNext(.key) }
    while (key '= "") && ($listfind(validKeys, key))
    if (key = "") { return 1 }
    else { return $$Error^%apiOBJ(5001, "Invalid key: " _ key) } }
%PhysicalAddress(id,paddr) methodimpl
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^FCE.BranchD(id)),$classname(),"IDKEY","listnode",id)
	s paddr(2)=$lb($Name(^FCE.BranchD(id,"CurrencyBalances")),$classname(),"IDKEY","subnode",id)
	s paddr=2
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") methodimpl {
	Set locked=0,sc=1
	Try {
		if ($listlength(idxlist)=1)&&($listget(idxlist,1)="") { return 1 }
		Set tPtr=0
		While $listnext(idxlist,tPtr,tIndex) {
			continue:tIndex=""
			If '($d(^oddCOM($classname(),"i",tIndex))) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Return sc }
		If lockExtent {
			Set sc=..%LockExtent(0)
			If ('sc) { Return sc }
			Set locked=1
		}
		If $system.CLS.IsMthd("%OnBeforePurgeIndices") {
			Set sc=..%OnBeforePurgeIndices(.idxlist)
			If (('sc))||(($listlength(idxlist)=1)&&($listget(idxlist,1)="")) {
				If locked {
					Do ..%SQLReleaseTableLock(0)
				}
				Return sc
			}
		}
		if ((idxlist="")||($listfind(idxlist,"$Branch"))),'$listfind(pIgnoreIndexList,"$Branch") {
			kill ^FCE.BranchI("$Branch")
		}
		if ((idxlist="")||($listfind(idxlist,"ATMIndex"))),'$listfind(pIgnoreIndexList,"ATMIndex") {
			kill ^FCE.BranchI("ATMIndex")
		}
		if ((idxlist="")||($listfind(idxlist,"AddressIndex"))),'$listfind(pIgnoreIndexList,"AddressIndex") {
			kill ^FCE.BranchI("AddressIndex")
		}
		if ((idxlist="")||($listfind(idxlist,"CBIndex"))),'$listfind(pIgnoreIndexList,"CBIndex") {
			kill ^FCE.BranchI("CBIndex")
		}
		if ((idxlist="")||($listfind(idxlist,"PhoneIndex"))),'$listfind(pIgnoreIndexList,"PhoneIndex") {
			kill ^FCE.BranchI("PhoneIndex")
		}
		if ((idxlist="")||($listfind(idxlist,"NotesiFind"))),'$listfind(pIgnoreIndexList,"NotesiFind") {
			Try {
				Do ..NotesiFindPurgeIndex()
			} Catch tException {
				Set sc=tException.AsStatus(),$ZE=""
				If locked { Do ..%UnlockExtent(0) }
				Return sc
			}
		}
		Set sc=1
		If $system.CLS.IsMthd("%OnAfterPurgeIndices") { Set sc=..%OnAfterPurgeIndices(.idxlist) }
	} Catch tException {
		Set sc=tException.AsStatus(),$ZE=""
	}
	If locked { Do ..%UnlockExtent(0) }
	Quit sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0) methodimpl
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^FCE.BranchD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("FCE.Branch","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^FCE.BranchD(%d(1))),"FCE.Branch",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="") methodimpl
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^FCE.BranchD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"FCE"_"."_"Branch") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"FCE"_"."_"Branch") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
	RETURN ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="") methodimpl
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.Branch'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.Branch'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.Branch' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.Branch' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %i=%d(1)\64000+1,%o=%d(1)#64000+1
		if ((pIndices="")||($lf(pIndices,"$Branch"))),'$listfind(pIgnoreIndexList,"$Branch") {
			if pActions["P" {
				set $bit(^FCE.BranchI("$Branch",%i),%o)=0
			}
			if pActions["B" {
				set $bit(^FCE.BranchI("$Branch",%i),%o)=1
			}
		}
		if ((pIndices="")||($lf(pIndices,"ATMIndex"))),'$listfind(pIgnoreIndexList,"ATMIndex") {
			if pActions["P" {
				set sn(2)=%d(1) s:%e(2)="" %nc(2)=1,%e(2)=$lb("") f %pos(1)=1:1:$ll(%e(2)) { s sn(1)=$zu(28,$li(%e(2),%pos(1)),7) k ^FCE.BranchI("ATMIndex",sn(1),sn(2)) } s:$g(%nc(2)) %nc(2)=0,%e(2)="" 
			}
			if pActions["B" {
				set sn(2)=%d(1) s:%d(2)="" %nc(2)=1,%d(2)=$lb("") f %pos(1)=1:1:$ll(%d(2)) { s sn(1)=$zu(28,$li(%d(2),%pos(1)),7) set ^FCE.BranchI("ATMIndex",sn(1),sn(2))=%d(10) } s:$g(%nc(2)) %nc(2)=0,%d(2)="" 
			}
		}
		if ((pIndices="")||($lf(pIndices,"AddressIndex"))),'$listfind(pIgnoreIndexList,"AddressIndex") {
			if pActions["P" {
				set sn(1)=%e(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^FCE.BranchI("AddressIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^FCE.BranchI("AddressIndex",sn(1),sn(2))=%d(10)
			}
		}
		if ((pIndices="")||($lf(pIndices,"NotesiFind"))),'$listfind(pIgnoreIndexList,"NotesiFind") {
			if pActions["P" {
				try { do ..NotesiFindDeleteIndex(%d(1),%e(7)) } catch tException { set sqlcode=tException.AsSQLCODE(),%msg=tException.AsSQLMessage() do ..%SQLEExit() QUIT  } if sqlcode set SQLCODE=sqlcode QUIT
			}
			if pActions["B" {
				try { do ..NotesiFindInsertIndex(%d(1),%d(7),%d(10)) } catch tException { set sqlcode=tException.AsSQLCODE(),%msg=tException.AsSQLMessage() do ..%SQLEExit() } if sqlcode set SQLCODE=sqlcode RETURN ""
			}
		}
		if ((pIndices="")||($lf(pIndices,"PhoneIndex"))),'$listfind(pIgnoreIndexList,"PhoneIndex") {
			if pActions["P" {
				set sn(1)=$zu(28,%e(9),7) set sn(2)=%d(1) k ^FCE.BranchI("PhoneIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=$zu(28,%d(9),7) set sn(2)=%d(1) set ^FCE.BranchI("PhoneIndex",sn(1),sn(2))=%d(10)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUniqueIndices(pIndices,pOK) methodimpl
	new d,g,n,o set d=0
	if $lf(pIndices,"AddressIndex") {
		set g="^FCE.BranchI(""AddressIndex"")",o="^FCE.BranchI(""AddressIndex"","
		for  {
			set g=$q(@g@("")) quit:g=""||(o'=$e(g,1,$l(o)))
			if $qs(g,2)'=-1E14 { set n=$q(@g@("")) quit:n=""  if o=$e(n,1,$l(o)),$lb($qs(g,2))=$lb($qs(n,2)) { set d=1 quit  }}
	}
		if d { set pOK=0,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler42",,"AddressIndex","FCE"_"."_"Branch") QUIT  }
	}
	if $lf(pIndices,"PhoneIndex") {
		set g="^FCE.BranchI(""PhoneIndex"")",o="^FCE.BranchI(""PhoneIndex"","
		for  {
			set g=$q(@g@("")) quit:g=""||(o'=$e(g,1,$l(o)))
			if $qs(g,2)'=" " { set n=$q(@g@("")) quit:n=""  if o=$e(n,1,$l(o)),$lb($qs(g,2))=$lb($qs(n,2)) { set d=1 quit  }}
	}
		if d { set pOK=0,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler42",,"PhoneIndex","FCE"_"."_"Branch") QUIT  }
	}
	set pOK=1 QUIT
%SQLCopyIcolIntoName() methodimpl
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("ATMs")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("Address")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("Closes")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("DurationOpen")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("NationalCurrency")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Notes")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("Opens")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("Phone")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("x__classname")=%d(10)
	QUIT
%SQLDefineiDjVars(%d,subs,master) methodimpl
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0,%bufferedColumns=0) methodimpl
	// SQL DELETE method for table FCE.Branch
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^FCE.BranchD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.Branch","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"Branch",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"FCE"_"."_"Branch",%rowid) do ..%SQLEExit() QUIT  }
	if %e(10)'="" { set sn=$p(%e(10),$e(%e(10)),$l(%e(10),$e(%e(10)))-1) if "FCE.Branch"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("AddressIndex")="%e(3),",%p("IDKEY")="%d(1),",%p("PhoneIndex")="%e(9),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","FCE.Branch",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","FCE.Branch",%k,"f",%t)) quit:%t=""  set %st=(%t="FCE.Branch") set %fk="" for  set %fk=$o(^rINDEXEXT("F","FCE.Branch",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(3))'="",'$g(%0CacheLock("FCE.RealEstate","E")),'##class(FCE.RealEstate).IDKEYSQLExists(1,,%e(3)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"FCE"_"."_"Branch","RealEstateFK","ADDRESS") quit
	if '($a(%check,2)#2),'$g(%0CacheLock("FCE.Branch","E")) {
		if $g(%e(3))'="" { lock +^FCE.BranchI("AddressIndex",%e(3))#"S":$zu(115,4) if $t { lock -^FCE.BranchI("AddressIndex",%e(3))#"S" } else { do ..%SQLUnlockError("AddressIndex") set SQLCODE=sqlcode do ..%SQLEExit() QUIT }}
		lock +^FCE.BranchI("PhoneIndex",$zu(28,%e(9),7))#"S":$zu(115,4) if $t { lock -^FCE.BranchI("PhoneIndex",$zu(28,%e(9),7))#"S" } else { do ..%SQLUnlockError("PhoneIndex") set SQLCODE=sqlcode do ..%SQLEExit() QUIT }
	}
	set ce="" for  { set ce=$order(^oddSQL("FCE","Branch","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		new %i,%o set %i=%d(1)\64000+1,%o=%d(1)#64000+1
		set $bit(^FCE.BranchI("$Branch",%i),%o)=0
		set sn(2)=%d(1) s:%e(2)="" %nc(2)=1,%e(2)=$lb("") f %pos(1)=1:1:$ll(%e(2)) { s sn(1)=$zu(28,$li(%e(2),%pos(1)),7) k ^FCE.BranchI("ATMIndex",sn(1),sn(2)) } s:$g(%nc(2)) %nc(2)=0,%e(2)="" 
		set sn(1)=%e(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^FCE.BranchI("AddressIndex",sn(1),sn(2))
		try { do ..NotesiFindDeleteIndex(%d(1),%e(7)) } catch tException { set sqlcode=tException.AsSQLCODE(),%msg=tException.AsSQLMessage() do ..%SQLEExit() QUIT  } if sqlcode set SQLCODE=sqlcode QUIT
		set sn(1)=$zu(28,%e(9),7) set sn(2)=%d(1) k ^FCE.BranchI("PhoneIndex",sn(1),sn(2))
	}
	new %rc if $g(%e(7))'="" { if $a(%check,2)=1 { set %rc=##class(%Stream.Object).%Delete(%e(7),0) } else { set %rc=##class(%Stream.Object).%Delete(%e(7)) } if '%rc { set SQLCODE=$s($case($lg($lg($extract(%rc,3,*)),1,0),"5803":1,"5804":1,:0):-110,1:-412),%msg="Error attempting to delete stream object for field "_"Notes"_":  "_$$GetErrorText^%apiOBJ(%rc) do ..%SQLEExit() QUIT  }}
	k ^FCE.BranchD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Branch",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Branch") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams() methodimpl
	// Delete all temporary streams
	new %sid,%ts
	if $g(%d(7))?1.n1"@"1.e { if $d(%qstrhandle($g(%qacn,1),%d(7)),%ts) { set %sid=%ts.%Oid() if $a(%check,2)=1 { do %ts.%Delete(%sid,0) } else { do %ts.%Delete(%sid) } kill %ts }}
	QUIT
%SQLEExit() methodimpl
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Branch"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.BranchD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef) methodimpl
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode) methodimpl
	new s set %d(1)=%rowid,s="" if '$d(^FCE.BranchD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(10)=$lg(s),%e(9)=$lg(s,2),%e(3)=$lg(s,3),%e(2)=$lg(s,7),%e(7)=$lg(s,8)
	set:%e(7)'="" %e(7)=..NotesOid(%e(7))
	QUIT
%SQLGetOldAll() methodimpl
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT ATMs,Address,Closes,DurationOpen,NationalCurrency,Notes,Opens,Phone,x__classname INTO :%e() FROM %IGNOREINDEX * FCE.Branch WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %e, %msg, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EZqVqHNpjvDCY4MNtciMYpCZwyW","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EZqVqHNpjvDCY4MNtciMYpCZwyW"))||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT ATMs , Address , Closes , DurationOpen , NationalCurrency , Notes , Opens , Phone , x__classname INTO :%e() FROM %IGNOREINDEX * FCE . Branch WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return
%SQLGetOldIndex(%rowid,%e,pF=0,sqlcode,%buffervector=0,fld="") methodimpl
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("ATMs")) %d(2)=tF("ATMs") set:$d(tF("x__classname")) %d(10)=tF("x__classname") set:$d(tF("Address")) %d(3)=tF("Address") set:$d(tF("Notes")) %d(7)=tF("Notes") set:$d(tF("Phone")) %d(9)=tF("Phone") 
			RETURN
		}
	}
	catch { }
	new s set %d(1)=%rowid,s="" if '$d(^FCE.BranchD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(10)=$lg(s),%e(9)=$lg(s,2),%e(3)=$lg(s,3),%e(2)=$lg(s,7),%e(7)=$lg(s,8)
	set:%e(7)'="" %e(7)=..NotesOid(%e(7))
	if pF { set:$d(%d(2)) pF("ATMs")=%d(2) set:$d(%d(10)) pF("x__classname")=%d(10) set:$d(%d(3)) pF("Address")=%d(3) set:$d(%d(7)) pF("Notes")=%d(7) set:$d(%d(9)) pF("Phone")=%d(9)  }
	set sqlcode=0
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0,%bufferedColumns=0) methodimpl
	// SQL INSERT method for table FCE.Branch
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","FCE"_"."_"Branch") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(6)) %d(6)="USD"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
			do:$g(%d(9))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,10)) 
			quit:sqlcode<0		// A required field was missing
			new %unlockcon
			if $g(%d(3))'="" {	// Constraint AddressIndex
				if '$a(%check,2) { lock +^FCE.BranchI("AddressIndex",%d(3)):$zu(115,4) if $t { set %unlockcon(25)=$name(^FCE.BranchI("AddressIndex",%d(3))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("AddressIndex") quit  } }
				if '$a(%check,7) { if $d(^FCE.BranchI("AddressIndex",%d(3))) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Branch","AddressIndex","Address"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..AddressIndexSQLFindRowIDByConstraint($lb(%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
			}
				// Constraint PhoneIndex
				if '$a(%check,2) { lock +^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7)):$zu(115,4) if $t { set %unlockcon(27)=$name(^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7))),$e(%l,4)=$c(1) } else { do ..%SQLUnlockError("PhoneIndex") quit  } }
				if '$a(%check,7) { if $d(^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7))) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Branch","PhoneIndex","Phone"_"="_$$quoter^%apiSQL($g(%d(9)))) quit  }} // INSERT
				else { new tID set tID=..PhoneIndexSQLFindRowIDByConstraint($lb(%d(9)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
			quit:$zu(115,7)  set %msg=""
			if $g(%d(3))'="",'##class(FCE.RealEstate).IDKEYSQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"Branch","RealEstateFK","ADDRESS")_"  "_$g(%msg) quit  }		// Foreign Key Constraint RealEstateFK
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^FCE.BranchD) } elseif %d(1)>$g(^FCE.BranchD) { if $i(^FCE.BranchD,$zabs(%d(1)-$g(^FCE.BranchD))) {}} elseif $d(^FCE.BranchD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"FCE"_"."_"Branch"_"."_"ID") do ..%SQLDeleteTempStreams() do ..%SQLEExit() RETURN "" }
	for icol=10,7,2,3,9 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^FCE.BranchD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.Branch","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"Branch",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	if '$a(%check,5),'$a(%check,6) {
		if %d(7)'="" { set %d(7)=..%SQLInsertStreams(%d(7),"FCE.Branch","Notes","Notes",1,1,.sqlcode,.%msg) if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }}
	}
	set ^FCE.BranchD(%d(1))=$lb(%d(10),%d(9),%d(3),%d(8),%d(4),%d(6),%d(2),%d(7))
	if '$a(%check,3) {
		new %i,%o set %i=%d(1)\64000+1,%o=%d(1)#64000+1
		set $bit(^FCE.BranchI("$Branch",%i),%o)=1
		set sn(2)=%d(1) s:%d(2)="" %nc(2)=1,%d(2)=$lb("") f %pos(1)=1:1:$ll(%d(2)) { s sn(1)=$zu(28,$li(%d(2),%pos(1)),7) set ^FCE.BranchI("ATMIndex",sn(1),sn(2))=%d(10) } s:$g(%nc(2)) %nc(2)=0,%d(2)="" 
		set sn(1)=%d(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^FCE.BranchI("AddressIndex",sn(1),sn(2))=%d(10)
		try { do ..NotesiFindInsertIndex(%d(1),%d(7),%d(10)) } catch tException { set sqlcode=tException.AsSQLCODE(),%msg=tException.AsSQLMessage() do ..%SQLEExit() } if sqlcode set SQLCODE=sqlcode RETURN ""
		set sn(1)=$zu(28,%d(9),7) set sn(2)=%d(1) set ^FCE.BranchI("PhoneIndex",sn(1),sn(2))=%d(10)
	}
	lock:$a(%l,2) -@(%unlockcon(25)_"#""D""") lock:$a(%l,4) -@(%unlockcon(27)_"#""D""") 
	lock:$a(%l) -^FCE.BranchD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Branch",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Branch") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0) methodimpl
	if 'view {
	}
	else {
	set %d(5)="" do ..DurationOpenSQLCompute()
	}
	QUIT
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) methodimpl {
	if $a(%check,2)=1 { set tOldConcurrency=$zu(115,10) do $zu(115,10,0) }
	set tStream=$classmethod(pClassname,pProperty_"Open","")
	if tStream="" { set sqlcode=-412,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler11",,"FCE"_"."_"Branch",pField) do:$a(%check,2)=1 $zu(115,10,tOldConcurrency) RETURN "" }
	set tTempStream=""
	if $isobject(pVal) { set tTempStream=pVal }
	elseif (pVal?1.n1"@"1.e) { try { set tTempStream=$zobjref(pVal) if $isobject(tTempStream),tTempStream.%IsA("%Stream.Object"),((pVal_"")=(tTempStream_"")) {} else { set tTempStream="" }} catch { set $ze="" }}
	elseif $g(%inssel),$listvalid(pVal) { if $a(%check,2)=1 { set tTempStream=##class(%Stream.Object).%Open(pVal,0) } else { set tTempStream=##class(%Stream.Object).%Open(pVal) } }
	if $isobject(tTempStream) {
		if 'tTempStream.IsNull() { set tSC=tStream.CopyFromAndSave(tTempStream) if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }}
		else { set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }}
	}
	elseif pVal'="" {
		set:pChangeEmptyToNull&&(pVal=$c(0)) pVal=""
		set tSC=tStream.Write(pVal) if 'tSC { set tError="SQLFiler13" goto ERRORInsertStreams }
		set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }
	}
	else {
		set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }
	}
	set pVal=tStream.%Oid() set:pOIDType=1 pVal=$lg(pVal) set:pOIDType=2 pVal=$li(pVal,1,2) do:$a(%check,2)=1 $zu(115,10,tOldConcurrency)
	RETURN pVal
ERRORInsertStreams	do:$a(%check,2)=1 $zu(115,10,tOldConcurrency) set sqlcode=$s($case($lg($lg($extract(tSC,3,*)),1,0),"5803":1,"5804":1,:0):-110,1:-412),%msg=$$GetErrorText^%apiOBJ(tSC),%msg=$g(%msg)_" "_$$FormatMessage^%occMessages(,"%SQL.Filer",tError,,"FCE"_"."_"Branch",pField)_": '"_$g(pVal)_"'" RETURN "" }
%SQLInvalid(pIcol,pVal) methodimpl {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"FCE"_"."_"Branch"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname) methodimpl
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"FCE"_"."_"Branch") quit
%SQLNormalizeFields() methodimpl
	set:$g(%d(3))'="" %d(3)=$$NormalizeField3(%d(3))
	new %f for %f=4,8 { set:$g(%d(%f))'="" %d(%f)=$select($zu(115,13)&&(%d(%f)=$c(0)):"",1:+%d(%f)) }
	QUIT
NormalizeField3(%val) {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:$decimal(%val)\1)
}
	Return
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="") methodimpl
	RETURN ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0) methodimpl
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"FCE"_"."_"Branch",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),%INTERNAL(ATMs),%INTERNAL(Address),Closes,DurationOpen,NationalCurrency,Notes,Opens,Phone,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9),:d(10) FROM FCE.Branch WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Esnx9zAcwsTVoniDkZ4Y5Tfe1VV","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Esnx9zAcwsTVoniDkZ4Y5Tfe1VV"))||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(10)'="" { new sn set sn=$p(d(10),$e(d(10)),$l(d(10),$e(d(10)))-1) if "FCE.Branch"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("FCE.Branch",18),d=10,d=$zobjexport(d,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , %INTERNAL ( ATMs ) , %INTERNAL ( Address ) , Closes , DurationOpen , NationalCurrency , Notes , Opens , Phone , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) , :d(9) , :d(10) FROM FCE . Branch WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1)
	s %xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")="",%xxsql("I","%jsonMap")=""
	s %xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set d(1)="",d(2)="",d(3)="",d(4)="",d(5)="",d(6)="",d(7)="",d(8)="",d(9)="",d(10)="" } catch {} }
	return
%SQLReleaseLock(%rowid,s=0,i=0,e="") methodimpl
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^FCE.BranchD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0) methodimpl
	set s=$e("S",s)_$e("D",i) lock -^FCE.BranchD#s QUIT 1
	Return
%SQLUnlock() methodimpl
	do:$g(SQLCODE)<0&&(%oper="UPDATE") ..%SQLDeleteTempStreams()
	lock:$a(%l) -^FCE.BranchD(%d(1))#"E"
	QUIT
%SQLUnlock2() methodimpl
	lock:$a(%l,2) -@(%unlockcon(25)_"#""D""") lock:$a(%l,4) -@(%unlockcon(27)_"#""D""") QUIT
%SQLUnlockError(cname) methodimpl
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"FCE"_"."_"Branch",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"FCE"_"."_"Branch",cname) } quit
	Return
%SQLUnlockRef() methodimpl
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid,%bufferedColumns=0,%bufferedColumnsDel=0) methodimpl
	// SQL UPDATE method for table FCE.Branch
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'$a(%check,7),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","FCE"_"."_"Branch") QUIT  }
	for icol=2:1:10 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^FCE.BranchD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.Branch","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"Branch",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"Branch",%rowid) do ..%SQLEExit() QUIT  } for icol=10,7,2,3,9 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"Branch",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(10)'="" set sn=$p(%e(10),$e(%e(10)),$l(%e(10),$e(%e(10)))-1) if "FCE.Branch"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
			if $a(%e,9),$g(%d(9))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,10)) }
			quit:sqlcode
			new %unlockcon
			if ($a(%e,3)),$g(%d(3))'="" {	// UNIQUE constraint AddressIndex
				if '($a(%check,2)#2),'$g(%0CacheLock("FCE.Branch","E")) {
					lock +^FCE.BranchI("AddressIndex",%d(3)):$zu(115,4) if $t { set %unlockcon(25)=$name(^FCE.BranchI("AddressIndex",%d(3))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("AddressIndex") quit  } 
					if %e(3)'="" { lock +^FCE.BranchI("AddressIndex",%e(3)):$zu(115,4) if $t { lock -^FCE.BranchI("AddressIndex",%e(3)) } else { do ..%SQLUnlockError("AddressIndex") quit  }}
				}
				if $d(^FCE.BranchI("AddressIndex",%d(3))) { set sqlcode=-120,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Branch","AddressIndex","Address"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }
			}
			new %fk,%st,%t,%y
			if ($a(%e,3)),'$zu(115,7) {
				set %t="" for  { set %t=$o(^rINDEXEXT("F","FCE.Branch","AddressIndex","f",%t)) quit:%t=""  set %st=(%t="FCE.Branch") s %fk="" for  { set %fk=$o(^rINDEXEXT("F","FCE.Branch","AddressIndex","f",%t,%fk)) quit:%fk=""  x "set %y=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,""AddressIndex"",$a(%check,2),%e(3),%d(3))" if %y { set sqlcode=-123 quit  }}}
			}
			if ($a(%e,9)) {	// UNIQUE constraint PhoneIndex
				if '($a(%check,2)#2),'$g(%0CacheLock("FCE.Branch","E")) {
					lock +^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7)):$zu(115,4) if $t { set %unlockcon(27)=$name(^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7))),$e(%l,4)=$c(1) } else { do ..%SQLUnlockError("PhoneIndex") quit  } 
					lock +^FCE.BranchI("PhoneIndex",$zu(28,%e(9),7)):$zu(115,4) if $t { lock -^FCE.BranchI("PhoneIndex",$zu(28,%e(9),7)) } else { do ..%SQLUnlockError("PhoneIndex") quit  }
				}
				if $d(^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7))),'$d(^FCE.BranchI("PhoneIndex",$zu(28,%d(9),7),%d(1))) { set sqlcode=-120,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Branch","PhoneIndex","Phone"_"="_$$quoter^%apiSQL($g(%d(9)))) quit  }
			}
			if ($a(%e,9)),'$zu(115,7) {
				set %t="" for  { set %t=$o(^rINDEXEXT("F","FCE.Branch","PhoneIndex","f",%t)) quit:%t=""  set %st=(%t="FCE.Branch") s %fk="" for  { set %fk=$o(^rINDEXEXT("F","FCE.Branch","PhoneIndex","f",%t,%fk)) quit:%fk=""  x "set %y=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,""PhoneIndex"",$a(%check,2),%e(9),%d(9))" if %y { set sqlcode=-123 quit  }}}
			}
			quit:$zu(115,7)  set %msg=""
			if $a(%e,3),$g(%updcas)'="IDKEY",$g(%d(3))'="",'##class(FCE.RealEstate).IDKEYSQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"FCE"_"."_"Branch","RealEstateFK","ADDRESS")_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,3)),%e(3)'="",'$g(%0CacheLock("FCE.RealEstate","E")),'##class(FCE.RealEstate).IDKEYSQLExists(1,,%e(3)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"FCE"_"."_"Branch","RealEstateFK","ADDRESS") quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if '$a(%check,3) { 
		new %i,%o s %i=%d(1)\64000+1,%o=%d(1)#64000+1
	}
	if '$a(%check,5),'$a(%check,6) { new %rc,%stream,%ts
		if $a(%e,7) { set %d(7)=..%SQLUpdateStreams(%d(7),%e(7),"FCE.Branch","Notes","Notes",1,1,.sqlcode,.%msg,$g(%soid(7))) if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }}
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,6):1,$a(%e,7):1,$a(%e,8):1,$a(%e,9):1,1:$a(%e,10)) {
		set ^FCE.BranchD(%d(1))=$listupdate($g(^FCE.BranchD(%d(1))),1,$a(%e,10):%d(10),$a(%e,9):%d(9),$a(%e,3):%d(3),$a(%e,8):%d(8),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,2):%d(2),$a(%e,7):%d(7))
	}
	if '$a(%check,3) { new %i,%o s %i=%d(1)\64000+1,%o=%d(1)#64000+1 
		if $a(%e,2)||$a(%e,10) {	// ATMIndex index map
			if $a(%e,2) { set sn(2)=%d(1) s:%e(2)="" %nc(2)=1,%e(2)=$lb("") f %pos(1)=1:1:$ll(%e(2)) { s sn(1)=$zu(28,$li(%e(2),%pos(1)),7) k ^FCE.BranchI("ATMIndex",sn(1),sn(2)) } s:$g(%nc(2)) %nc(2)=0,%e(2)=""  }
			set sn(2)=%d(1) s:%d(2)="" %nc(2)=1,%d(2)=$lb("") f %pos(1)=1:1:$ll(%d(2)) { s sn(1)=$zu(28,$li(%d(2),%pos(1)),7) set ^FCE.BranchI("ATMIndex",sn(1),sn(2))=%d(10) } s:$g(%nc(2)) %nc(2)=0,%d(2)="" 
		}
		if $a(%e,3)||$a(%e,10) {	// AddressIndex index map
			if $a(%e,3) { set sn(1)=%e(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^FCE.BranchI("AddressIndex",sn(1),sn(2)) }
			set sn(1)=%d(3) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^FCE.BranchI("AddressIndex",sn(1),sn(2))=%d(10)
		}
		if $a(%e,7)||$a(%e,10) { 	// NotesiFind index map
			try { do ..NotesiFindUpdateIndex(%d(1),%d(7),%e(7),%d(10)) } catch tException { set sqlcode=tException.AsSQLCODE(),%msg=tException.AsSQLMessage() do ..%SQLEExit() } if sqlcode set SQLCODE=sqlcode QUIT
		}
		if $a(%e,9)||$a(%e,10) {	// PhoneIndex index map
			if $a(%e,9) { set sn(1)=$zu(28,%e(9),7) set sn(2)=%d(1) k ^FCE.BranchI("PhoneIndex",sn(1),sn(2)) }
			set sn(1)=$zu(28,%d(9),7) set sn(2)=%d(1) set ^FCE.BranchI("PhoneIndex",sn(1),sn(2))=%d(10)
		}
	}
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Branch",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Branch") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) methodimpl {
	set:$a(%check,2)=1 zu11510=$zu(115,10,0)
	if pNew'="" {
		if $a(%check,2)=1 { set tStream=##class(%Stream.Object).%Open(pOld,0) } else { set tStream=##class(%Stream.Object).%Open(pOld) }
		if tStream="" { set tStream=$classmethod(pClassname,pProperty_"Open","") }
		if tStream="" { set sqlcode=-412,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler22",,"FCE"_"."_"Branch",pField) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }
		set tTempStream=""
		if $isobject(pNew) { set tTempStream=pNew }
		elseif (pNew?1.n1"@"1.e) { try { set tTempStream=$zobjref(pNew) if $isobject(tTempStream),tTempStream.%IsA("%Stream.Object"),((pNew_"")=(tTempStream_"")) {} else { set tTempStream="" }} catch { set $ze="" }}
		elseif pAllowOid,$listvalid(pNew),$ll(pNew)>2 { if $a(%check,2)=1 { set tTempStream=##class(%Stream.Object).%Open(pNew,0) } else { set tTempStream=##class(%Stream.Object).%Open(pNew) } }
		if tTempStream'="" {
			set tSC=tStream.CopyFromAndSave(tTempStream)
			if 'tSC { set sqlcode=-412,%msg=$$DecomposeStatus^%apiOBJ(tSC,.%msg) set:%msg %msg=%msg(1) }
			if sqlcode<0 { set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }
		}
		else {
			set:pChangeEmptyToNull&&(pNew=$c(0)) pNew=""
			set tSC=tStream.Write(pNew) if 'tSC { set tError="SQLFiler24" goto ERRORUpdateStreams }
			set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler23" goto ERRORUpdateStreams }
		}
	}
	else {
		if pOld'="" { if $a(%check,2)=1 { set tSC=##class(%Stream.Object).%Delete(pOld,0) } else { set tSC=##class(%Stream.Object).%Delete(pOld) } if 'tSC { set sqlcode=-412,%msg=$$DecomposeStatus^%apiOBJ(tSC,.%msg) set:%msg %msg=%msg(1) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }}
		set tStream=$classmethod(pClassname,pProperty_"Open","")
		if tStream="" { set sqlcode=-412,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler22",,"FCE"_"."_"Branch",pField) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }
		set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler23" goto ERRORUpdateStreams }
	}
	set pNew=tStream.%Oid() set:pOIDType=1 pNew=$lg(pNew) set:pOIDType=2 pNew=$li(pNew,1,2) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510)
	RETURN pNew
ERRORUpdateStreams	set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510)
	set sqlcode=$s($case($lg($lg($extract(tSC,3,*)),1,0),"5803":1,"5804":1,:0):-110,1:-412),%msg=$$GetErrorText^%apiOBJ(tSC),%msg=$g(%msg)_" "_$$FormatMessage^%occMessages(,"%SQL.Filer",tError,,"FCE"_"."_"Branch",pField)_": '"_$g(pNew)_"'"
	RETURN "" }
%SQLValidateCompFields(sqlcode) methodimpl
	QUIT 'sqlcode
%SQLValidateFields(sqlcode) methodimpl
	new %irep for %irep=1:1:$ll($g(%d(2))) { if $li($g(%d(2)),%irep)'="",'(($l($li(%d(2),%irep))'>50)) set sqlcode=..%SQLInvalid(2+1,$li($g(%d(2)),%irep)) } 
	if $g(%d(4))'="",'($select($zu(115,13)&&(%d(4)=$c(0)):1,$isvalidnum(%d(4),,$ztimeh("1:00pm"),$ztimeh("10:00pm")):1,'$isvalidnum(%d(4)):$$Error^%apiOBJ(7207,%d(4)),%d(4)<$ztimeh("1:00pm"):$$Error^%apiOBJ(7204,%d(4),$ztimeh("1:00pm")),1:$$Error^%apiOBJ(7203,+%d(4),$ztimeh("10:00pm")))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	if $g(%d(8))'="",'($select($zu(115,13)&&(%d(8)=$c(0)):1,$isvalidnum(%d(8),,$ztimeh("6:00am"),$ztimeh("12:00n")):1,'$isvalidnum(%d(8)):$$Error^%apiOBJ(7207,%d(8)),%d(8)<$ztimeh("6:00am"):$$Error^%apiOBJ(7204,%d(8),$ztimeh("6:00am")),1:$$Error^%apiOBJ(7203,+%d(8),$ztimeh("12:00n")))) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	if $g(%d(9))'="",'($s(($l(%d(9))'>50)&&(%d(9)?3n1"-"3n1"-"4n):1,$l(%d(9))>50:$$Error^%apiOBJ(7201,%d(9),50),1:$$Error^%apiOBJ(7209,%d(9),"3n1""-""3n1""-""4n"))) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	if $g(%d(6))'="",'(%d(6)'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%d(6)_"-"))) { set sqlcode=..%SQLInvalid(6+1,%d(6)) } 
	if $g(%d(5))'="",'(($l(%d(5))'>50)) { set sqlcode=..%SQLInvalid(5+1,%d(5)) } 
	QUIT 'sqlcode
%SQLnBuild() methodimpl {
	set %n=$lb(,"ID","ATMs","Address","Closes","DurationOpen","NationalCurrency","Notes","Opens","Phone","x__classname")
	QUIT }
%Save(related=1) methodimpl {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) If ('sc) { ZTrap "SG" } Set intRef=+$this,objValue=$get(%objTX(1,+$g(%objTX(0,intRef)),1)),sc=..%SerializeObject(.objValue,1) If ('sc) { ZTrap "SG" } Set %objTX(1,%objTX(0,intRef),1)=objValue GoTo %SaveCOMMIT
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intRef=$li(data) If '$data(%objTX(1,+$g(%objTX(0,intRef)),2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,%objTX(0,intRef)) Kill %objTX(2,i),%objTX(11,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objRef)),1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objRef),1)=objValue Kill %objTX(1,%objTX(0,+objRef),3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objRef),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objRef),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objRef)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intPred="",intRef=$li(data) For  Set intPred=$order(%objTX(1,%objTX(0,intRef),2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If ('sc) { If $d(%objTX(11,+%objTX(1,intPred))) { Set %objTX(2,%objTX(11,+%objTX(1,intPred)),1)=sc } Else { Set %objTX(2,$i(%objTX(2)),1)=sc,%objTX(11,+%objTX(1,intPred))=%objTX(2) } } If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objSerialize)),1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objSerialize),1)=objValue Kill %objTX(1,%objTX(0,+objSerialize),3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objSerialize),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objSerialize),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objSerialize)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set i="" for  set i=$order(%objTX(2,i)) quit:i=""  if ('$Get(%objTX(2,i,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,i,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) methodimpl {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0,locku=$c(0,0)
		if 'idassigned { set id=$i(^FCE.BranchD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set pidchunk=id\64000+1,pidoffset=id#64000+1
		set zzc10v1=$zu(28,i%Phone,7,32768)
		set zzc10v2=$s(i%Address'="":i%Address,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^FCE.BranchD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^FCE.BranchD(id))) {
					set insert=1
					if lock { lock -(^FCE.BranchD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				set zzc20v1="",ptr="" for  set ptr=$order(i%ATMs(ptr),1,val) Quit:ptr=""  set zzc20v1=zzc20v1_$listbuild(val)
				if i%%Concurrency&&$tlevel {  lock +(^FCE.BranchD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^FCE.BranchD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				if (i%Address'=""),'..RealEstateFKCheck(i%Address) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".RealEstateFK","INSERT"))
				if i%Address'="" { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.BranchI("AddressIndex",zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.BranchI("AddressIndex",zzc10v2)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":AddressIndex:"_$zreference)) }}
				if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.BranchI("PhoneIndex",zzc10v1):$zu(115,4) if $Test { Set $Extract(locku,2)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.BranchI("PhoneIndex",zzc10v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PhoneIndex:"_$zreference)) }
				set ^FCE.BranchD(id)=$lb("",i%Phone,i%Address,i%Opens,i%Closes,i%NationalCurrency,zzc20v1,i%Notes)
				set zzc86v1="" For  { Set zzc86v1 = $Order(i%CurrencyBalances(zzc86v1),1,val) Quit:zzc86v1=""  Set ^FCE.BranchD(id,"CurrencyBalances",zzc86v1)=val }
				set $bit(^FCE.BranchI("$Branch",pidchunk),pidoffset)=1
				set zzc26v1 = $Order(i%ATMs(""))
				set:zzc26v1="" zzc26v1=1
				do {
					set ^FCE.BranchI("ATMIndex",$zu(28,$Get(i%ATMs(zzc26v1)),7,32768),id)=""
					set zzc26v1 = $Order(i%ATMs(zzc26v1))
				} while zzc26v1 '= ""
				set ^FCE.BranchI("AddressIndex",zzc10v2,id)=""
				set zzc26v2 = $Order(i%CurrencyBalances(""))
				while zzc26v2 '= "" {
					set ^FCE.BranchI("CBIndex",zzc26v2,id)=""
					set zzc26v2 = $Order(i%CurrencyBalances(zzc26v2))
				}
				do ..NotesiFindInsertIndex(id,i%Notes,"")
				set ^FCE.BranchI("PhoneIndex",zzc10v1,id)=""
			}
			else {
				set zzc31v1=$G(^FCE.BranchD(id))
				set zzc31v2=$listget(zzc31v1,2)
				set zzc31v3=$zu(28,zzc31v2,7,32768)
				set zzc31v4=$listget(zzc31v1,3)
				set zzc31v5=$s(zzc31v4'="":zzc31v4,1:-1E14)
				if ((i%Address'=zzc31v4))&&((i%Address'=""))&&('..RealEstateFKCheck(i%Address)) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5829,$classname()_".RealEstateFK","UPDATE"))
				if i%Address'="" { if i%Address'=zzc31v4 { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^FCE.BranchI("AddressIndex",zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } if zzc31v4'="" { l +^FCE.BranchI("AddressIndex",zzc31v5):$zu(115,4) if $t { l -^FCE.BranchI("AddressIndex",zzc31v5) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }}} If ($data(^FCE.BranchI("AddressIndex",zzc10v2)))&&('$data(^FCE.BranchI("AddressIndex",zzc10v2,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":AddressIndex:"_$zreference)) } } }
				if i%Phone'=zzc31v2 { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^FCE.BranchI("PhoneIndex",zzc10v1):$zu(115,4) if $Test { Set $Extract(locku,2)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } l +^FCE.BranchI("PhoneIndex",zzc31v3):$zu(115,4) if $t { l -^FCE.BranchI("PhoneIndex",zzc31v3) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }} If ($data(^FCE.BranchI("PhoneIndex",zzc10v1)))&&('$data(^FCE.BranchI("PhoneIndex",zzc10v1,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":PhoneIndex:"_$zreference)) } }
				if $get(%updcas)="" {
					if ((i%Address'=zzc31v4))&&((zzc31v4'=""))&&('..RealEstateFKCheck(zzc31v4,1)) Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5795,$classname()_".RealEstateFK","UPDATE"))
				}
				set zzc53v1=$ListLength($listget(zzc31v1,7)) set:zzc53v1'>0 zzc53v1=1 for zzc35v1 = 1:1:zzc53v1 {
					kill ^FCE.BranchI("ATMIndex",$zu(28,$lg($listget(zzc31v1,7),zzc35v1),7,32768),id)
				}
				set zzc35v2 = $Order(^FCE.BranchD(id,"CurrencyBalances",""))
				while zzc35v2 '= "" {
					kill ^FCE.BranchI("CBIndex",zzc35v2,id)
					set zzc35v2 = $Order(^FCE.BranchD(id,"CurrencyBalances",zzc35v2))
				}
				set zzc36v1 = $Order(i%ATMs(""))
				set:zzc36v1="" zzc36v1=1
				do {
					set ^FCE.BranchI("ATMIndex",$zu(28,$Get(i%ATMs(zzc36v1)),7,32768),id)=""
					set zzc36v1 = $Order(i%ATMs(zzc36v1))
				} while zzc36v1 '= ""
				if (i%Address'=zzc31v4) {
					kill ^FCE.BranchI("AddressIndex",zzc31v5,id)
					if i%Address'=zzc31v4{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"AddressIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"AddressIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v4,i%Address) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^FCE.BranchI("AddressIndex",zzc10v2,id)=""
				}
				set zzc36v2 = $Order(i%CurrencyBalances(""))
				while zzc36v2 '= "" {
					set ^FCE.BranchI("CBIndex",zzc36v2,id)=""
					set zzc36v2 = $Order(i%CurrencyBalances(zzc36v2))
				}
				do ..NotesiFindUpdateIndex(id,i%Notes,$listget(zzc31v1,8),"")
				if (i%Phone'=zzc31v2) {
					kill ^FCE.BranchI("PhoneIndex",zzc31v3,id)
					if i%Phone'=zzc31v2{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"PhoneIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"PhoneIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v2,i%Phone) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^FCE.BranchI("PhoneIndex",zzc10v1,id)=""
				}
				set zzc87v2="",ptr="" for  set ptr=$order(i%ATMs(ptr),1,val) Quit:ptr=""  set zzc87v2=zzc87v2_$listbuild(val)
				set ^FCE.BranchD(id)=$lb("",i%Phone,i%Address,i%Opens,i%Closes,i%NationalCurrency,zzc87v2,i%Notes)
				kill nodes merge nodes=i%CurrencyBalances
				set zzc87v1="" for { set zzc87v1 = $Order(^FCE.BranchD(id,"CurrencyBalances",zzc87v1),1,data) Quit:zzc87v1=""  if $data(nodes(zzc87v1),val) { if data=val kill nodes(zzc87v1) } else { kill ^FCE.BranchD(id,"CurrencyBalances",zzc87v1) } }
				merge ^FCE.BranchD(id,"CurrencyBalances")=nodes
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^FCE.BranchD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^FCE.BranchD(id)) }
		}
		lock:$Ascii($Extract(locku,1)) -^FCE.BranchI("AddressIndex",zzc10v2)#"D"
		lock:$Ascii($Extract(locku,2)) -^FCE.BranchI("PhoneIndex",zzc10v1)#"D"
		if lock lock -(^FCE.BranchD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) methodimpl {
	QUIT $$Error^%apiOBJ(5758,$classname()_"::%SaveDirect") }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) methodimpl {
	If lockExtent {
		Set sc=..%LockExtent(0)
		Quit:('sc) sc
	}
	s id=$order(^FCE.BranchD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^FCE.BranchD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^FCE.BranchD(id))
	Set bsv0N2=$listget(bsv0N1,7)
	set pidchunk=id\64000+1,pidoffset=id#64000+1
	Set $bit(^FCE.BranchI("$Branch",pidchunk),pidoffset)=1
	set bsv15N1=$ListLength(bsv0N2) set:bsv15N1'>0 bsv15N1=1 for bsv14N1 = 1:1:bsv15N1 {
		Set bsv0N3=$zu(28,$lg(bsv0N2,bsv14N1),7,32768)
		Set ^FCE.BranchI("ATMIndex",bsv0N3,id)=$listget(bsv0N1,1)
	}
	Set bsv0N4=$listget(bsv0N1,3)
	Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
	Set ^FCE.BranchI("AddressIndex",bsv0N5,id)=$listget(bsv0N1,1)
	set bsv24N1 = $Order(^FCE.BranchD(id,"CurrencyBalances",""))
	While bsv24N1 '= "" {
		Set ^FCE.BranchI("CBIndex",bsv24N1,id)=$listget(bsv0N1,1)
		set bsv24N1 = $Order(^FCE.BranchD(id,"CurrencyBalances",bsv24N1))
	}
	try { do ..NotesiFindInsertIndex(id,$listget(bsv0N1,8),$listget(bsv0N1,1)) } catch tException { set sc=tException.AsStatus(),$ze="" RETURN sc }
	Set bsv0N6=$zu(28,$listget(bsv0N1,2),7,32768)
	Set ^FCE.BranchI("PhoneIndex",bsv0N6,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit 1
CatchError	Set $ZTrap=""
	If $ZE'="" {
		Set sc = $$Error^%apiOBJ(5002,$ZE)
	}
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit sc }
%SerializeObject(serial,partial=0) methodimpl {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%Address'="" { Set:'$data(%objTX(0,+r%Address)) %objTX(0,+r%Address)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Address))=r%Address,%objTX(1,%objTX(0,+r%Address),1)=..AddressGetObject(1),%objTX(1,%objTX(0,+r%Address),6)=1 Set M%Address=1,i%Address=$listget(%objTX(1,%objTX(0,+r%Address),1)) }
		If r%Notes'="" { Set:'$data(%objTX(0,+r%Notes)) %objTX(0,+r%Notes)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Notes))=r%Notes,%objTX(1,%objTX(0,+r%Notes),1)=..NotesGetObject(1),%objTX(1,%objTX(0,+r%Notes),6)=2 Set M%Notes=1,i%Notes=$listget(%objTX(1,%objTX(0,+r%Notes),1)) }
		If r%Orders'="" { Set:'$data(%objTX(0,+r%Orders)) %objTX(0,+r%Orders)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Orders))=r%Orders,%objTX(1,%objTX(0,+r%Orders),1)=..OrdersGetObject(1),%objTX(1,%objTX(0,+r%Orders),6)=2 Set M%Orders=1,i%Orders=$listget(%objTX(1,%objTX(0,+r%Orders),1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) methodimpl {
	Set sc=1,intOref=+$this
	If $data(%objTX(0,intOref),index) {
		If 'refresh RETURN 1
		Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	}
	Set:'$d(index) (index,%objTX(0,intOref))=$i(%objTX(1)),%objTX(1,index)=$this Set %objTX(1,index,1)=i%"%%OID",%objTX(1,index,6)=1 If (i%"%%OID" '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,index)=$lb(intOref,1) }
	Set Poref=r%Address If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	if ('$d(i%Notes))&&(..Notes)
	Set Poref=r%Notes If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%Notes)
	Set Poref=r%Orders If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0) methodimpl
	if $select(idxlist="":1,$listfind(idxlist,"ATMIndex"):1,1:0) If $SortBegin(^FCE.BranchI("ATMIndex"))
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"AddressIndex"):1,1:0) If $SortBegin(^FCE.BranchI("AddressIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"CBIndex"):1,1:0) If $SortBegin(^FCE.BranchI("CBIndex"))
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"PhoneIndex"):1,1:0) If $SortBegin(^FCE.BranchI("PhoneIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"NotesiFind"):1,1:0) do ..NotesiFindSortBeginIndex()
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) methodimpl {
	if $select(idxlist="":1,$listfind(idxlist,"ATMIndex"):1,1:0) If $SortEnd(^FCE.BranchI("ATMIndex"),commit)
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"AddressIndex"):1,1:0) If $SortEnd(^FCE.BranchI("AddressIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"CBIndex"):1,1:0) If $SortEnd(^FCE.BranchI("CBIndex"),commit)
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"PhoneIndex"):1,1:0) If $SortEnd(^FCE.BranchI("PhoneIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"NotesiFind"):1,1:0) do ..NotesiFindSortEndIndex(commit)
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -^FCE.BranchD
			 Quit 1
		}
		Lock -^FCE.BranchD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^FCE.BranchD#"S"
		Quit 1
	}
	Lock -^FCE.BranchD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -(^FCE.BranchD(id)#"E")
			Quit 1
		}
		Lock -(^FCE.BranchD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^FCE.BranchD(id)#"SE")
		Quit 1
	}
	Lock -(^FCE.BranchD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors) methodimpl
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Branch).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Branch).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Branch).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Branch).%ValidateIndices()","multiProcess","'0' or '1'") }
	if $case(verbose,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Branch).%ValidateIndices()","verbose","'0' or '1'") }
	new mapList QUIT $$ValidateIndices^%SYS.SECURITY("FCE.Branch",idxList,autoCorrect,lockOption,multiProcess,,verbose,.errors)
%ValidateObject(unused=0,checkserial=1) methodimpl {
	Set sc=..%OnValidateObject()
	If '$system.CLS.GetModified() Quit sc
	If m%ATMs Set key="",rc=1 For  Set key=$order(i%ATMs(key),1,val) Quit:key=""  If val'="" Set rc=..ATMsIsValid(val) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ATMs"_"("_key_")",val)
	If m%Closes Set iv=..Closes If iv'="" Set rc=(..ClosesIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Closes",iv)
	If m%CurrencyBalances Set key="",rc=1 For  Set key=$order(i%CurrencyBalances(key),1,val) Quit:key=""  If val'="" Set rc=..CurrencyBalancesIsValid(val) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"CurrencyBalances"_"("_key_")",val)
	If m%NationalCurrency Set iv=..NationalCurrency If iv'="" Set rc=(..NationalCurrencyIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"NationalCurrency",iv)
	If m%Opens Set iv=..Opens If iv'="" Set rc=(..OpensIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Opens",iv)
	Set iv=..Phone If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Phone("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Phone Set rc=(..PhoneIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Phone",iv)
	Quit sc }
BranchReport() methodimpl { s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	set sql = "CALL FCE.Branch_CurrencySummary()"	
	set rSets = ##class(%SQL.Statement).%ExecDirect(, sql)
	set SQLCODE = rSets.%SQLCODE
	if (SQLCODE = 0) {
		set resultSet = rSets.%NextResult()
		do %sqlcontext.AddResultSet(resultSet)
	}
	else {
		set %sqlcontext.%SQLCODE = SQLCODE
		set %sqlcontext.%Message = rSets.%Message
		quit
	}
	set sql = "CALL FCE.Branch_CitiesStates()"	
	set rSets = ##class(%SQL.Statement).%ExecDirect(, sql)
	set SQLCODE = rSets.%SQLCODE
	if (SQLCODE = 0) {
		set resultSet = rSets.%NextResult()
		do %sqlcontext.AddResultSet(resultSet)
		// retrieve FIRST state for use in BranchesInAState() below
		do resultSet.%Next()
		set firstState = resultSet.State
	}
	else {
		set %sqlcontext.%SQLCODE = SQLCODE
		set %sqlcontext.%Message = rSets.%Message
		quit
	}
	set sql = "CALL FCE.Branch_BranchesInAState(?)"	
	set rSets = ##class(%SQL.Statement).%ExecDirect(, sql, firstState)
	set SQLCODE = rSets.%SQLCODE
	if (SQLCODE = 0) {
		set resultSet = rSets.%NextResult()
		do %sqlcontext.AddResultSet(resultSet)
	}
	else {
		set %sqlcontext.%SQLCODE = SQLCODE
		set %sqlcontext.%Message = rSets.%Message
		quit
	} }
BranchesInAState(state) methodimpl { s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	set resultSet = ""
	set statement = ##class(%SQL.Statement).%New(1) // ODBC mode to make list of ATMs display better
	set sql = "SELECT Phone, ATMs, Address->Street, Address->City, LIST(Branch_Balance->element_key) as Currencies"
	set sql = sql _ " FROM FCE.Branch"
	set sql = sql _ " WHERE Address->State = ?"
	set sql = sql _ " GROUP BY Phone"
	set sql = sql _ " HAVING LIST(Branch_Balance->element_key) is not null"
	set status = statement.%Prepare(sql)
	if (''status) {
		set resultSet = statement.%Execute(state)
		if (resultSet.%SQLCODE = 0) {
			// successful %Execute
			// for testing using Terminal
			while resultSet.%Next() {
				write !!, resultSet.Phone, ?15, resultSet.Street, ?40, resultSet.City
				write !?5, "ATMs: ", resultSet.ATMs
				write !?5, "Currencies: ", resultSet.Currencies
			}
			if (resultSet.%SQLCODE '= 100) {
				// error during %Next()
				write !, resultSet.%SQLCODE, ": ", resultSet.%Message
			}
			// for ODBC/JDBC
			// do %sqlcontext.AddResultSet(resultSet)
		}
		else {
			// error during %Execute
			set %sqlcontext.%SQLCODE = resultSet.%SQLCODE
			set %sqlcontext.%Message = resultSet.%Message
		} 
	}
	else {
		// error during %Prepare: bad SQL
		set ex = ##class(%Exception.StatusException).CreateFromStatus(status)
		set %sqlcontext.%SQLCODE = ex.AsSQLCODE()
		// 4th ":" piece contains %msg value
		set %sqlcontext.%Message = $piece(ex.AsSQLMessage(), ":", 4)
	}
	return resultSet  // return results to other server-side code
}
CitiesStates() methodimpl { s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	set resultSet = ""
	set statement = ##class(%SQL.Statement).%New()
	set sql = "SELECT Address->State, COUNT(DISTINCT ID) as Branches, LIST(DISTINCT Address->City) as Cities"
	set sql = sql _ " FROM FCE.Branch"
	set sql = sql _ " WHERE (Branch_Balance->element_key is not null) AND (Address->State is not null)"
	set sql = sql _ " GROUP BY Address->State"
	set status = statement.%Prepare(sql)
	if (''status) {
		set resultSet = statement.%Execute()
		if (resultSet.%SQLCODE = 0) {
			// successful %Execute
			// for testing using Terminal
			do resultSet.%Display()
			// for ODBC/JDBC
			// do %sqlcontext.AddResultSet(resultSet)
		}
		else {
			// error during %Execute
			set %sqlcontext.%SQLCODE = resultSet.%SQLCODE
			set %sqlcontext.%Message = resultSet.%Message
		} 
	}
	else {
		// error during %Prepare: bad SQL
		set ex = ##class(%Exception.StatusException).CreateFromStatus(status)
		set %sqlcontext.%SQLCODE = ex.AsSQLCODE()
		// 4th ":" piece contains %msg value
		set %sqlcontext.%Message = $piece(ex.AsSQLMessage(), ":", 4)
	}
	return resultSet  // return results to other server-side code
}
CopyFromObject(object) methodimpl {
	// for IRIS, use this line
	return ..%JSONImport(object)
	// for Cache, use these 5 lines
	//set ..Phone  = object.Phone
	//set ..Opens = $ztimeh(object.Opens)
	//set ..Closes = $ztimeh(object.Closes)
	//set ..NationalCurrency = object.NationalCurrency
	//return $$$OK
}
CopyToObject(object) methodimpl {
	// for IRIS, use these 6 lines
	set st = ..%JSONExportToString(.jsonString)
	if (''st) {
		set object = ##class(%Library.DynamicObject).%FromJSON(jsonString)
		set object.ID = ..%Id()
	}
	return st
	// for Cache, use these 6 lines
	//set object.Phone = ..Phone
	//set object.Opens = $ztime(..Opens)
	//set object.Closes = $ztime(..Closes)
	//set object.NationalCurrency = ..NationalCurrency
	//set object.ID = ..%Id()
	//return $$$OK
}
DurationOpenCalc(opens,closes) methodimpl {
	if (opens = "") || (closes = "") {set duration = ""}
	else {set duration = $ztime(closes - opens)}
	return duration }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0) methodimpl
	New cval,elem,errcnt,i,id,keepobjects,key,obj,rss1,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	Kill ^||%Populate
	d ##class(%Library.PopulateUtils).BuildReferenceSample("FCE.RealEstate",.rss1)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(FCE.Branch).%New()
	. f elem=1:1:($zu(165,1,11)) s cval=##class(%Library.PopulateUtils).String(5)_##class(%Library.PopulateUtils).String(5) d obj.ATMs.Insert(cval)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(FCE.RealEstate).%ExistsId(id) Do obj.AddressSetObjectId(id)
	. Set obj.Closes=##class(%Library.PopulateUtils).Integer($ztimeh("1:00pm"),$ztimeh("10:00pm"))
	. f elem=1:1:($zu(165,1,6)) s cval=##class(%Library.PopulateUtils).Float(0,1000000,2) s key=##class(FCE.Tests.Utilities).Currency() d obj.CurrencyBalances.SetAt(cval,key)
	. Set obj.Notes=""
	. Set obj.Opens=##class(%Library.PopulateUtils).Integer($ztimeh("6:00am"),$ztimeh("12:00n"))
	. Set obj.Phone=##class(%Library.PopulateUtils).USPhone()
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	Kill ^||%Populate
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("FCE.Branch",1,verbose,.%msg,1)
	Quit saved
Update(currencyOut="",amountOut=0,currencyIn="",amountIn=0) methodimpl {
	try {	
		set cb = ..CurrencyBalances
		set status = 1
		set (outChanged, inChanged) = 0
		// debit stock amount by amount taken out
		if (currencyOut '= "") && (amountOut > 0) {
			set outChanged = 1
			set balanceBeforeDebit = cb.GetAt(currencyOut)
			set balanceAfterDebit = balanceBeforeDebit - amountOut
			do cb.SetAt(balanceAfterDebit, currencyOut)
			set status = ..%ValidateObject()
			if ('status) {
				set ex = ##class(%Exception.StatusException).CreateFromStatus(status)
				throw ex
			}
		}
		// credit stock amount by amount put in
		if (currencyIn '= "") && (amountIn > 0) {
			set inChanged = 1
			set balanceBeforeCredit = cb.GetAt(currencyIn)
			set balanceAfterCredit = balanceBeforeCredit + amountIn
			do cb.SetAt(balanceAfterCredit, currencyIn)
			set status = ..%ValidateObject()
			if ('status) {
				set ex = ##class(%Exception.StatusException).CreateFromStatus(status)
				throw ex
			}
		}
		// create unforseen <DIVIDE> exception 10% of the time
		// if '$r(10) {write 1/0}
	}
	catch ex {
		// return custom error status and also write it to Application Error Log
		if (ex.Code = 7204) {
			set custom = "Not enough stock in branch for " _ currencyOut
			set status = $$Error^%apiOBJ(5001, custom)
			set exCustom = ##class(%Exception.StatusException).CreateFromStatus(status)
			do exCustom.Log()
		}
		elseif (ex.Code = 7203) {
			set custom = "Branch has no more room for " _ currencyIn
			set status = $$Error^%apiOBJ(5001, custom)
			set exCustom = ##class(%Exception.StatusException).CreateFromStatus(status)
			do exCustom.Log()
		}
		// or change unforeseen exception back into a status
		else {
			set status = ex.AsStatus()
			do ex.Log()
		}
		// reset currencyIn and currencyOut
		do:outChanged cb.SetAt(balanceBeforeDebit, currencyOut)
		do:inChanged cb.SetAt(balanceBeforeCredit, currencyIn)
		// write to messages log (IRIS) or console log (Cache), optionally triggering notification
		set consoleMsg = "Branch Stock Problem - Check Error Log for details: "
		set portalLink = "http://localhost:52773/csp/sys/op/UtilSysAppErrorNamespaces.csp"
		do ##class(%SYS.System).WriteToConsoleLog(consoleMsg _ portalLink, , 2)
	}
	return status }
zXMLDTD(top,format,input,dtdlist) methodimpl
 Quit ##class(%XML.Implementation).XMLDTD("FCE.Branch",.top,.format,.input,.dtdlist)
zXMLExportInternal() methodimpl
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"FCE.Branch")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"FCE.Branch")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="FCE.Branch"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Branch"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Branch"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Branch"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Phone
 If val'="" {
   Set temp="",temp1=$parameter("FCE.PhoneNumber","NAMESPACE")
   Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
   Set %xmlmsg=currentIndent_beginprefix_"Phone"_$select(xsitype:" "_xsiPrefix_"type="""_temp1_"PhoneNumber"""_temp,1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Phone>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Address
 If $IsObject(val) , deepFlag {
   Set id=""
   If encoded,'inlineFlag {
     Set temp=$select($parameter("FCE.RealEstate","XMLSUMMARY")'="":-1,1:1)
     Set id=+$get(idlist(temp*val))
     If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
   }
   If +id'=0 {
     Set %xmlmsg=currentIndent_beginprefix_"Address "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   } Else { if id=0 Set id=$increment(idlist)
     Set topArg="Address",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"FCE.RealEstate"),local=1,savexsiAttrs=xsiAttrs
     Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
   }
 }
 Set val=..Opens
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Opens"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"time""",1:"")_">"_$select(val="":"",1:$ztime(val,1,$l($p(val,".",2)),,1)_"Z")_endprefix_"Opens>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Closes
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Closes"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"time""",1:"")_">"_$select(val="":"",1:$ztime(val,1,$l($p(val,".",2)),,1)_"Z")_endprefix_"Closes>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..NationalCurrency
 If val'="" {
   Set temp="",temp1=$parameter("FCE.CurrencyName","NAMESPACE")
   Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
   Set %xmlmsg=currentIndent_beginprefix_"NationalCurrency"_$select(xsitype:" "_xsiPrefix_"type="""_temp1_"CurrencyName"""_temp,1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"NationalCurrency>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..DurationOpen
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"DurationOpen"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"DurationOpen>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..CurrencyBalances
 Set k="" Set val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     If soap12 { Set %xmlmsg=beginprefix_"CurrencyBalances"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_typesPrefix_"PairOfCurrencyBalancesKeyDecimal"_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"CurrencyBalances "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_typesPrefix_"PairOfCurrencyBalancesKeyDecimal"_"["_aval.Count()_"]""")_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"CurrencyBalances>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If val'="" {
       If encoded {
         Set %xmlmsg=currentIndent_beginprefix_"CurrencyBalancesItem>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
         Set %xmlmsg=currentIndent_indentChars_beginprefix_"CurrencyBalancesKey>"_k_endprefix_"CurrencyBalancesKey>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
         Set %xmlmsg=currentIndent_indentChars_beginprefix_"decimal"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"decimal>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
         Set %xmlmsg=currentIndent_endprefix_"CurrencyBalancesItem>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else {
         Set %xmlmsg=currentIndent_beginprefix_"CurrencyBalancesItem CurrencyBalancesKey="""_$zcvt(k,"O","XML")_""""_$select(encoded&&xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"CurrencyBalancesItem>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       }
     } Else {
       If encoded {
         Set %xmlmsg=currentIndent_beginprefix_"CurrencyBalancesItem>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
         Set %xmlmsg=currentIndent_indentChars_beginprefix_"CurrencyBalancesKey>"_k_endprefix_"CurrencyBalancesKey>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
         Set %xmlmsg=currentIndent_indentChars_beginprefix_"decimal "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
         Set %xmlmsg=currentIndent_endprefix_"CurrencyBalancesItem>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else {
           Set %xmlmsg=currentIndent_beginprefix_"CurrencyBalancesItem CurrencyBalancesKey="""_$zcvt(k,"O","XML")_""" "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       }
     }
     Set val=aval.GetNext(.k)
   }
     If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=endprefix_"CurrencyBalances>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..ATMs
 Set k="" Set val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp=""
     If soap12 { Set %xmlmsg=beginprefix_"ATMs"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_schemaPrefix_"string""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"ATMs "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_schemaPrefix_"string["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"ATMs>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If val'="" {
       Set %xmlmsg=currentIndent_beginprefix_"ATMsItem"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"ATMsItem>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else {
         Set %xmlmsg=currentIndent_beginprefix_"ATMsItem "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"ATMs>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..Orders
 Set k="" Set:deepFlag val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp="",temp1=$parameter("FCE.CurrencyOrder","NAMESPACE")
     Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
     If soap12 { Set %xmlmsg=beginprefix_"Orders"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_temp1_$select($parameter("FCE.CurrencyOrder","XMLSUMMARY")'="":"s_CurrencyOrder",1:"CurrencyOrder")_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"Orders "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_temp1_$select($parameter("FCE.CurrencyOrder","XMLSUMMARY")'="":"s_CurrencyOrder",1:"CurrencyOrder")_"["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"Orders>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If $IsObject(val) {
       Set id=""
       If encoded,'inlineFlag {
         Set temp=$select($parameter("FCE.CurrencyOrder","XMLSUMMARY")'="":-1,1:1)
         Set id=+$get(idlist(temp*val))
         If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
       }
       If +id'=0 {
         Set %xmlmsg=currentIndent_beginprefix_"CurrencyOrder "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else { if id=0 Set id=$increment(idlist)
         Set topArg="CurrencyOrder",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"FCE.CurrencyOrder"),local=1,savexsiAttrs=xsiAttrs
         Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
         If 'encoded Do aval.%UnSwizzleAt(k)
       }
     } Else {
       Set %xmlmsg=currentIndent_beginprefix_"CurrencyOrder "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"Orders>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Notes
 If (val'=""),('val.IsNull()) {
   If val.Size=0 {
     Set %xmlmsg=currentIndent_beginprefix_"Notes />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   } Else {
     Set %xmlmsg=currentIndent_beginprefix_"Notes"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set sc=$$WriteCDataCharStream^%occXMLInternal(val) If 'sc Goto XMLExportExit
     Set %xmlmsg=endprefix_"Notes>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="FCE.Branch" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes) methodimpl
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("FCE.Branch",.imports,.classes)
zXMLImportAttributes() methodimpl
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal() methodimpl
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"FCE.Branch")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("Phone")) Set nodelist=nodelist_"Phone, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="Phone" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Phone")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50)&&(data?3n1"-"3n1"-"4n):1,$l(data)>50:$$Error^%apiOBJ(7201,data,50),1:$$Error^%apiOBJ(7209,data,"3n1""-""3n1""-""4n"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Phone=data
   Goto XMLLOOP } }
 If tag="Address" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="RealEstate") {
       Set class="FCE.RealEstate"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("FCE.RealEstate",85,"s",class))_$get(^oddXML("FCE.RealEstate","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..Address=data
   Goto XMLLOOP } }
 If tag="Opens" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..OpensXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,,$ztimeh("6:00am"),$ztimeh("12:00n")):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<$ztimeh("6:00am"):$$Error^%apiOBJ(7204,data,$ztimeh("6:00am")),1:$$Error^%apiOBJ(7203,+data,$ztimeh("12:00n")))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Opens=data
   Goto XMLLOOP } }
 If tag="Closes" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..ClosesXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,,$ztimeh("1:00pm"),$ztimeh("10:00pm")):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<$ztimeh("1:00pm"):$$Error^%apiOBJ(7204,data,$ztimeh("1:00pm")),1:$$Error^%apiOBJ(7203,+data,$ztimeh("10:00pm")))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Closes=data
   Goto XMLLOOP } }
 If tag="NationalCurrency" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..NationalCurrency=data
   Goto XMLLOOP } }
 If tag="DurationOpen" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Goto XMLLOOP } }
 If tag="CurrencyBalances" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="CurrencyBalancesItem") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded {
           Set saveinner=inner,saveinnerlist=innerlist
           Do XMLImportId() Goto:'sc XMLImportExit
           Set tmp=inner,tmpi=innerlist
           Set descriptor=$zlascii(tmpi,$zwascii(tmpi,17)) Set inner=($zlascii(@(tree)@($piece(tmp,",",1)),$piece(tmp,",",2))\16)_","_$zwascii(tmpi,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,tmp,.tmpi,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(tmpi,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,tmp,.tmpi,inner,.descriptor) } Else {Set inner="" }} }
           If (inner="")||((descriptor#16)'=0) Set:inner="" inner=tmp Goto XMLImportMalformedNoTag
           Set innerlist=@(tree)@((descriptor\16))
           If @(tree)@("d",$zlascii(innerlist,9))'="CurrencyBalancesKey" Goto XMLImportBadTag
           Set descriptor=$zlascii(innerlist,$zwascii(innerlist,17)) Set key=($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)_","_$zwascii(innerlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set key=##class(%XML.ImportHandler).NextChild(tree,inner,.innerlist,key,.descriptor) } Else { Set key="" }} For { Quit:key=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(key,",",2)+4 Set key=$piece(key,",",1)_","_descriptor Set descriptor=$zlascii(innerlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set key=##class(%XML.ImportHandler).NextChild(tree,inner,.innerlist,key,.descriptor) } Else {Set key="" }} } If (descriptor#16)'=1 { Goto XMLImportMalformed  } Set key=@(tree)@("d",(descriptor\16))
           For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(tmpi,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,tmp,.tmpi,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
           Set innerlist=@(tree)@((descriptor\16))
         } Else {
           Do XMLImportAttrinner() Set key=$case($data(@(tree)@("d",$zlascii($get(attributeList("CurrencyBalancesKey")),13))),1:@(tree)@("d",$zlascii($get(attributeList("CurrencyBalancesKey")),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,$get(attributeList("CurrencyBalancesKey"))))
         }
         If key="" Goto XMLImportNoKey
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           If $zboolean(+($zlascii(innerlist,13)#16),+1,1) { Set data=""
           } Else {
                   If (($length(innerlist)-$zwascii(innerlist,17)-3)\4)>1 {
                     Set data="" Goto XMLImportErr
                   } Else { Set descriptor=$zlascii(innerlist,$zwascii(innerlist,17)) Set data=($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)_","_$zwascii(innerlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,inner,.innerlist,data,.descriptor) } Else { Set data="" }}
                     If data'="" { Goto:(descriptor#16)=0 XMLImportErr Set data=@(tree)@("d",(descriptor\16)) }}
                   Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$inumber(data,"LO","") Goto:data="" XMLImportErr Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,2,0,1000000):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<0:$$Error^%apiOBJ(7204,data,0),1:$$Error^%apiOBJ(7203,data,1000000))) XMLImportErr
           }
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
           If encoded Set inner=saveinner,innerlist=saveinnerlist
         Do ..CurrencyBalances.SetAt(data,key)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP } }
 If tag="ATMs" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="ATMsItem") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           If $zboolean(+($zlascii(innerlist,13)#16),+1,1) { Set data=""
           } Else {
                   If (($length(innerlist)-$zwascii(innerlist,17)-3)\4)>1 {
                     Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,inner,0,0,.data,,,innerlist) Goto XMLImportErr
                   } Else { Set descriptor=$zlascii(innerlist,$zwascii(innerlist,17)) Set data=($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)_","_$zwascii(innerlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,inner,.innerlist,data,.descriptor) } Else { Set data="" }}
                     If data'="" { Goto:(descriptor#16)=0 XMLImportErr Set data=@(tree)@("d",(descriptor\16)) }}
                   If data="" Set data=$c(0)
                   If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErr
           }
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         Do ..ATMs.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP } }
 If tag="Orders" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="CurrencyOrder") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           Do XMLImportAttrinner()
           Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
           If (class="") || (class="CurrencyOrder") {
             Set class="FCE.CurrencyOrder"
           } Else {
             If $length(class,":")=2 Set class=$piece(class,":",2)
             Set class=$get(^oddCOM("FCE.CurrencyOrder",85,"s",class))_$get(^oddXML("FCE.CurrencyOrder","s",class)) If class="" Set class=0
             Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
             If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadType
             If $listlength(class)>1 {
               For tmpi=1:1:$listlength(class) {
                 If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
               }
               If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadType
             } Else { Set class=$list(class) }
           }
           Set data=$classmethod(class,"XMLNew",handler,inner,$this)
           If $isobject(data) Set tag=@(tree)@("d",$zlascii(innerlist,9)),nodeArg=inner,nodeArgChildlist=innerlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         If data'="" Do ..Orders.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP } }
 If tag="Notes" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
       Set data=..Notes Do data.Rewind()
       Set tmp=##class(%XML.ImportHandler).SerializeNode(tree,child,1,0,.data,0,0,childlist)
       If 'tmp Goto XMLImportErrchild
       If tmp=-1 Set sc=data.Write("") If 'sc Goto XMLImportExit
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportNoKeychild Set inner=child
XMLImportNoKey Set sc=$$Error^%apiOBJ(6238,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull) methodimpl
 If ..Phone'="" Quit 0
 If $IsObject(..Address) Quit 0
 If ..Opens'="" Quit 0
 If ..Closes'="" Quit 0
 If ..NationalCurrency'="" Quit 0
 If ..DurationOpen'="" Quit 0
 If ..CurrencyBalances.Next("")'="" Quit 0
 If ..ATMs.Count()>0 Quit 0
 If ..Orders.Count()>0 Quit 0
 If (..Notes'=""),('..Notes.IsNull()) Quit 0
 Quit 1
zXMLNew(document,node,containerOref="") methodimpl
	Quit (##class(FCE.Branch).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema) methodimpl
 Quit ##class(%XML.Implementation).XMLSchema("FCE.Branch",top,format,namespacePrefix,input,refOnly,.schema)
ATMsBuildValueArray(value,array) methodimpl {
	Quit ##class(%Collection.ListOfDT).BuildValueArray(value,.array)
}
ATMsCollectionToDisplay(val="",delim="") methodimpl {
	Quit ##class(%Collection.ListOfDT).LogicalToOdbc(val,$select(delim="":$C(13,10),1:delim),$this,"ATMsLogicalToDisplay")
}
ATMsCollectionToOdbc(val="") methodimpl {
	Quit ##class(%Collection.ListOfDT).LogicalToOdbc(val,",",$this,"ATMsLogicalToOdbc")
}
ATMsDisplayToCollection(val="",delim="") methodimpl {
	Quit ##class(%Collection.ListOfDT).OdbcToLogical(val,$select(delim="":$C(13,10),1:delim),$this,"ATMsDisplayToLogical")
}
ATMsGetObject(force=0) methodimpl {
	Set id=..ATMs.Serialize(force)
	Quit $select(id="":"",1:$listbuild(id_"")) }
ATMsGetObjectId(force=0) methodimpl {
	Quit $listget(..ATMsGetObject(force)) }
ATMsGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),7),1:"") }
ATMsGetSwizzled(noswizzle=0) methodimpl {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%ATMs=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="FCE.Branch:ATMs",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."ATMs%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
ATMsOdbcToCollection(val="") methodimpl {
	Quit ##class(%Collection.ListOfDT).OdbcToLogical(val,",")
}
ATMsSet(newvalue) methodimpl {
	If '$isobject(newvalue),newvalue'="" Quit $$Error^%apiOBJ(5807,newvalue)
	If r%ATMs=newvalue Quit 1
	If newvalue="" Kill i%ATMs,r%ATMs Set i%ATMs="",r%ATMs="" Quit 1
	Set oref=r%ATMs Kill i%ATMs,r%ATMs Set i%ATMs="",r%ATMs=oref
	Set key="" For i=1:1 Set value=newvalue.GetNext(.key) Quit:key=""  Set i%ATMs(i)=value
	Quit 1 }
ATMsSetObject(newvalue) methodimpl {
	Set sc=..ATMs.DeSerialize($listget(newvalue)) If ('sc) Quit sc
	Quit 1 }
ATMsSetObjectId(newid) methodimpl {
	Quit ..ATMsSetObject($select(newid="":"",1:$listbuild(newid_""))) }
AddressGetObject(force=0) methodimpl {
	Quit $select(r%Address=""||(i%Address'=""):$select(i%Address="":"",1:$listbuild(i%Address_"")),(''..Address.%GetSwizzleObject(force,.oid)):oid,1:"") }
AddressGetObjectId(force=0) methodimpl {
	Quit $listget(..AddressGetObject(force)) }
AddressGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),3),1:"") }
AddressGetSwizzled(noswizzle=0) methodimpl {
	If noswizzle Quit r%Address
	If i%Address="" Quit ""
	Set oref=##class(FCE.RealEstate).%Open($select(i%Address="":"",1:$listbuild(i%Address_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%Address=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
AddressNewObject() methodimpl {
	Set newobject=##class(FCE.RealEstate).%New() If newobject="" Quit ""
	Set ..Address=newobject
	Quit newobject }
AddressSetObject(newvalue) methodimpl {
	If newvalue'="",$data(i%Address,tmp),tmp=$listget(newvalue) Quit 1
	Set i%Address=$listget(newvalue),r%Address=0,r%Address=""
	Quit 1 }
AddressSetObjectId(newid) methodimpl {
	Quit ..AddressSetObject($select(newid="":"",1:$listbuild(newid_""))) }
AddressUnSwizzle(force=0) methodimpl {
	If r%Address="" Quit 1
	Set sc=..Address.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%Address="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%Address=$listget(newvalue)
	Quit 1 }
ClosesDisplayToLogical(%val) methodimpl {
 quit:%val="" "" s %val=$ztimeh(%val,,"Error: '"_%val_"' is an invalid DISPLAY Time value") q:%val||(%val=0) %val s %msg=%val ZTRAP "OTIM" }
ClosesGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),5),1:"") }
ClosesIsValid(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,$ztimeh("1:00pm"),$ztimeh("10:00pm")):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<$ztimeh("1:00pm"):$$Error^%apiOBJ(7204,%val,$ztimeh("1:00pm")),1:$$Error^%apiOBJ(7203,+%val,$ztimeh("10:00pm"))) }
ClosesLogicalToDisplay(%val) methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,,$l($p(%val,".",2)))) }
ClosesLogicalToOdbc(%val="") methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,,$l($p(%val,".",2)),,1)) }
ClosesLogicalToXSD(%val) methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,1,$l($p(%val,".",2)),,1)_"Z") }
ClosesNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:+%val) }
ClosesOdbcToLogical(%val="") methodimpl {
	quit:%val=""||($zu(115,13)&&(%val=$c(0))) ""  quit:$isvalidnum(%val) %val s %val=$ztimeh(%val,,"Error: '"_%val_"' is an invalid ODBC/JDBC Time value",1) q:%val||(%val=0) %val s %msg=%val ZTRAP "OTIM" }
ClosesXSDToLogical(%val) methodimpl {
 If $get(%val)="" Quit ""
 If $length(%val,"T")=2 Set %val=$piece(%val,"T",2)
 Set len=$length(%val)
 If $extract(%val,len)="Z" {
   Set %val=$extract(%val,1,len-1)
 } ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
   If $extract(%val,len-2)'=":" Quit ""
   Set s=$ztimeh($extract(%val,1,len-6),1,"",1) If s="" Quit ""
   Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
   If $extract(%val,len-5)="-" {
     Set s=s+z
   } Else {
     Set s=s-z
   }
   Quit s#86400
 }
 Quit $ztimeh(%val,1,"",1) }
CurrencyBalancesBuildValueArray(value,array) methodimpl {
	Quit ##class(%Collection.ArrayOfDT).BuildValueArray(value,.array)
}
CurrencyBalancesCollectionToDis(val="",delim="") methodimpl {
	Quit ##class(%Collection.ArrayOfDT).LogicalToOdbc(val,$select(delim="":$C(13,10),1:delim),$this,"CurrencyBalancesLogicalToDisplay")
}
CurrencyBalancesCollectionToOdb(val="") methodimpl {
	Quit ##class(%Collection.ArrayOfDT).LogicalToOdbc(val,",")
}
CurrencyBalancesDisplayToCollec(val="",delim="") methodimpl {
	Quit ##class(%Collection.ArrayOfDT).OdbcToLogical(val,$select(delim="":$C(13,10),1:delim),$this,"CurrencyBalancesDisplayToLogical")
}
CurrencyBalancesDisplayToLogica(%val) methodimpl {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
CurrencyBalancesGetObject(force=0) methodimpl {
	Set id=..CurrencyBalances.Serialize(force)
	Quit $select(id="":"",1:$listbuild(id_"")) }
CurrencyBalancesGetObjectId(force=0) methodimpl {
	Quit $listget(..CurrencyBalancesGetObject(force)) }
CurrencyBalancesGetStored(id) methodimpl {
	Quit $Select(id'="":$g(^FCE.BranchD(id,"CurrencyBalances")),1:"") }
CurrencyBalancesGetSwizzled(noswizzle=0) methodimpl {
	Set oref=##class(%Collection.ArrayOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%CurrencyBalances=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="FCE.Branch:CurrencyBalances",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."CurrencyBalances%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
CurrencyBalancesIsValid(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,2,0,1000000):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<0:$$Error^%apiOBJ(7204,%val,0),1:$$Error^%apiOBJ(7203,%val,1000000)) }
CurrencyBalancesLogicalToDispla(%val) methodimpl {
	Quit $s(%val="":"",1:$fn(%val,"",2)) }
CurrencyBalancesLogicalToJSON(%val) methodimpl {
	Quit $select($extract(%val)=".":"0"_%val,$extract(%val,1,2)="-.":"-0."_$extract(%val,3,*),1:%val) }
CurrencyBalancesNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:$normalize($decimal(%val),2)) }
CurrencyBalancesOdbcToCollectio(val="") methodimpl {
	Quit ##class(%Collection.ArrayOfDT).OdbcToLogical(val,",")
}
CurrencyBalancesSet(newvalue) methodimpl {
	If '$isobject(newvalue),newvalue'="" Quit $$Error^%apiOBJ(5807,newvalue)
	If r%CurrencyBalances=newvalue Quit 1
	If newvalue="" Kill i%CurrencyBalances,r%CurrencyBalances Set i%CurrencyBalances="",r%CurrencyBalances="" Quit 1
	Set oref=r%CurrencyBalances Kill i%CurrencyBalances,r%CurrencyBalances Set i%CurrencyBalances="",r%CurrencyBalances=oref
	Set key="" For  Set value=newvalue.GetNext(.key) Quit:key=""  Set i%CurrencyBalances(key)=value
	Quit 1 }
CurrencyBalancesSetObject(newvalue) methodimpl {
	Set sc=..CurrencyBalances.DeSerialize($listget(newvalue)) If ('sc) Quit sc
	Quit 1 }
CurrencyBalancesSetObjectId(newid) methodimpl {
	Quit ..CurrencyBalancesSetObject($select(newid="":"",1:$listbuild(newid_""))) }
CurrencyBalancesXSDToLogical(%val) methodimpl {
	Quit $inumber(%val,"LO","") }
zDurationOpenCompute(%id,%d1,%d2) methodimpl
	New %tException,%val set %val = ""
	try {
	set %val = ##class(FCE.Branch).DurationOpenCalc(%d2, %d1)
	} catch %tException { throw %tException }
	Quit %val
DurationOpenGet() methodimpl {
	Quit ..DurationOpenCompute($listget(i%"%%OID"),..Closes,..Opens) }
zDurationOpenSQLCompute() methodimpl
	// Compute code for field DurationOpen
 set %d(5) = ##class(FCE.Branch).DurationOpenCalc($g(%d(8)), $g(%d(4)))
 QUIT
NationalCurrencyDisplayToLogica(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
NationalCurrencyGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),6),1:"") }
NationalCurrencyIsValid(%val) methodimpl {
	Quit $select(%val'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%val_"-")):1,1:$$Error^%apiOBJ(7205,%val,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")) }
NationalCurrencyLogicalToDispla(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
NationalCurrencyLogicalToOdbc(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
NationalCurrencyOdbcToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
NotesDelete(streamvalue) methodimpl {
	Set $ZTrap = "CatchError"
	Quit $select(streamvalue="":$$Error^%apiOBJ(5813,$classname()),1:##class(%Stream.GlobalCharacter).%Delete($select(streamvalue="":"",1:$listbuild(streamvalue_"","%Stream.GlobalCharacter","^FCE.BranchS"))))
CatchError	Set $ZTrap=""
	Quit $$Error^%apiOBJ(5002,$zerror) }
NotesGetObject(force=0) methodimpl {
	Quit:r%Notes="" $select(i%Notes="":"",1:$listbuild(i%Notes_"","%Stream.GlobalCharacter","^FCE.BranchS")) Quit:(''..Notes.%GetSwizzleObject(force,.oid)) oid Quit "" }
NotesGetObjectId(force=0) methodimpl {
	Quit $listget(..NotesGetObject(force)) }
NotesGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),8),1:"") }
NotesGetSwizzled(noswizzle=0) methodimpl {
	If i%Notes="" Set modstate=$system.CLS.GetSModifiedBits() Set oref=..NotesNewObject("") Do $system.CLS.SetSModifiedBits(modstate) Set r%Notes=0,r%Notes=oref Quit oref
	Set oref=##class(%Stream.GlobalCharacter).%Open($select(i%Notes="":"",1:$listbuild(i%Notes_"","%Stream.GlobalCharacter","^FCE.BranchS")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%Notes=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
NotesNewObject(type="") methodimpl {
	Set $ZTrap = "CatchError"
	Set sc=1
	If type="" {
		Set type = "%Stream.GlobalCharacter"
	} ElseIf '($classmethod(type,"%IsA","%Stream.GlobalCharacter")) {
		Set sc=$$Error^%apiOBJ(5833,"FCE.Branch","Notes") Quit ""
	}
	Set newobject=$classmethod(type,"%New","^FCE.BranchS") If newobject="" Quit ""
	Set r%Notes=0,i%Notes=0,r%Notes=newobject,i%Notes=""
	Quit newobject
CatchError	Set $ZTrap=""
	If (''sc) Set sc = $$Error^%apiOBJ(5002,$ze)
	Quit "" }
NotesOid(streamvalue,external="") methodimpl {
	Quit $s($isobject(streamvalue):streamvalue.%Oid(),1:$select(streamvalue="":"",1:$listbuild(streamvalue_"","%Stream.GlobalCharacter","^FCE.BranchS"))) }
NotesOpen(streamvalue) methodimpl {
	If $get(streamvalue)="" {
		Set object=##class(%Stream.GlobalCharacter).%New("^FCE.BranchS")
	} elseif $isobject(streamvalue)=1 {
		set object = streamvalue
	} else {
		Set object=##class(%Stream.GlobalCharacter).%Open($select(streamvalue="":"",1:$listbuild(streamvalue_"","%Stream.GlobalCharacter","^FCE.BranchS")))
		If $isobject(object)=1,object.%IsNull()=1 Quit ""
	}
	Quit object }
NotesSet(newvalue) methodimpl {
	If newvalue="" Set r%Notes=0,i%Notes=0,r%Notes="",i%Notes="" Quit 1
	If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
	If newvalue=r%Notes Quit 1
	If newvalue.%IsA("%Stream.GlobalCharacter") {
		Set r%Notes=newvalue.%ConstructClone(0,,"^FCE.BranchS"),i%Notes=1,i%Notes=""
	} Else {
		Do ..Notes.Clear()
		Quit ..Notes.CopyFrom(newvalue)
	}
	Quit 1 }
NotesSetObject(newvalue) methodimpl {
	If newvalue'="",$data(i%Notes,tmp),tmp=$listget(newvalue) Quit 1
	Set i%Notes=$listget(newvalue),r%Notes=0,r%Notes=""
	Quit 1 }
NotesSetObjectId(newid) methodimpl {
	Quit ..NotesSetObject($select(newid="":"",1:$listbuild(newid_""))) }
NotesUnSwizzle(force=0) methodimpl {
	If r%Notes="" Quit 1
	Set sc=..Notes.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%Notes="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%Notes=$listget(newvalue)
	Quit 1 }
OpensDisplayToLogical(%val) methodimpl {
 quit:%val="" "" s %val=$ztimeh(%val,,"Error: '"_%val_"' is an invalid DISPLAY Time value") q:%val||(%val=0) %val s %msg=%val ZTRAP "OTIM" }
OpensGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),4),1:"") }
OpensIsValid(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,$ztimeh("6:00am"),$ztimeh("12:00n")):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<$ztimeh("6:00am"):$$Error^%apiOBJ(7204,%val,$ztimeh("6:00am")),1:$$Error^%apiOBJ(7203,+%val,$ztimeh("12:00n"))) }
OpensLogicalToDisplay(%val) methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,,$l($p(%val,".",2)))) }
OpensLogicalToOdbc(%val="") methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,,$l($p(%val,".",2)),,1)) }
OpensLogicalToXSD(%val) methodimpl {
	Quit $select(%val="":"",1:$ztime(%val,1,$l($p(%val,".",2)),,1)_"Z") }
OpensNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:+%val) }
OpensOdbcToLogical(%val="") methodimpl {
	quit:%val=""||($zu(115,13)&&(%val=$c(0))) ""  quit:$isvalidnum(%val) %val s %val=$ztimeh(%val,,"Error: '"_%val_"' is an invalid ODBC/JDBC Time value",1) q:%val||(%val=0) %val s %msg=%val ZTRAP "OTIM" }
OpensXSDToLogical(%val) methodimpl {
 If $get(%val)="" Quit ""
 If $length(%val,"T")=2 Set %val=$piece(%val,"T",2)
 Set len=$length(%val)
 If $extract(%val,len)="Z" {
   Set %val=$extract(%val,1,len-1)
 } ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
   If $extract(%val,len-2)'=":" Quit ""
   Set s=$ztimeh($extract(%val,1,len-6),1,"",1) If s="" Quit ""
   Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
   If $extract(%val,len-5)="-" {
     Set s=s+z
   } Else {
     Set s=s-z
   }
   Quit s#86400
 }
 Quit $ztimeh(%val,1,"",1) }
OrdersGetObject(force=0) methodimpl {
	Quit $select(r%Orders=""&&($data(i%Orders)):$select(i%Orders="":"",1:$listbuild(i%Orders_"")),(''..Orders.%GetSwizzleObject(force,.oid)):oid,1:"") }
OrdersGetObjectId(force=0) methodimpl {
	Quit $listget(..OrdersGetObject(force)) }
OrdersGetSwizzled(noswizzle=0) methodimpl {
	If r%Orders'="" Quit r%Orders
	If i%Orders'="" {
		Set oid=$select(i%Orders="":"",1:$listbuild(i%Orders_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("FCE.CurrencyOrder","Branch",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%Orders=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="FCE.CurrencyOrder"
	Do oref.%SetModified(0)
	Quit oref }
OrdersIsEmpty() methodimpl {
	Quit $listget(..OrdersGetObject(1))="" }
OrdersNewObject() methodimpl {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("FCE.CurrencyOrder","Branch",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..Orders=newobject
	Quit newobject }
OrdersRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) methodimpl {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
OrdersRelate(oref) methodimpl {
	Quit ..Orders.Relate(oref) }
OrdersSet(newvalue) methodimpl {
	If newvalue="" {
		If r%Orders="",i%Orders="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%Orders=newvalue Quit 1
		If r%Orders="",i%Orders'="",i%Orders=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%Orders=newvalue Do newvalue.BranchRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	Set r%Orders=newvalue,i%Orders=0,i%Orders=""
	Quit 1 }
OrdersUnRelate(oref) methodimpl {
	Quit ..Orders.UnRelate(oref) }
PhoneGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.BranchD(id)),2),1:"") }
PhoneIsValid(%val) methodimpl {
	Q $s(($l(%val)'>50)&&(%val?3n1"-"3n1"-"4n):1,$l(%val)>50:$$Error^%apiOBJ(7201,%val,50),1:$$Error^%apiOBJ(7209,%val,"3n1""-""3n1""-""4n")) }
PhoneLogicalToDisplay(phone) methodimpl {
	return "(" _ $piece(phone, "-") _ ")-" _ $piece(phone, "-", 2, 3) }
CurrencySummaryClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If $get(SQLCODE) { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	RETURN sc }
CurrencySummaryExecute(%qHandle,minimum=0) [ SQLCODE,minimum ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(DECLARE Q1 CURSOR FOR
 	 ;---		 select element_key as Currency, count(Branch) as Branch_Count,
 	 ;---		        sum(Balance) as Total_Balance
 	 ;---		 from FCE.Branch_Balance
 	 ;---		 group by element_key
 	 ;---		 having sum(Balance) >= :minimum
 	 ;---		 order by element_key
 	 ;---		)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, minimum
	 
	 ;---&sql(OPEN Q1)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EdPyXJK9AJ09x1cFTmqpqmMB2Zp",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlJ() } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_" %msg = "_$g(%msg)) } Else { Set sc=1 }
	Quit sc }
CurrencySummaryFetch(%qHandle,Row,AtEnd=0) [ SQLCODE,minimum ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,minimum 
	kill Row Set Row="",AtEnd=0
	 ;---&sql(FETCH Q1 INTO :Row(0,1),:Row(0,2),:Row(0,3))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s Row(0,1)=%qHandle.sqlcol1,Row(0,2)=%qHandle.sqlcol2,Row(0,3)=%qHandle.sqlcol3 } }
	If 'SQLCODE { Set sc=1,Row=$lb(Row(0,1),Row(0,2),Row(0,3)) }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
CurrencySummaryFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE,minimum ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,minimum 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		Set sc=..CurrencySummaryFetch(.%qHandle,.Row,.AtEnd)
		If (''sc) { Set RowSet=RowSet_Row,ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>30000)||(AtEnd) } Else { Set AtEnd=1 Quit }
	}
	Quit sc }
CurrencySummarySendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE,minimum ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,minimum 
	set %qrc=0,piece=0
	for {
		 ;---&sql(fetch Q1 into :d1,:d2,:d3 )
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s d1=%qHandle.sqlcol1,d2=%qHandle.sqlcol2,d3=%qHandle.sqlcol3 } }
		if SQLCODE<0 { set %qrc=SQLCODE set:$isobject($g(%sqlcontext)) %sqlcontext.SQLCode=SQLCODE,%sqlcontext.Message=$g(%msg) do Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if SQLCODE { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport($lb(d1,d2,d3),60)
	}
	RETURN }
 q
%0dsqlJ()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE Q1 CURSOR FOR SELECT element_key AS Currency , COUNT ( Branch ) AS Branch_Count , SUM ( Balance ) AS Total_Balance "
	s %xxsql("S",2)="INTO  :i%sqlcol1, :i%sqlcol2, :i%sqlcol3"
	s %xxsql("S",3)="FROM FCE . Branch_Balance GROUP BY element_key HAVING SUM ( Balance ) >= :minimum ORDER BY element_key"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),",3,Q1,","FCE.Branch.CLS",1)
	q %xxoref
CurrencySummaryFunc(minimum=0) methodimpl {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT element_key AS Currency , COUNT ( Branch ) AS Branch_Count , SUM ( Balance ) AS Total_Balance FROM FCE . Branch_Balance GROUP BY element_key HAVING SUM ( Balance ) >= ? ORDER BY element_key /*#OPTIONS {""DynamicSQL"":1} */")
		set tResult = tStatement.%Execute($g(minimum))
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
CurrencySummaryGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) methodimpl {
	Set colinfo=$lb($lb("Currency",10,"Currency"),$lb("Branch_Count",18,"Branch_Count"),$lb("Total_Balance",14,"Total_Balance"))
	Set parminfo=$lb($lb("minimum","10"))
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb(1,$lb($lb("FCE.BranchCurrencyBalances","element_key"),$lb("",""),$lb("","")))
	}
	Quit 1 }
CurrencySummaryGetODBCInfo(colinfo,parminfo,qHandle) methodimpl {
	Set metadata=$lb(1,3,"Currency",12,50,0,0,"Currency","Branch_Balance","FCE","",$c(0,1,0,0,0,0,1,0,0,0,0,0,0),"Branch_Count",-5,19,0,0,"Branch_Count","","","",$c(0,0,0,1,0,0,0,0,0,0,0,0,0),"Total_Balance",2,18,2,1,"Total_Balance","","","",$c(0,0,0,1,0,0,0,0,0,0,0,0,0),1,12,50,0,2,"minimum",1)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1 }
CurrencySummaryPrepare(qHandle,statement,containid=0,optional) methodimpl {
	Quit 1 }
ExtentClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentExecute(%qHandle) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM %NOPARALLEL FCE.Branch)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjDw0p2kdrPOqmxtDIv2BFd4sQr",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlN() } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_" %msg = "_$g(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
ExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
ExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport(row,60)
	}
	RETURN }
 q
%0dsqlN()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL FCE . Branch"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),",1,QExtent,","FCE.Branch.CLS",1)
	q %xxoref
ExtentFunc() methodimpl {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM %NOPARALLEL FCE . Branch /*#OPTIONS {""DynamicSQL"":1} */")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
ExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) methodimpl {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) methodimpl
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Branch","FCE","",$c(0,0,0,0,0,0,0,0,0,0,0,1,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1
AddressIndexCheckUnique(id="",pValue...) [ SQLCODE,id,pValue ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	if $Get(pValue(1))'="" {
		 ;---&sql(SELECT 1 as _PassFail FROM FCE.Branch WHERE Address = :pValue(1) AND %ID <> :id)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, pValue
		try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EUYeH6wVimY00iipqWmAy3Pkapi","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EUYeH6wVimY00iipqWmAy3Pkapi"))||($ze["<ZSQLU>") { d %0dsqlR } else { throw } }
		Quit SQLCODE=100
	} else { quit 1 } }
 q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT 1 AS _PassFail FROM FCE . Branch WHERE Address = :pValue(1) AND %ID <> :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return
PhoneIndexCheckUnique(id="",pValue...) [ SQLCODE,id,pValue ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	if $Get(pValue(1))'="" {
		 ;---&sql(SELECT 1 as _PassFail FROM FCE.Branch WHERE Phone = :pValue(1) AND %ID <> :id)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, pValue
		try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EB5xvakiy0b8ptz2XiLecELw2Bj","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EB5xvakiy0b8ptz2XiLecELw2Bj"))||($ze["<ZSQLU>") { d %0dsqlT } else { throw } }
		Quit SQLCODE=100
	} else { quit 1 } }
 q
%0dsqlT	n %xxsql
	s %xxsql("S",1)="SELECT 1 AS _PassFail FROM FCE . Branch WHERE Phone = :pValue(1) AND %ID <> :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return
RealEstateFKCheck(kp1,lockonly=0) methodimpl {
	Quit ##class(FCE.RealEstate).%1Check(kp1,lockonly)
}
RealEstateFKDelete(kp1) [ SQLCODE,kp1 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(update FCE.Branch(Address) values (NULL) where Address = :kp1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, kp1
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EkNjiIyRy5bJiDDRNayUoorpoa5","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EkNjiIyRy5bJiDDRNayUoorpoa5"))||($ze["<ZSQLU>") { d %0dsqlV } else { throw } }
	Quit $Select(SQLCODE'<0:1,1:$$Error^%apiOBJ(5830,"FCE.Branch.RealEstateFK","FCE.RealEstate","DELETE","SET NULL")) }
 q
%0dsqlV	n %xxsql
	s %xxsql("S",1)="UPDATE FCE . Branch ( Address ) VALUES ( NULL ) WHERE Address = :kp1"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return
zRealEstateFKSQLFKeyExists(%p...) methodimpl
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT Address
 	 ;---	     FROM   FCE.Branch
 	 ;---	     WHERE  Address=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %p, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EFrSjvBRe9wnpVnJOvwplQU8MNF","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EFrSjvBRe9wnpVnJOvwplQU8MNF"))||($ze["<ZSQLU>") { d %0dsqlX } else { throw } }
	QUIT SQLCODE=0
 q
%0dsqlX	n %xxsql
	s %xxsql("S",1)="SELECT Address FROM FCE . Branch WHERE Address = :%p(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return
zRealEstateFKSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...) methodimpl
		// ON UPDATE NOACTION
	if %oper="UPDATE" quit:%p(1)="" 0 new rx set rx=..RealEstateFKSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"FCE"_"."_"Branch",k,"RealEstateFK","'Address'") QUIT rx
	if %oper="DELETE" {	// ON DELETE SET NULL
		quit:%p(1)="" 0 
		new %check if pNoLock=1 { set %check=$c(0,1,0,0,0,0,0) } else { set %check=$c(0,0,0,0,0,0,0) }
		 ;---&sql(UPDATE %USECHECKVARIABLE FCE.Branch (Address) VALUES (NULL) WHERE Address = :%p(1))
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %p, SQLCODE
		try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjBANUvpTD0uu8wB8hvigtBpuck","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EjBANUvpTD0uu8wB8hvigtBpuck"))||($ze["<ZSQLU>") { d %0dsqlZ } else { throw } }
		set:SQLCODE<0 %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler31",,"FCE"_"."_"Branch",k)_$s($g(%msg)'="":":  "_%msg,1:"")
		QUIT (SQLCODE<0)
	}
	Return
 q
%0dsqlZ	n %xxsql
	s %xxsql("S",1)="UPDATE %USECHECKVARIABLE FCE . Branch ( Address ) VALUES ( NULL ) WHERE Address = :%p(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return
RealEstateFKUpdate(kp1,nkp1) [ SQLCODE,id,kp1 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,id 
	 ;---&sql(select %ID into :id from FCE.Branch where Address = :kp1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, kp1
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EBZA2c3ru7gqOwiffcaft2HQkPb","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EBZA2c3ru7gqOwiffcaft2HQkPb"))||($ze["<ZSQLU>") { d %0dsql1 } else { throw } }
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5831,"FCE.Branch","FCE.RealEstate","UPDATE","%%IDKEY")) }
 q
%0dsql1	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Branch WHERE Address = :kp1"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
AddressIndexCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s exists=..AddressIndexExists(K1,.id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"AddressIndex",K1),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..AddressIndexExists(K1,.idcheck) d:concurrency ..%UnlockId(id,1,0) quit $s(('exists)||(id'=idcheck):$$Error^%apiOBJ(5797,$classname(),"AddressIndex",K1),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
AddressIndexDelete(K1,concurrency=-1) methodimpl {
	i ..AddressIndexExists(K1,.id){ s sc=..%DeleteId(id,concurrency) } Else { s sc=$$Error^%apiOBJ(5771,"AddressIndex",K1) }
	QUIT sc }
AddressIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Branch WHERE (:K1 is not null and Address = :K1) OR (:K1 IS NULL AND Address IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ELEArUWwqL2gR0DdzEzjdUaHclk","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ELEArUWwqL2gR0DdzEzjdUaHclk"))||($ze["<ZSQLU>") { d %0dsql3 } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsql3	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Branch WHERE ( :K1 IS NOT NULL AND Address = :K1 ) OR ( :K1 IS NULL AND Address IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
AddressIndexOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
 i ..AddressIndexExists(K1,.id){ s return=..%OpenId(id,concurrency,.sc) } Else { s sc=$$Error^%apiOBJ(5770,"AddressIndex",K1),return="" }
 QUIT return }
zAddressIndexSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::AddressIndexSQLCheckUnique")
zAddressIndexSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key AddressIndex.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=..AddressIndexSQLFindRowIDByConstraint($lb(%pVal(1)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Branch"_":"_"AddressIndex") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.BranchI("AddressIndex",%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zAddressIndexSQLFindPKeyByConst(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::AddressIndexSQLFindPKeyByConstraint")
zAddressIndexSQLFindRowIDByCons(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key AddressIndex value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(3)=$lg(%con,1)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Branch WHERE Address = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E7gQquYoviMW5uYpxiFsYpIh1pD","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E7gQquYoviMW5uYpxiFsYpIh1pD"))||($ze["<ZSQLU>") { d %0dsql5 } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsql5	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Branch WHERE Address = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
IDKEYCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
IDKEYDelete(K1,concurrency=-1) methodimpl {
	Quit ..%DeleteId(.K1,concurrency) }
IDKEYExists(K1,id="") methodimpl {
	s id=K1 q ..%ExistsId(K1) }
IDKEYOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Branch"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.BranchD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
NotesiFindDeleteIndex(pID,pArg...) methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	do ##class(%iFind.Filer.BasicNE).Delete(pID,"^FCE.BranchI(""NotesiFind"")",.tParams)
}
NotesiFindEmbedded() methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	quit ##class(FCE.Branch.dlaEkA).%New(.tParams)
}
NotesiFindFind(pSearch,pOption=0,pLanguage="",pSynonymOption="") [ SQLCODE,%msg ] methodimpl { s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	try {
		set tSearcher = ..NotesiFindEmbedded()
		do tSearcher.PrepareFind(pSearch,pOption,pLanguage,pSynonymOption)
	}
	catch tException {
		set %sqlcontext.%SQLCODE = tException.AsSQLCODE(), %sqlcontext.%Message = tException.AsSQLMessage()
		THROW tException
	}
	quit tSearcher }
NotesiFindGetIndexParams(pParams) methodimpl {
	kill pParams
	set pParams("COMPILEDVERSION")="2023.2"
	set pParams("IFINDADVANCEDSQLPREFIX") = ""
	set pParams("IFINDMAPPINGS") = 0
	set pParams("IFINDSHAREDDATALOCATION") = ""
	set pParams("INTKEYPROPERTY") = ""
	set pParams("RANKERCLASS") = "%iFind.Rank.TFIDF"
	set pParams("SUPPORTSSHARDING") = 1
	set pParams("LANGUAGE") = "en"
	set pParams("LOWER") = 1
	set pParams("INDEXOPTION") = 0
	set pParams("USERDICTIONARY") = ""
	set pParams("STEMMINGCONFIG") = ""
	set pParams("KEEPCHARS") = "`-_"
	set pParams("TRANSFORMATIONSPEC") = ""
	set pParams("IGNOREPUNCTUATION") = 0
	quit 1 }
NotesiFindGetStringValue(pRecordID) methodimpl {
	set pSC=1, tObj = ##class(FCE.Branch).%OpenId(pRecordID,,.pSC)
	quit:tObj="" ""
	set tFullText=""
	quit:tObj.Notes="" ""
	set tFullText=""
	do tObj.Notes.Rewind()
	while 'tObj.Notes.AtEnd {
		set tLen=32656, tFullText = tFullText_tObj.Notes.Read(.tLen, .pSC)
		quit:('pSC)
	}
	quit:('pSC) ""
	quit tFullText }
NotesiFindHighlight(pRecordID,pSearchString,pSearchOption,pTags,pLimit=0,pSC) [ SQLCODE,%msg ] methodimpl { s:'($d(pSearchOption)#2) pSearchOption=0 s:'($d(pTags)#2) pTags="<b>,<font color=""red"">" s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	set pSC=1, tFullText = ..NotesiFindGetStringValue(pRecordID)
	do ..NotesiFindGetIndexParams(.tParams)
	quit ##class(%iFind.Utils).HighlightInternal("^FCE.BranchI(""NotesiFind"")","","FCE.Branch.dlaEkA", pRecordID, tFullText, pSearchString, pSearchOption, pTags, pLimit, .tParams, .pSC)
}
NotesiFindInsertIndex(pID,pArg...) methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	set tStream = ##class(FCE.Branch).NotesOpen(pArg(1))
	if tStream '= "" {
		do ##class(%iFind.Filer.BasicNE).FileIndexStream(tStream,"NotesiFind","^FCE.BranchI(""NotesiFind"")",pID,.tParams)
	} }
NotesiFindNormalize(pQuery="",pLanguage="") methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	set:pLanguage="" pLanguage = $g(tParams("LANGUAGE"),"en")
	quit ##class(%iFind.Utils).NormalizeString(pQuery, pLanguage, .tParams)
}
NotesiFindPurgeIndex() methodimpl {
	set settings=$g(^FCE.BranchI("NotesiFind"))
	kill ^FCE.BranchI("NotesiFind")
	set:settings'="" ^FCE.BranchI("NotesiFind")=settings }
NotesiFindRank(pRecordID,pSearchString,pSearchOption) [ SQLCODE,%msg ] methodimpl { s:'($d(pSearchOption)#2) pSearchOption=0 s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	quit ##class(%iFind.Utils).Rank("%iFind.Rank.TFIDF","FCE.Branch","NotesiFind",pRecordID,pSearchString,pSearchOption)
}
NotesiFindSegmentInsert(pIndexBuffer,pID,pArg...) methodimpl {
	do ..NotesiFindInsertIndex(pID, pArg...) }
NotesiFindSortEndIndex(pCommit=1) methodimpl {
	quit 1 }
NotesiFindStripCharacters(pWord) methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	quit $zstrip(pWord,"<>P",,tParams("KEEPCHARS")) }
NotesiFindStrippedEntityId(pEntity) methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	set tNumWords = $length(pEntity," "), tHasStripped=0
	kill tStrippedWords
	for i = 1:1:tNumWords {
		set tWord = $piece(pEntity," ",i)
		set tStrippedWords(i)=$zstrip(tWord,"<>P",,tParams("KEEPCHARS"))
		set:'tHasStripped tHasStripped=(tStrippedWords(i)'=tWord)
	}
	set tEntityKey=""
	for i = 1:1:tNumWords {
		set tWord = tStrippedWords(i)
		continue:tWord=""
		if '$d(^IRIS.IF.WordI(" "_tWord),tWordId) {
			return pOriginalId
		}
		set:tEntityKey'="" tEntityKey=tEntityKey_","
		set tEntityKey=tEntityKey_tWordId
	}
	quit $s(tEntityKey="":"", 1:$g(^IRIS.IF.EntityI(tEntityKey))) }
NotesiFindStrippedWordId(pWord) methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	set tWord = $zstrip(pWord,"<>P",,tParams("KEEPCHARS"))
	quit $s(tWord="":"", 1:$g(^IRIS.IF.WordI(" "_tWord))) }
NotesiFindUpdateIndex(pID,pArg...) methodimpl {
	do ..NotesiFindGetIndexParams(.tParams)
	do ##class(%iFind.Filer.BasicNE).Delete(pID,"^FCE.BranchI(""NotesiFind"")",.tParams)
	set tStream = ##class(FCE.Branch).NotesOpen(pArg(1))
	if tStream '= "" {
		do ##class(%iFind.Filer.BasicNE).FileIndexStream(tStream,"NotesiFind","^FCE.BranchI(""NotesiFind"")",pID,.tParams)
	} }
PhoneIndexCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s exists=..PhoneIndexExists(K1,.id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"PhoneIndex",K1),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..PhoneIndexExists(K1,.idcheck) d:concurrency ..%UnlockId(id,1,0) quit $s(('exists)||(id'=idcheck):$$Error^%apiOBJ(5797,$classname(),"PhoneIndex",K1),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
PhoneIndexDelete(K1,concurrency=-1) methodimpl {
	i ..PhoneIndexExists(K1,.id){ s sc=..%DeleteId(id,concurrency) } Else { s sc=$$Error^%apiOBJ(5771,"PhoneIndex",K1) }
	QUIT sc }
PhoneIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Branch WHERE (:K1 is not null and Phone = :K1) OR (:K1 IS NULL AND Phone IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EHcSDSdgRRIO0eu2J2TFPrnUeMN","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EHcSDSdgRRIO0eu2J2TFPrnUeMN"))||($ze["<ZSQLU>") { d %0dsql7 } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsql7	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Branch WHERE ( :K1 IS NOT NULL AND Phone = :K1 ) OR ( :K1 IS NULL AND Phone IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
PhoneIndexOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
 i ..PhoneIndexExists(K1,.id){ s return=..%OpenId(id,concurrency,.sc) } Else { s sc=$$Error^%apiOBJ(5770,"PhoneIndex",K1),return="" }
 QUIT return }
zPhoneIndexSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::PhoneIndexSQLCheckUnique")
zPhoneIndexSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key PhoneIndex.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=..PhoneIndexSQLFindRowIDByConstraint($lb(%pVal(1)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Branch"_":"_"PhoneIndex") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.BranchI("PhoneIndex",$zu(28,%pVal(1),7))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zPhoneIndexSQLFindPKeyByConstra(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::PhoneIndexSQLFindPKeyByConstraint")
zPhoneIndexSQLFindRowIDByConstr(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key PhoneIndex value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(9)=$lg(%con,1)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Branch WHERE Phone = :%d(9))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ey9bPQH2WTkVS1fUbTy1a7dt2Yc","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ey9bPQH2WTkVS1fUbTy1a7dt2Yc"))||($ze["<ZSQLU>") { d %0dsql9 } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsql9	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Branch WHERE Phone = :%d(9)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","COMPOSITESRCID")=$c(1)
	s %xxsql("M","FORKNETDMN")=$c(1),%xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","USEPREFETCH")=$c(1)
	s %xxsql("M","ZVERSION")=$c(1),%xxsql("I","%IFInclude")="",%xxsql("I","%IKInclude")="",%xxsql("I","%PVA")="",%xxsql("I","%callout")=""
	s %xxsql("I","%jsonMap")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),,"FCE.Branch.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
%sqllistUCQ(t) public	{
	s t("%0dsql1")="",t("%0dsql3")="",t("%0dsql5")="",t("%0dsql7")="",t("%0dsql9")="",t("%0dsqlA")="",t("%0dsqlC")="",t("%0dsqlF")=""
	s t("%0dsqlH")="",t("%0dsqlJ")="",t("%0dsqlN")="",t("%0dsqlR")="",t("%0dsqlT")="",t("%0dsqlV")="",t("%0dsqlX")="",t("%0dsqlZ")=""
}