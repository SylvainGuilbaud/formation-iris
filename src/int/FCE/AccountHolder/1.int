ROUTINE FCE.AccountHolder.1 [Type=INT,Generated]
 ;FCE.AccountHolder.1
 ;Generated for class FCE.AccountHolder.  Do NOT edit. 08/14/2023 08:17:28AM
 ;;664A6B58;FCE.AccountHolder
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) methodimpl {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..CurrencyOrders
 s proporef=..Home
 s proporef=..Work
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..CurrencyOrders
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
 s proporef=..Home
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..Work
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildDeferredIndices(lockFlag=0,journalFlag=1) methodimpl {
	return $$Error^%apiOBJ(5758,"%Storage.Persistent::%BuildDeferredIndices") }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") methodimpl {
	if ($listlength(pIndexList)=1)&&($listget(pIndexList,1)="") { return 1 }
	Set class=$classname(),tBuildFlags=1,tBuildFlags(class)=$c(0,0)
	Set tPtr=0,tStatus=1
	While $listnext(pIndexList,tPtr,tIndex) {
		continue:tIndex=""
		If '$d(^oddCOM(class,"i",tIndex)) {
			Set tStatus=$select(+tStatus:$$Error^%apiOBJ(5066,class_"::"_tIndex),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5066,class_"::"_tIndex)))
		}
	}
	If ('tStatus) RETURN tStatus
	if ((pIndexList="")||($listfind(pIndexList,"EmailIndex"))),'$listfind(pIgnoreIndexList,"EmailIndex") { set $Extract(tBuildFlags(class),1)=$c(1) }
	if ((pIndexList="")||($listfind(pIndexList,"NameIndex"))),'$listfind(pIgnoreIndexList,"NameIndex") { set $Extract(tBuildFlags(class),2)=$c(1) }
	Quit ..%BuildIndexInternal(.pLockFlag,.pAutoPurge,.pStartID,.pEndID,.pIndexList,.tBuildFlags,"^FCE.AccountHolderD",0,.pJournalFlag,0) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") methodimpl {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1),$SortBegin(^FCE.AccountHolderI("EmailIndex")),$increment(^IRIS.TempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,1))) }
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),2),$SortBegin(^FCE.AccountHolderI("NameIndex")),$increment(^IRIS.TempIndexBuild(pJob,2)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,2))) }
		Set tPrefetch=$prefetchon(^FCE.AccountHolderD)
		If 'pFirstRange||('$data(^FCE.AccountHolderD(pStartID))) { Set tID=$order(^FCE.AccountHolderD(pStartID)) } Else { Set tID=pStartID }
		While tID'="",(pEndID="")||(tID']]pEndID) {
			If pLockFlag=2 {
				Set tSC = ..%LockId(tID,1)
				If ('tSC) {
					Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
					Set tID=$order(^FCE.AccountHolderD(tID))
					Continue
				}
			}
			If pLockFlag'=2||($data(^FCE.AccountHolderD(tID))) {
				Set tSC=..%FileIndices(tID,.pIndexHandle)
				If ('tSC) { Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC)) }
			}
			Do:pLockFlag=2 ..%UnlockId(tID,1,1)
			set tID=$order(^FCE.AccountHolderD(tID))
		}
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1) {
		If $increment(^IRIS.TempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^FCE.AccountHolderI("EmailIndex")) {}
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),2) {
		If $increment(^IRIS.TempIndexBuild(pJob,2),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,2))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,2))) } Catch {} }
		If $SortEnd(^FCE.AccountHolderI("NameIndex")) {}
	}
	Set:$Get(tPrefetch) tPrefetch=$prefetchoff(^FCE.AccountHolderD)
	Quit tStatus }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) [ SQLCODE,pID,tCol1 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tCol1 
	set tStatus = ..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC) if ('tStatus) { set pErrorInfo = $Listbuild(pID) quit tStatus } if tMSTC '= $classname() { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) }
	set tStatus = 1, pErrorInfo = ""
	 ;---&sql(select Email INTO :tCol1 FROM FCE.AccountHolder WHERE %ID = :pID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, pID, tCol1
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EygKvFvwZsnXUxbiL2ypZV7Ksql","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EygKvFvwZsnXUxbiL2ypZV7Ksql"))||($ze["<ZSQLU>") { d %0dsqlA } else { throw } }
	if 'SQLCODE {
		if ((pConstraintList="")||($lf(pConstraintList,"EmailIndex"))) && ('..EmailIndexCheckUnique(pID,tCol1)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5808,$classname()_".EmailIndex"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5808,$classname()_".EmailIndex"))) }
		set pErrorInfo = $Listbuild(pID,tCol1)
	} elseif SQLCODE < 0 { set tStatus = $$Error^%apiOBJ(5540,SQLCODE,$Get(%msg)) }
	quit tStatus }
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT Email INTO :tCol1 FROM FCE . AccountHolder WHERE %ID = :pID"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set tCol1="" } catch {} }
	return
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM %NOPARALLEL FCE.AccountHolder)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, tID
	 
	 ;---&sql(open ext)
	if $g(%ext0362)'="" { s SQLCODE=-101 } else { try { s %ext0362="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ENcHynEKFKsU9oZYMdvzlSyikmE",%ext0362=$classmethod(%ext0362,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%ext0362)),$ze'["<ZSQLU>" { throw } } if '$isobject(%ext0362) { s %ext0362=$$%0dsqlC() } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0362))'=1 { s SQLCODE=-102 } else { do %ext0362.FET() }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0362)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0362 }
	}
	quit tStatusAll }
 q
%0dsqlC()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM %NOPARALLEL FCE . AccountHolder"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),",0,ext,","FCE.AccountHolder.CLS",1)
	i $g(SQLCODE) { s tID="" }
	q %xxoref
%ComposeOid(id) methodimpl {
	set tCLASSNAME = $listget($g(^FCE.AccountHolderD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","FCE.AccountHolder")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) methodimpl {
	Set i%%Concurrency=$zu(115,10),i%CurrencyOrders=$listbuild("FCE.CurrencyOrder","AccountHolder",+$this,"many",1,1)
	Kill i%Home,i%Work
	Set m%CurrencyOrders=0,M%CurrencyOrders=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) methodimpl {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..CurrencyOrders)=1 {
			If ..CurrencyOrders.NotLoaded Do ..CurrencyOrders.Load()
			Set tmprel=r%CurrencyOrders,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%CurrencyOrders=r%CurrencyOrders.%ConstructClone(1,.cloned),i%CurrencyOrders=""
			Set tmprel.InverseReference=tmpref
		}
		If $data(i%Home),$isobject(..Home)=1 Set r%Home=r%Home.%ConstructClone(1,.cloned),i%Home=""
		If $data(i%Work),$isobject(..Work)=1 Set r%Work=r%Work.%ConstructClone(1,.cloned),i%Work=""
	} Else {
		If ..CurrencyOrders'="" {
			If deep=-1 {
				Set r%CurrencyOrders="",i%CurrencyOrders=$listbuild("FCE.CurrencyOrder","AccountHolder",+$this,"many",1,1)
			} Else {
				If ..CurrencyOrders.NotLoaded Do ..CurrencyOrders.Load()
				Set tmprel=r%CurrencyOrders,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%CurrencyOrders=r%CurrencyOrders.%ConstructClone(0,.cloned),i%CurrencyOrders=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%Delete(oid="",concurrency=-1) methodimpl {
	RETURN:oid="" $$Error^%apiOBJ(5813,$classname())
	set id=$listget(oid) RETURN:id="" $$Error^%apiOBJ(5812,$classname())
	set traninit=0
	set $zt="%DeleteERR"
	if concurrency = -1 { set concurrency=$zu(115,10) }
	if (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) { RETURN $$Error^%apiOBJ(5828) }
	set class=$listget(oid,2)
	if class="" { set sc=..%OnDetermineClass(oid,.class) RETURN:('sc) sc set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } else { set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
	if $classname()'=class { RETURN $classmethod(class,"%Delete",oid,concurrency) }
	if +$g(%objtxSTATUS)=0 { set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	set sc=##class(FCE.CurrencyOrder).AccountHolderOnDelete(id,concurrency) goto:('sc) %DeleteEnd
	set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } if $isobject(oref)=1 { do oref.%DeleteOID() }
	set sc=..%DeleteData(id,concurrency)
%DeleteEnd if traninit { if (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } } else { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
	RETURN sc
%DeleteERR	set $zt="",sc=$$Error^%apiOBJ(5002,$ZE)
	goto %DeleteEnd }
%DeleteData(id,concurrency) methodimpl {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^FCE.AccountHolderD(id))) {
		Set bsv0N1=^FCE.AccountHolderD(id)
		Set bsv0N2=$zu(28,$listget(bsv0N1,4),7,32768)
		If concurrency, ('$g(%0CacheLock($classname(),"E"))) {
			Lock +^FCE.AccountHolderI("EmailIndex",bsv0N2):$zu(115,4)
			If $test {
				Lock -^FCE.AccountHolderI("EmailIndex",bsv0N2)
			} Else {
				Set sc = $$Error^%apiOBJ(5803,$classname())
				Goto DeleteDataEXIT
			}
		}
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"EmailIndex","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"EmailIndex","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",$listget(bsv0N1,4))
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Set bsv0N3=$zu(28,$listget(bsv0N1,4),7,32768)
		Kill ^FCE.AccountHolderI("EmailIndex",bsv0N3,id)
		Kill ^FCE.AccountHolderI("NameIndex",$zu(28,$listget(bsv0N1,8),7,32768),id)
		Kill ^FCE.AccountHolderD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^FCE.AccountHolderD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") methodimpl {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) methodimpl {
	Try { set tExists = $s(id="":0,$d(^FCE.AccountHolderD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0,pVectorBuffer) methodimpl {
	try {
		Set bsv0N2=$Get(^FCE.AccountHolderD(id))
		Set bsv0N3=$listget(bsv0N2,1)
		if bsv0N3'="" {
			set bsv0N1=$piece(bsv0N3,"~",*-1)
			set:bsv0N1'["." bsv0N1="User."_bsv0N1
			if bsv0N1'="" { RETURN $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) }
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.AccountHolder")),1)=1) {
			Set bsv0N4=$zu(28,$listget(bsv0N2,4),7,32768)
			Set ^FCE.AccountHolderI("EmailIndex",bsv0N4,id)=$listget(bsv0N2,1)
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.AccountHolder")),2)=1) {
			Set bsv0N5=$zu(28,$listget(bsv0N2,8),7,32768)
			Set ^FCE.AccountHolderI("NameIndex",bsv0N5,id)=$listget(bsv0N2,1)
		}
	}
	catch {
		RETURN $$Error^%apiOBJ(5002,$ze)
	}
	RETURN 1
getbuffered(glo,&vectorbuffer,id)
	if '$d(vectorbuffer(id)) { set vectorbuffer(id)=@glo }
	RETURN vectorbuffer(id) }
%InsertBatch(objects,concurrency=0,useTransactions=0) methodimpl {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,1)
			set lock=0,locku=$c(0)
			if (useTransactions) tstart
			set id=$i(^FCE.AccountHolderD)
			set zzc14v1=$zu(28,$listget(data,4),7,32768)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.AccountHolderI("EmailIndex",zzc14v1):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.AccountHolderI("EmailIndex",zzc14v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":EmailIndex:"_$zreference)) }
				set ^FCE.AccountHolderD(id)=data
				set ^FCE.AccountHolderI("EmailIndex",zzc14v1,id)=zzc9v1
				set ^FCE.AccountHolderI("NameIndex",$zu(28,$listget(data,8),7,32768),id)=zzc9v1
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			lock:$Ascii($Extract(locku,1)) -^FCE.AccountHolderI("EmailIndex",zzc14v1)#"D"
			if lock lock -(^FCE.AccountHolderD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData(killstreams=0) methodimpl
	Set $sequence(^FCE.AccountHolderD)=""
	If killstreams Set $sequence(^FCE.AccountHolderS)="" Kill ^FCE.AccountHolderS
	Kill ^FCE.AccountHolderD
	Quit 1
%LoadData(id) methodimpl {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^FCE.AccountHolderD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^FCE.AccountHolderD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^FCE.AccountHolderD(id)#"SIE") }
		S i%Balance=$lg(%s1,2),i%Currency=$lg(%s1,3),i%Email=$lg(%s1,4),i%DOB=$lg(%s1,5),i%Home=$lg(%s1,6),i%Work=$lg(%s1,7),i%Name=$lg(%s1,8)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^FCE.AccountHolderD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^FCE.AccountHolderD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Balance="",i%Currency="",i%DOB="",i%Email="",i%Home="",i%Name="",i%Work=""
	quit }
%LoadDataFromMemory(id,objstate,obj) methodimpl {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%Balance=$lg(%s1,2),i%Currency=$lg(%s1,3),i%Email=$lg(%s1,4),i%DOB=$lg(%s1,5),i%Home=$lg(%s1,6),i%Work=$lg(%s1,7),i%Name=$lg(%s1,8)
		Quit 1
	} Else {
		set i%Balance="",i%Currency="",i%DOB="",i%Email="",i%Home="",i%Name="",i%Work=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) methodimpl {
	Set:concurrency'="" i%%Concurrency=concurrency
	If reset {
		Kill i%CurrencyOrders,i%Home,i%Work
	}
	Set i%CurrencyOrders=$listbuild("FCE.CurrencyOrder","AccountHolder",+$this,"many",1,1),r%CurrencyOrders="",r%Home="",r%Work=""
	If 'reset { Set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } Set $zobjoid("",$listget(oid),,sfn)=$this,i%"%%OID"=oid }
	Quit 1 }
%LockExtent(shared=0) methodimpl {
	If shared {
		Lock +(^FCE.AccountHolderD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^FCE.AccountHolderD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) methodimpl { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^FCE.AccountHolderD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^FCE.AccountHolderD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() methodimpl {
	If '$system.CLS.GetModified() Quit 1
	If m%Balance Set:i%Balance'="" i%Balance=(..BalanceNormalize(i%Balance))
	If m%Currency Set:i%Currency'="" i%Currency=(..CurrencyNormalize(i%Currency))
	If m%DOB Set:i%DOB'="" i%DOB=(..DOBNormalize(i%DOB))
	If m%Email Set:i%Email'="" i%Email=(..EmailNormalize(i%Email))
	If m%Name Set:i%Name'="" i%Name=(..NameNormalize(i%Name))
	Quit 1 }
%OnDetermineClass(oid,class) methodimpl {
	Set id=$listget($get(oid))
	RETURN:id="" $$Error^%apiOBJ(5812)
	set idclass=$lg($get(^FCE.AccountHolderD(id)),1)
	if idclass="" { set class="FCE.AccountHolder" RETURN 1 }
	set class=$piece(idclass,"~",*-1)
	set:class'["." class="User."_class
	RETURN 1 }
%PhysicalAddress(id,paddr) methodimpl
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^FCE.AccountHolderD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") methodimpl {
	Set locked=0,sc=1
	Try {
		if ($listlength(idxlist)=1)&&($listget(idxlist,1)="") { return 1 }
		Set tPtr=0
		While $listnext(idxlist,tPtr,tIndex) {
			continue:tIndex=""
			If '($d(^oddCOM($classname(),"i",tIndex))) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Return sc }
		If lockExtent {
			Set sc=..%LockExtent(0)
			If ('sc) { Return sc }
			Set locked=1
		}
		If $system.CLS.IsMthd("%OnBeforePurgeIndices") {
			Set sc=..%OnBeforePurgeIndices(.idxlist)
			If (('sc))||(($listlength(idxlist)=1)&&($listget(idxlist,1)="")) {
				If locked {
					Do ..%SQLReleaseTableLock(0)
				}
				Return sc
			}
		}
		if ((idxlist="")||($listfind(idxlist,"EmailIndex"))),'$listfind(pIgnoreIndexList,"EmailIndex") {
			kill ^FCE.AccountHolderI("EmailIndex")
		}
		if ((idxlist="")||($listfind(idxlist,"NameIndex"))),'$listfind(pIgnoreIndexList,"NameIndex") {
			kill ^FCE.AccountHolderI("NameIndex")
		}
		Set sc=1
		If $system.CLS.IsMthd("%OnAfterPurgeIndices") { Set sc=..%OnAfterPurgeIndices(.idxlist) }
	} Catch tException {
		Set sc=tException.AsStatus(),$ZE=""
	}
	If locked { Do ..%UnlockExtent(0) }
	Quit sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0) methodimpl
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^FCE.AccountHolderD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("FCE.AccountHolder","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^FCE.AccountHolderD(%d(1))),"FCE.AccountHolder",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="") methodimpl
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^FCE.AccountHolderD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"FCE"_"."_"AccountHolder") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"FCE"_"."_"AccountHolder") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
	RETURN ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="") methodimpl
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.AccountHolder'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.AccountHolder'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.AccountHolder' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.AccountHolder' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"EmailIndex"))),'$listfind(pIgnoreIndexList,"EmailIndex") {
			if pActions["P" {
				set sn(1)=$zu(28,%e(5),7) set sn(2)=%d(1) k ^FCE.AccountHolderI("EmailIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=$zu(28,%d(5),7) set sn(2)=%d(1) set ^FCE.AccountHolderI("EmailIndex",sn(1),sn(2))=%d(10)
			}
		}
		if ((pIndices="")||($lf(pIndices,"NameIndex"))),'$listfind(pIgnoreIndexList,"NameIndex") {
			if pActions["P" {
				set sn(1)=$zu(28,%e(7),7) set sn(2)=%d(1) k ^FCE.AccountHolderI("NameIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=$zu(28,%d(7),7) set sn(2)=%d(1) set ^FCE.AccountHolderI("NameIndex",sn(1),sn(2))=%d(10)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUniqueIndices(pIndices,pOK) methodimpl
	new d,g,n,o set d=0
	if $lf(pIndices,"EmailIndex") {
		set g="^FCE.AccountHolderI(""EmailIndex"")",o="^FCE.AccountHolderI(""EmailIndex"","
		for  {
			set g=$q(@g@("")) quit:g=""||(o'=$e(g,1,$l(o)))
			if $qs(g,2)'=" " { set n=$q(@g@("")) quit:n=""  if o=$e(n,1,$l(o)),$lb($qs(g,2))=$lb($qs(n,2)) { set d=1 quit  }}
	}
		if d { set pOK=0,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler42",,"EmailIndex","FCE"_"."_"AccountHolder") QUIT  }
	}
	set pOK=1 QUIT
%SQLCopyIcolIntoName() methodimpl
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Balance")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("Currency")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("DOB")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("Email")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Home")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Name")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("PrintName")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("Work")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("x__classname")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("Home_City")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("Home_State")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("Home_Street")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("Home_Zip")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("Work_City")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("Work_State")=%d(16) set:$a(%e,17)&&$d(%d(17)) %f("Work_Street")=%d(17) set:$a(%e,18)&&$d(%d(18)) %f("Work_Zip")=%d(18)
	QUIT
%SQLDefineiDjVars(%d,subs,master) methodimpl
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0,%bufferedColumns=0) methodimpl
	// SQL DELETE method for table FCE.AccountHolder
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^FCE.AccountHolderD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.AccountHolder","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"AccountHolder",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"FCE"_"."_"AccountHolder",%rowid) do ..%SQLEExit() QUIT  }
	if %e(10)'="" { set sn=$p(%e(10),$e(%e(10)),$l(%e(10),$e(%e(10)))-1) if "FCE.AccountHolder"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("EmailIndex")="%e(5),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","FCE.AccountHolder",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","FCE.AccountHolder",%k,"f",%t)) quit:%t=""  set %st=(%t="FCE.AccountHolder") set %fk="" for  set %fk=$o(^rINDEXEXT("F","FCE.AccountHolder",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	if '($a(%check,2)#2),'$g(%0CacheLock("FCE.AccountHolder","E")) {
		lock +^FCE.AccountHolderI("EmailIndex",$zu(28,%e(5),7))#"S":$zu(115,4) if $t { lock -^FCE.AccountHolderI("EmailIndex",$zu(28,%e(5),7))#"S" } else { do ..%SQLUnlockError("EmailIndex") set SQLCODE=sqlcode do ..%SQLEExit() QUIT }
	}
	set ce="" for  { set ce=$order(^oddSQL("FCE","AccountHolder","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		set sn(1)=$zu(28,%e(5),7) set sn(2)=%d(1) k ^FCE.AccountHolderI("EmailIndex",sn(1),sn(2))
		set sn(1)=$zu(28,%e(7),7) set sn(2)=%d(1) k ^FCE.AccountHolderI("NameIndex",sn(1),sn(2))
	}
	k ^FCE.AccountHolderD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"AccountHolder",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"AccountHolder") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams() methodimpl
	// Delete all temporary streams
	QUIT
%SQLEExit() methodimpl
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"AccountHolder"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.AccountHolderD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef) methodimpl
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode) methodimpl
	new s set %d(1)=%rowid,s="" if '$d(^FCE.AccountHolderD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(10)=$lg(s),%e(5)=$lg(s,4),%e(7)=$lg(s,8)
	set %e(13)=$lg($lg(s,6)) set %e(11)=$lg($lg(s,6),2) set %e(12)=$lg($lg(s,6),3) set %e(14)=$lg($lg(s,6),4) set %e(17)=$lg($lg(s,7)) set %e(15)=$lg($lg(s,7),2) set %e(16)=$lg($lg(s,7),3) set %e(18)=$lg($lg(s,7),4)
	QUIT
%SQLGetOldAll() methodimpl
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT Balance,Currency,DOB,Email,Home,Name,PrintName,"Work",x__classname,Home_City,Home_State,Home_Street,Home_Zip,Work_City,Work_State,Work_Street,Work_Zip INTO :%e() FROM %IGNOREINDEX * FCE.AccountHolder WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %e, %msg, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EEhD1jMm4NmdpMUaio66YMyqcvk","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EEhD1jMm4NmdpMUaio66YMyqcvk"))||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT Balance , Currency , DOB , Email , Home , Name , PrintName , ""Work"" , x__classname , Home_City , Home_State , Home_Street , Home_Zip , Work_City , Work_State , Work_Street , Work_Zip INTO :%e() FROM %IGNOREINDEX * FCE . AccountHolder WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return
%SQLGetOldIndex(%rowid,%e,pF=0,sqlcode,%buffervector=0,fld="") methodimpl
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("Email")) %d(5)=tF("Email") set:$d(tF("x__classname")) %d(10)=tF("x__classname") set:$d(tF("Name")) %d(7)=tF("Name") 
			RETURN
		}
	}
	catch { }
	new s set %d(1)=%rowid,s="" if '$d(^FCE.AccountHolderD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(10)=$lg(s),%e(5)=$lg(s,4),%e(7)=$lg(s,8)
	if pF { set:$d(%d(5)) pF("Email")=%d(5) set:$d(%d(10)) pF("x__classname")=%d(10) set:$d(%d(7)) pF("Name")=%d(7)  }
	set sqlcode=0
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0,%bufferedColumns=0) methodimpl
	// SQL INSERT method for table FCE.AccountHolder
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","FCE"_"."_"AccountHolder") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	do ..%SQLInsertComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
			do:$g(%d(3))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,4)) do:$g(%d(5))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) do:$g(%d(7))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,8)) do:$g(%d(11))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,12)) do:$g(%d(12))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,13)) do:$g(%d(13))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,14)) do:$g(%d(14))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,15)) do:$g(%d(15))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,16)) do:$g(%d(16))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,17)) do:$g(%d(17))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,18)) do:$g(%d(18))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,19)) 
			quit:sqlcode<0		// A required field was missing
			new %unlockcon
				// Constraint EmailIndex
				if '$a(%check,2) { lock +^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7)):$zu(115,4) if $t { set %unlockcon(27)=$name(^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("EmailIndex") quit  } }
				if '$a(%check,7) { if $d(^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7))) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"AccountHolder","EmailIndex","Email"_"="_$$quoter^%apiSQL($g(%d(5)))) quit  }} // INSERT
				else { new tID set tID=..EmailIndexSQLFindRowIDByConstraint($lb(%d(5)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^FCE.AccountHolderD) } elseif %d(1)>$g(^FCE.AccountHolderD) { if $i(^FCE.AccountHolderD,$zabs(%d(1)-$g(^FCE.AccountHolderD))) {}} elseif $d(^FCE.AccountHolderD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"FCE"_"."_"AccountHolder"_"."_"ID") do ..%SQLEExit() RETURN "" }
	for icol=10,11,12,13,14,15,16,17,18,5,7 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^FCE.AccountHolderD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.AccountHolder","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"AccountHolder",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	if $g(%d(6))="" { if ($g(%d(13))'="")||($g(%d(11))'="")||($g(%d(12))'="")||($g(%d(14))'="") { set %d(6)=$lb($g(%d(13)),$g(%d(11)),$g(%d(12)),$g(%d(14))) } else { set %d(6)="" }}		// Define serial field 'Home'
	if $g(%d(9))="" { if ($g(%d(17))'="")||($g(%d(15))'="")||($g(%d(16))'="")||($g(%d(18))'="") { set %d(9)=$lb($g(%d(17)),$g(%d(15)),$g(%d(16)),$g(%d(18))) } else { set %d(9)="" }}		// Define serial field 'Work'
	set ^FCE.AccountHolderD(%d(1))=$lb(%d(10),%d(2),%d(3),%d(5),%d(4),%d(6),%d(9),%d(7))
	if '$a(%check,3) {
		set sn(1)=$zu(28,%d(5),7) set sn(2)=%d(1) set ^FCE.AccountHolderI("EmailIndex",sn(1),sn(2))=%d(10)
		set sn(1)=$zu(28,%d(7),7) set sn(2)=%d(1) set ^FCE.AccountHolderI("NameIndex",sn(1),sn(2))=%d(10)
	}
	lock:$a(%l,2) -@(%unlockcon(27)_"#""D""") 
	lock:$a(%l) -^FCE.AccountHolderD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"AccountHolder",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"AccountHolder") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0) methodimpl
	if 'view {
	do SQLComputeIns11
	do SQLComputeIns12
	do SQLComputeIns13
	do SQLComputeIns14
	do SQLComputeIns15
	do SQLComputeIns16
	do SQLComputeIns17
	do SQLComputeIns18
	}
	else {
	set %d(8)="" do ..PrintNameSQLCompute()
	}
	QUIT
SQLComputeIns11		// Compute code for field Home_City
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(11)=$lg($g(%d(6)),2) quit
SQLComputeIns12		// Compute code for field Home_State
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(12)=$lg($g(%d(6)),3) quit
SQLComputeIns13		// Compute code for field Home_Street
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(13)=$lg($g(%d(6)),1) quit
SQLComputeIns14		// Compute code for field Home_Zip
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(14)=$lg($g(%d(6)),4) quit
SQLComputeIns15		// Compute code for field Work_City
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(15)=$lg($g(%d(9)),2) quit
SQLComputeIns16		// Compute code for field Work_State
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(16)=$lg($g(%d(9)),3) quit
SQLComputeIns17		// Compute code for field Work_Street
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(17)=$lg($g(%d(9)),1) quit
SQLComputeIns18		// Compute code for field Work_Zip
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(18)=$lg($g(%d(9)),4) quit
%SQLInvalid(pIcol,pVal) methodimpl {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"FCE"_"."_"AccountHolder"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname) methodimpl
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"FCE"_"."_"AccountHolder") quit
%SQLNormalizeFields() methodimpl
	set:$g(%d(4))'="" %d(4)=$s($zu(115,13)&&(%d(4)=$c(0)):"",1:%d(4)\1)
	set:$g(%d(2))'="" %d(2)=$select($zu(115,13)&&(%d(2)=$c(0)):"",1:$normalize($decimal(%d(2)),2))
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="") methodimpl
	RETURN ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0) methodimpl
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"FCE"_"."_"AccountHolder",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),Balance,Currency,DOB,Email,%INTERNAL(Home),Name,PrintName,%INTERNAL("Work"),x__classname,Home_City,Home_State,Home_Street,Home_Zip,Work_City,Work_State,Work_Street,Work_Zip INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9),:d(10),:d(11),:d(12),:d(13),:d(14),:d(15),:d(16),:d(17),:d(18) FROM FCE.AccountHolder WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Enfvnc7UipFVYW3QikesUmJGAu1","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Enfvnc7UipFVYW3QikesUmJGAu1"))||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(10)'="" { new sn set sn=$p(d(10),$e(d(10)),$l(d(10),$e(d(10)))-1) if "FCE.AccountHolder"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("FCE.AccountHolder",18),d=18,d=$zobjexport(d,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , Balance , Currency , DOB , Email , %INTERNAL ( Home ) , Name , PrintName , %INTERNAL ( ""Work"" ) , x__classname , Home_City , Home_State , Home_Street , Home_Zip , Work_City , Work_State , Work_Street , Work_Zip INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) , :d(9) , :d(10) , :d(11) , :d(12) , :d(13) , :d(14) , :d(15) , :d(16) , :d(17) , :d(18) FROM FCE . AccountHolder WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")=""
	s %xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set d(1)="",d(2)="",d(3)="",d(4)="",d(5)="",d(6)="",d(7)="",d(8)="",d(9)="",d(10)="",d(11)="",d(12)="",d(13)="",d(14)="",d(15)="",d(16)="",d(17)="",d(18)="" } catch {} }
	return
%SQLReleaseLock(%rowid,s=0,i=0,e="") methodimpl
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^FCE.AccountHolderD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0) methodimpl
	set s=$e("S",s)_$e("D",i) lock -^FCE.AccountHolderD#s QUIT 1
	Return
%SQLUnlock() methodimpl
	lock:$a(%l) -^FCE.AccountHolderD(%d(1))#"E"
	QUIT
%SQLUnlock2() methodimpl
	lock:$a(%l,2) -@(%unlockcon(27)_"#""D""") QUIT
%SQLUnlockError(cname) methodimpl
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"FCE"_"."_"AccountHolder",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"FCE"_"."_"AccountHolder",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid,%bufferedColumns=0,%bufferedColumnsDel=0) methodimpl
	// SQL UPDATE method for table FCE.AccountHolder
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'$a(%check,7),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","FCE"_"."_"AccountHolder") QUIT  }
	for icol=2:1:18 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^FCE.AccountHolderD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.AccountHolder","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"AccountHolder",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"AccountHolder",%rowid) do ..%SQLEExit() QUIT  } for icol=10,11,12,13,14,15,16,17,18,5,7 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"AccountHolder",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(10)'="" set sn=$p(%e(10),$e(%e(10)),$l(%e(10),$e(%e(10)))-1) if "FCE.AccountHolder"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	do ..%SQLUpdateComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { do ..%SQLInsertComputes(1) d @%vco quit:sqlcode<0  }
			for %f=3,5,7,11,12,13,14,15,16,17,18 { if $a(%e,%f),$g(%d(%f))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,%f+1)) }}
			quit:sqlcode
			new %unlockcon
			if ($a(%e,5)) {	// UNIQUE constraint EmailIndex
				if '($a(%check,2)#2),'$g(%0CacheLock("FCE.AccountHolder","E")) {
					lock +^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7)):$zu(115,4) if $t { set %unlockcon(27)=$name(^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("EmailIndex") quit  } 
					lock +^FCE.AccountHolderI("EmailIndex",$zu(28,%e(5),7)):$zu(115,4) if $t { lock -^FCE.AccountHolderI("EmailIndex",$zu(28,%e(5),7)) } else { do ..%SQLUnlockError("EmailIndex") quit  }
				}
				if $d(^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7))),'$d(^FCE.AccountHolderI("EmailIndex",$zu(28,%d(5),7),%d(1))) { set sqlcode=-120,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"AccountHolder","EmailIndex","Email"_"="_$$quoter^%apiSQL($g(%d(5)))) quit  }
			}
			new %fk,%st,%t,%y
			if ($a(%e,5)),'$zu(115,7) {
				set %t="" for  { set %t=$o(^rINDEXEXT("F","FCE.AccountHolder","EmailIndex","f",%t)) quit:%t=""  set %st=(%t="FCE.AccountHolder") s %fk="" for  { set %fk=$o(^rINDEXEXT("F","FCE.AccountHolder","EmailIndex","f",%t,%fk)) quit:%fk=""  x "set %y=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,""EmailIndex"",$a(%check,2),%e(5),%d(5))" if %y { set sqlcode=-123 quit  }}}
			}
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if '$a(%e,6) { if $a(%e,13)||$a(%e,11)||$a(%e,12)||$a(%e,14) { if ($g(%d(13))'="")||($g(%d(11))'="")||($g(%d(12))'="")||($g(%d(14))'="") { set %d(6)=$lb($g(%d(13)),$g(%d(11)),$g(%d(12)),$g(%d(14))) } else { set %d(6)="" } set $e(%e,6)=$c(1) }}		// Define serial field 'Home'
	if '$a(%e,9) { if $a(%e,17)||$a(%e,15)||$a(%e,16)||$a(%e,18) { if ($g(%d(17))'="")||($g(%d(15))'="")||($g(%d(16))'="")||($g(%d(18))'="") { set %d(9)=$lb($g(%d(17)),$g(%d(15)),$g(%d(16)),$g(%d(18))) } else { set %d(9)="" } set $e(%e,9)=$c(1) }}		// Define serial field 'Work'
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,$a(%e,9):1,1:$a(%e,10)) {
		set ^FCE.AccountHolderD(%d(1))=$listupdate($g(^FCE.AccountHolderD(%d(1))),1,$a(%e,10):%d(10),$a(%e,2):%d(2),$a(%e,3):%d(3),$a(%e,5):%d(5),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,9):%d(9),$a(%e,7):%d(7))
	}
	if '$a(%check,3) { 
		if $a(%e,5)||$a(%e,10) {	// EmailIndex index map
			if $a(%e,5) { set sn(1)=$zu(28,%e(5),7) set sn(2)=%d(1) k ^FCE.AccountHolderI("EmailIndex",sn(1),sn(2)) }
			set sn(1)=$zu(28,%d(5),7) set sn(2)=%d(1) set ^FCE.AccountHolderI("EmailIndex",sn(1),sn(2))=%d(10)
		}
		if $a(%e,7)||$a(%e,10) {	// NameIndex index map
			if $a(%e,7) { set sn(1)=$zu(28,%e(7),7) set sn(2)=%d(1) k ^FCE.AccountHolderI("NameIndex",sn(1),sn(2)) }
			set sn(1)=$zu(28,%d(7),7) set sn(2)=%d(1) set ^FCE.AccountHolderI("NameIndex",sn(1),sn(2))=%d(10)
		}
	}
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"AccountHolder",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"AccountHolder") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0) methodimpl
	if $a(%e,6) do SQLComputeUpd11 set:%d(11)'=$g(%e(11)) $e(%e,11)=$c(1)
	if $a(%e,6) do SQLComputeUpd12 set:%d(12)'=$g(%e(12)) $e(%e,12)=$c(1)
	if $a(%e,6) do SQLComputeUpd13 set:%d(13)'=$g(%e(13)) $e(%e,13)=$c(1)
	if $a(%e,6) do SQLComputeUpd14 set:%d(14)'=$g(%e(14)) $e(%e,14)=$c(1)
	if $a(%e,9) do SQLComputeUpd15 set:%d(15)'=$g(%e(15)) $e(%e,15)=$c(1)
	if $a(%e,9) do SQLComputeUpd16 set:%d(16)'=$g(%e(16)) $e(%e,16)=$c(1)
	if $a(%e,9) do SQLComputeUpd17 set:%d(17)'=$g(%e(17)) $e(%e,17)=$c(1)
	if $a(%e,9) do SQLComputeUpd18 set:%d(18)'=$g(%e(18)) $e(%e,18)=$c(1)
	QUIT
SQLComputeUpd11		// Compute code for field Home_City
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(11)=$lg($g(%d(6)),2) quit
SQLComputeUpd12		// Compute code for field Home_State
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(12)=$lg($g(%d(6)),3) quit
SQLComputeUpd13		// Compute code for field Home_Street
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(13)=$lg($g(%d(6)),1) quit
SQLComputeUpd14		// Compute code for field Home_Zip
 set:(%oper="INSERT"&&($g(%d(6))'=""))||(%oper="UPDATE") %d(14)=$lg($g(%d(6)),4) quit
SQLComputeUpd15		// Compute code for field Work_City
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(15)=$lg($g(%d(9)),2) quit
SQLComputeUpd16		// Compute code for field Work_State
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(16)=$lg($g(%d(9)),3) quit
SQLComputeUpd17		// Compute code for field Work_Street
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(17)=$lg($g(%d(9)),1) quit
SQLComputeUpd18		// Compute code for field Work_Zip
 set:(%oper="INSERT"&&($g(%d(9))'=""))||(%oper="UPDATE") %d(18)=$lg($g(%d(9)),4) quit
%SQLValidateCompFields(sqlcode) methodimpl
	QUIT 'sqlcode
%SQLValidateFields(sqlcode) methodimpl
	if $g(%d(4))'="",'($s($zu(115,13)&&(%d(4)=$c(0)):1,$isvalidnum(%d(4),0,-672045,+$h):1,'$isvalidnum(%d(4)):$$Error^%apiOBJ(7207,%d(4)),%d(4)<-672045:$$Error^%apiOBJ(7204,%d(4),-672045),1:$$Error^%apiOBJ(7203,%d(4),+$h))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	new %f for %f=14,18 { if $g(%d(%f))'="",'(##class(FCE.MailingAddress).ZipIsValid(%d(%f))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=12,16 { if $g(%d(%f))'="",'($s(%d(%f)'["-"&&("-NY-NJ-MA-TX-"[("-"_$select(%d(%f)=$c(0):"",1:%d(%f))_"-")):1,1:$$Error^%apiOBJ(7205,%d(%f),"-NY-NJ-MA-TX"))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(2))'="",'($select($zu(115,13)&&(%d(2)=$c(0)):1,$isvalidnum(%d(2),2,0,):1,'$isvalidnum(%d(2)):$$Error^%apiOBJ(7207,%d(2)),1:$$Error^%apiOBJ(7204,%d(2),0))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	if $g(%d(3))'="",'(%d(3)'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%d(3)_"-"))) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	for %f=5,7,8,11,13,15,17 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() methodimpl {
	set %n=$lb(,"ID","Balance","Currency","DOB","Email","Home","Name","PrintName","Work","x__classname","Home_City","Home_State","Home_Street","Home_Zip","Work_City","Work_State","Work_Street","Work_Zip")
	QUIT }
%SaveData(id) methodimpl {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0,locku=$c(0)
		if 'idassigned { set id=$i(^FCE.AccountHolderD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set zzc10v1=$zu(28,i%Name,7,32768)
		set zzc10v2=$zu(28,i%Email,7,32768)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^FCE.AccountHolderD(id))) {
					set insert=1
					if lock { lock -(^FCE.AccountHolderD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^FCE.AccountHolderD(id)#"ES") set tSharedLock=1 }
				if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.AccountHolderI("EmailIndex",zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.AccountHolderI("EmailIndex",zzc10v2)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":EmailIndex:"_$zreference)) }
				set ^FCE.AccountHolderD(id)=$lb("",i%Balance,i%Currency,i%Email,i%DOB,i%Home,i%Work,i%Name)
				set ^FCE.AccountHolderI("EmailIndex",zzc10v2,id)=""
				set ^FCE.AccountHolderI("NameIndex",zzc10v1,id)=""
			}
			else {
				set zzc31v1=^FCE.AccountHolderD(id)
				set zzc31v2=$listget(zzc31v1,8)
				set zzc31v3=$listget(zzc31v1,4)
				set zzc31v4=$zu(28,zzc31v3,7,32768)
				if i%Email'=zzc31v3 { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^FCE.AccountHolderI("EmailIndex",zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } l +^FCE.AccountHolderI("EmailIndex",zzc31v4):$zu(115,4) if $t { l -^FCE.AccountHolderI("EmailIndex",zzc31v4) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }} If ($data(^FCE.AccountHolderI("EmailIndex",zzc10v2)))&&('$data(^FCE.AccountHolderI("EmailIndex",zzc10v2,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":EmailIndex:"_$zreference)) } }
				if (i%Email'=zzc31v3) {
					kill ^FCE.AccountHolderI("EmailIndex",zzc31v4,id)
					if i%Email'=zzc31v3{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"EmailIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"EmailIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v3,i%Email) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^FCE.AccountHolderI("EmailIndex",zzc10v2,id)=""
				}
				if (i%Name'=zzc31v2) {
					kill ^FCE.AccountHolderI("NameIndex",$zu(28,zzc31v2,7,32768),id)
					set ^FCE.AccountHolderI("NameIndex",zzc10v1,id)=""
				}
				set ^FCE.AccountHolderD(id)=$lb("",i%Balance,i%Currency,i%Email,i%DOB,i%Home,i%Work,i%Name)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^FCE.AccountHolderD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^FCE.AccountHolderD(id)) }
		}
		lock:$Ascii($Extract(locku,1)) -^FCE.AccountHolderI("EmailIndex",zzc10v2)#"D"
		if lock lock -(^FCE.AccountHolderD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) methodimpl {
	try {
		set zzc5v1=$listget(data,8)
		set zzc5v2=$listget(data,4)
		set zzc5v3=$listget(data,1)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0,locku=$c(0)
		if 'idassigned { set id=$i(^FCE.AccountHolderD) }
		set zzc10v1=$zu(28,zzc5v1,7,32768)
		set zzc10v2=$zu(28,zzc5v2,7,32768)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^FCE.AccountHolderD(id))) {
					set insert=1
					if lock { lock -(^FCE.AccountHolderD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^FCE.AccountHolderD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.AccountHolderI("EmailIndex",zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.AccountHolderI("EmailIndex",zzc10v2)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":EmailIndex:"_$zreference)) }
				set ^FCE.AccountHolderD(id)=data
				set ^FCE.AccountHolderI("EmailIndex",zzc10v2,id)=zzc5v3
				set ^FCE.AccountHolderI("NameIndex",zzc10v1,id)=zzc5v3
			}
			else {
				set zzc31v1=$lg(idList,1)
				set zzc31v2=^FCE.AccountHolderD(zzc31v1)
				set zzc31v3=$listget(zzc31v2,8)
				set zzc31v4=$listget(zzc31v2,4)
				set zzc31v5=$zu(28,zzc31v4,7,32768)
				if zzc5v2'=zzc31v4 { if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^FCE.AccountHolderI("EmailIndex",zzc10v2):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } l +^FCE.AccountHolderI("EmailIndex",zzc31v5):$zu(115,4) if $t { l -^FCE.AccountHolderI("EmailIndex",zzc31v5) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }} If ($data(^FCE.AccountHolderI("EmailIndex",zzc10v2)))&&('$data(^FCE.AccountHolderI("EmailIndex",zzc10v2,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":EmailIndex:"_$zreference)) } }
				if (zzc5v2'=zzc31v4) {
					kill ^FCE.AccountHolderI("EmailIndex",zzc31v5,zzc31v1)
					if zzc5v2'=zzc31v4{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"EmailIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"EmailIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v4,zzc5v2) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^FCE.AccountHolderI("EmailIndex",zzc10v2,id)=zzc5v3
				}
				if (zzc5v1'=zzc31v3) {
					kill ^FCE.AccountHolderI("NameIndex",$zu(28,zzc31v3,7,32768),zzc31v1)
					set ^FCE.AccountHolderI("NameIndex",zzc10v1,id)=zzc5v3
				}
				set ^FCE.AccountHolderD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		lock:$Ascii($Extract(locku,1)) -^FCE.AccountHolderI("EmailIndex",zzc10v2)#"D"
		if lock lock -(^FCE.AccountHolderD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) methodimpl {
	If lockExtent {
		Set sc=..%LockExtent(0)
		Quit:('sc) sc
	}
	s id=$order(^FCE.AccountHolderD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^FCE.AccountHolderD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^FCE.AccountHolderD(id))
	Set bsv0N2=$zu(28,$listget(bsv0N1,4),7,32768)
	Set ^FCE.AccountHolderI("EmailIndex",bsv0N2,id)=$listget(bsv0N1,1)
	Set bsv0N3=$zu(28,$listget(bsv0N1,8),7,32768)
	Set ^FCE.AccountHolderI("NameIndex",bsv0N3,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit 1
CatchError	Set $ZTrap=""
	If $ZE'="" {
		Set sc = $$Error^%apiOBJ(5002,$ZE)
	}
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit sc }
%SerializeObject(serial,partial=0) methodimpl {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%CurrencyOrders'="" { Set:'$data(%objTX(0,+r%CurrencyOrders)) %objTX(0,+r%CurrencyOrders)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%CurrencyOrders))=r%CurrencyOrders,%objTX(1,%objTX(0,+r%CurrencyOrders),1)=..CurrencyOrdersGetObject(1),%objTX(1,%objTX(0,+r%CurrencyOrders),6)=2 Set M%CurrencyOrders=1,i%CurrencyOrders=$listget(%objTX(1,%objTX(0,+r%CurrencyOrders),1)) }
		If r%Home'="" { Set:'$data(%objTX(0,+r%Home)) %objTX(0,+r%Home)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Home))=r%Home,%objTX(1,%objTX(0,+r%Home),1)=..HomeGetObject(1),%objTX(1,%objTX(0,+r%Home),6)=2 Set M%Home=1,i%Home=$listget(%objTX(1,%objTX(0,+r%Home),1)) }
		If r%Work'="" { Set:'$data(%objTX(0,+r%Work)) %objTX(0,+r%Work)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Work))=r%Work,%objTX(1,%objTX(0,+r%Work),1)=..WorkGetObject(1),%objTX(1,%objTX(0,+r%Work),6)=2 Set M%Work=1,i%Work=$listget(%objTX(1,%objTX(0,+r%Work),1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) methodimpl {
	Set sc=1,intOref=+$this
	If $data(%objTX(0,intOref),index) {
		If 'refresh RETURN 1
		Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	}
	Set:'$d(index) (index,%objTX(0,intOref))=$i(%objTX(1)),%objTX(1,index)=$this Set %objTX(1,index,1)=i%"%%OID",%objTX(1,index,6)=1 If (i%"%%OID" '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,index)=$lb(intOref,1) }
	Set Poref=r%CurrencyOrders If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	if ('$d(i%Home))&&(..Home)
	Set Poref=r%Home If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%Home)
	if ('$d(i%Work))&&(..Work)
	Set Poref=r%Work If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%Work)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0) methodimpl
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"EmailIndex"):1,1:0) If $SortBegin(^FCE.AccountHolderI("EmailIndex"))
	if $select(idxlist="":1,$listfind(idxlist,"NameIndex"):1,1:0) If $SortBegin(^FCE.AccountHolderI("NameIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) methodimpl {
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"EmailIndex"):1,1:0) If $SortEnd(^FCE.AccountHolderI("EmailIndex"),commit)
	if $select(idxlist="":1,$listfind(idxlist,"NameIndex"):1,1:0) If $SortEnd(^FCE.AccountHolderI("NameIndex"),commit)
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -^FCE.AccountHolderD
			 Quit 1
		}
		Lock -^FCE.AccountHolderD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^FCE.AccountHolderD#"S"
		Quit 1
	}
	Lock -^FCE.AccountHolderD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -(^FCE.AccountHolderD(id)#"E")
			Quit 1
		}
		Lock -(^FCE.AccountHolderD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^FCE.AccountHolderD(id)#"SE")
		Quit 1
	}
	Lock -(^FCE.AccountHolderD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors) methodimpl
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.AccountHolder).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.AccountHolder).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.AccountHolder).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.AccountHolder).%ValidateIndices()","multiProcess","'0' or '1'") }
	if $case(verbose,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.AccountHolder).%ValidateIndices()","verbose","'0' or '1'") }
	new mapList QUIT $$ValidateIndices^%SYS.SECURITY("FCE.AccountHolder",idxList,autoCorrect,lockOption,multiProcess,,verbose,.errors)
%ValidateObject(unused=0,checkserial=1) methodimpl {
	set sc=1
	If (r%Home'="")||m%Home Set iv=..Home If checkserial Set rc=iv.%ValidateObject(,1) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Home",..Home)
	If (r%Work'="")||m%Work Set iv=..Work If checkserial Set rc=iv.%ValidateObject(,1) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Work",..Work)
	If '$system.CLS.GetModified() Quit sc
	If m%Balance Set iv=..Balance If iv'="" Set rc=(..BalanceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Balance",iv)
	Set iv=..Currency If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Currency("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Currency Set rc=(..CurrencyIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Currency",iv)
	If m%DOB Set iv=..DOB If iv'="" Set rc=(..DOBIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DOB",iv)
	Set iv=..Email If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Email("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Email Set rc=(..EmailIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Email",iv)
	Set iv=..Name If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Name("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Name Set rc=(..NameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Name",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0) methodimpl
	New errcnt,i,id,keepobjects,obj,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	Kill ^||%Populate
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(FCE.AccountHolder).%New()
	. Set obj.Balance=##class(%Library.PopulateUtils).Float(0,,2)
	. Set obj.Currency=##class(%Library.PopulateUtils).ValueList("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")
	. Set obj.DOB=##class(%Library.PopulateUtils).Date(,+$h)
	. Set obj.Email=##class(%Library.PopulateUtils).String(50)
	. Do obj.HomeSetObject(##class(FCE.MailingAddress).PopulateSerial())
	. Set obj.Name=##class(%Library.PopulateUtils).Name()
	. Do obj.WorkSetObject(##class(FCE.MailingAddress).PopulateSerial())
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	Kill ^||%Populate
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("FCE.AccountHolder",1,verbose,.%msg,1)
	Quit saved
Update(paymentAmount) methodimpl {
	set ..Balance = ..Balance - paymentAmount
	return 1 }
zXMLDTD(top,format,input,dtdlist) methodimpl
 Quit ##class(%XML.Implementation).XMLDTD("FCE.AccountHolder",.top,.format,.input,.dtdlist)
zXMLExportInternal() methodimpl
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"FCE.AccountHolder")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"FCE.AccountHolder")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="FCE.AccountHolder"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="AccountHolder"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"AccountHolder"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"AccountHolder"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Name
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Name"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Name>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..PrintName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"PrintName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"PrintName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Email
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Email"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Email>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..DOB
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"DOB"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"date""",1:"")_">"_$select(val="":"",1:$zdate(val,3,,,,,-672045))_endprefix_"DOB>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Home
 If 'val.XMLIsObjectEmpty(ignoreNull) {
   Set topArg="Home",summaryArg=1,group=0,createId="",typeAttr=$select(encoded||xsitype:"*",1:"FCE.MailingAddress"),local=1,savexsiAttrs=xsiAttrs
   Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
 }
 Set val=..Work
 If 'val.XMLIsObjectEmpty(ignoreNull) {
   Set topArg="Work",summaryArg=1,group=0,createId="",typeAttr=$select(encoded||xsitype:"*",1:"FCE.MailingAddress"),local=1,savexsiAttrs=xsiAttrs
   Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
 }
 Set val=..Balance
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Balance"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"decimal""",1:"")_">"_val_endprefix_"Balance>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Currency
 If val'="" {
   Set temp="",temp1=$parameter("FCE.CurrencyName","NAMESPACE")
   Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
   Set %xmlmsg=currentIndent_beginprefix_"Currency"_$select(xsitype:" "_xsiPrefix_"type="""_temp1_"CurrencyName"""_temp,1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"Currency>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..CurrencyOrders
 Set k="" Set:deepFlag val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp="",temp1=$parameter("FCE.CurrencyOrder","NAMESPACE")
     Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
     If soap12 { Set %xmlmsg=beginprefix_"CurrencyOrders"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_temp1_$select($parameter("FCE.CurrencyOrder","XMLSUMMARY")'="":"s_CurrencyOrder",1:"CurrencyOrder")_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"CurrencyOrders "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_temp1_$select($parameter("FCE.CurrencyOrder","XMLSUMMARY")'="":"s_CurrencyOrder",1:"CurrencyOrder")_"["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"CurrencyOrders>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If $IsObject(val) {
       Set id=""
       If encoded,'inlineFlag {
         Set temp=$select($parameter("FCE.CurrencyOrder","XMLSUMMARY")'="":-1,1:1)
         Set id=+$get(idlist(temp*val))
         If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
       }
       If +id'=0 {
         Set %xmlmsg=currentIndent_beginprefix_"CurrencyOrder "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else { if id=0 Set id=$increment(idlist)
         Set topArg="CurrencyOrder",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"FCE.CurrencyOrder"),local=1,savexsiAttrs=xsiAttrs
         Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
         If 'encoded Do aval.%UnSwizzleAt(k)
       }
     } Else {
       Set %xmlmsg=currentIndent_beginprefix_"CurrencyOrder "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"CurrencyOrders>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="FCE.AccountHolder" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes) methodimpl
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("FCE.AccountHolder",.imports,.classes)
zXMLImportAttributes() methodimpl
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal() methodimpl
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"FCE.AccountHolder")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("Currency")) Set nodelist=nodelist_"Currency, "
   If '$data(exists("Email")) Set nodelist=nodelist_"Email, "
   If '$data(exists("Name")) Set nodelist=nodelist_"Name, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="Name" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Name")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Name=data
   Goto XMLLOOP } }
 If tag="PrintName" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Goto XMLLOOP } }
 If tag="Email" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Email")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Email=data
   Goto XMLLOOP } }
 If tag="DOB" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..DOBXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$s($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,0,-672045,+$h):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<-672045:$$Error^%apiOBJ(7204,data,-672045),1:$$Error^%apiOBJ(7203,data,+$h))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..DOB=data
   Goto XMLLOOP } }
 If tag="Home" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="MailingAddress") {
       Set class="FCE.MailingAddress"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("FCE.MailingAddress",85,"s",class))_$get(^oddXML("FCE.MailingAddress","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..Home=data
   Goto XMLLOOP } }
 If tag="Work" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="MailingAddress") {
       Set class="FCE.MailingAddress"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("FCE.MailingAddress",85,"s",class))_$get(^oddXML("FCE.MailingAddress","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..Work=data
   Goto XMLLOOP } }
 If tag="Balance" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$inumber(data,"LO","") Goto:data="" XMLImportErrchild Goto:('$select($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,2,0,):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Balance=data
   Goto XMLLOOP } }
 If tag="Currency" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   Set exists("Currency")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$select(data'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_data_"-")):1,1:$$Error^%apiOBJ(7205,data,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Currency=data
   Goto XMLLOOP } }
 If tag="CurrencyOrders" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="CurrencyOrder") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           Do XMLImportAttrinner()
           Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
           If (class="") || (class="CurrencyOrder") {
             Set class="FCE.CurrencyOrder"
           } Else {
             If $length(class,":")=2 Set class=$piece(class,":",2)
             Set class=$get(^oddCOM("FCE.CurrencyOrder",85,"s",class))_$get(^oddXML("FCE.CurrencyOrder","s",class)) If class="" Set class=0
             Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
             If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadType
             If $listlength(class)>1 {
               For tmpi=1:1:$listlength(class) {
                 If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
               }
               If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadType
             } Else { Set class=$list(class) }
           }
           Set data=$classmethod(class,"XMLNew",handler,inner,$this)
           If $isobject(data) Set tag=@(tree)@("d",$zlascii(innerlist,9)),nodeArg=inner,nodeArgChildlist=innerlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         If data'="" Do ..CurrencyOrders.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull) methodimpl
 If ..Name'="" Quit 0
 If ..PrintName'="" Quit 0
 If ..Email'="" Quit 0
 If ..DOB'="" Quit 0
 If '..Home.XMLIsObjectEmpty() Quit 0
 If '..Work.XMLIsObjectEmpty() Quit 0
 If ..Balance'="" Quit 0
 If ..Currency'="" Quit 0
 If ..CurrencyOrders.Count()>0 Quit 0
 Quit 1
zXMLNew(document,node,containerOref="") methodimpl
	Quit (##class(FCE.AccountHolder).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema) methodimpl
 Quit ##class(%XML.Implementation).XMLSchema("FCE.AccountHolder",top,format,namespacePrefix,input,refOnly,.schema)
BalanceDisplayToLogical(%val) methodimpl {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
BalanceGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),2),1:"") }
BalanceIsValid(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,2,0,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0)) }
BalanceLogicalToDisplay(%val) methodimpl {
	Quit $s(%val="":"",1:$fn(%val,"",2)) }
BalanceNormalize(%val) methodimpl {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:$normalize($decimal(%val),2)) }
BalanceXSDToLogical(%val) methodimpl {
	Quit $inumber(%val,"LO","") }
CurrencyDisplayToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
CurrencyGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),3),1:"") }
CurrencyIsValid(%val) methodimpl {
	Quit $select(%val'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%val_"-")):1,1:$$Error^%apiOBJ(7205,%val,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")) }
CurrencyLogicalToDisplay(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
CurrencyLogicalToOdbc(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
CurrencyOdbcToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
CurrencyOrdersGetObject(force=0) methodimpl {
	Quit $select(r%CurrencyOrders=""&&($data(i%CurrencyOrders)):$select(i%CurrencyOrders="":"",1:$listbuild(i%CurrencyOrders_"")),(''..CurrencyOrders.%GetSwizzleObject(force,.oid)):oid,1:"") }
CurrencyOrdersGetObjectId(force=0) methodimpl {
	Quit $listget(..CurrencyOrdersGetObject(force)) }
CurrencyOrdersGetSwizzled(noswizzle=0) methodimpl {
	If r%CurrencyOrders'="" Quit r%CurrencyOrders
	If i%CurrencyOrders'="" {
		Set oid=$select(i%CurrencyOrders="":"",1:$listbuild(i%CurrencyOrders_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("FCE.CurrencyOrder","AccountHolder",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%CurrencyOrders=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="FCE.CurrencyOrder"
	Do oref.%SetModified(0)
	Quit oref }
CurrencyOrdersIsEmpty() methodimpl {
	Quit $listget(..CurrencyOrdersGetObject(1))="" }
CurrencyOrdersNewObject() methodimpl {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("FCE.CurrencyOrder","AccountHolder",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..CurrencyOrders=newobject
	Quit newobject }
CurrencyOrdersRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) methodimpl {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
CurrencyOrdersRelate(oref) methodimpl {
	Quit ..CurrencyOrders.Relate(oref) }
CurrencyOrdersSet(newvalue) methodimpl {
	If newvalue="" {
		If r%CurrencyOrders="",i%CurrencyOrders="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%CurrencyOrders=newvalue Quit 1
		If r%CurrencyOrders="",i%CurrencyOrders'="",i%CurrencyOrders=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%CurrencyOrders=newvalue Do newvalue.AccountHolderRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	Set r%CurrencyOrders=newvalue,i%CurrencyOrders=0,i%CurrencyOrders=""
	Quit 1 }
CurrencyOrdersUnRelate(oref) methodimpl {
	Quit ..CurrencyOrders.UnRelate(oref) }
DOBGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),5),1:"") }
EmailGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),4),1:"") }
HomeGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),6),1:"") }
NameGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),8),1:"") }
zPrintNameSQLCompute() methodimpl
	// Compute code for field PrintName
 set %d(8)=$piece(%d(7),",",2)_" "_$piece(%d(7),",",1)
 QUIT
WorkGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.AccountHolderD(id)),7),1:"") }
ExtentClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentExecute(%qHandle) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM %NOPARALLEL FCE.AccountHolder)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EZ6jKzwH8UbPd8iCFYMtIf5vsev",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlJ() } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_" %msg = "_$g(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
ExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
ExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport(row,60)
	}
	RETURN }
 q
%0dsqlJ()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL FCE . AccountHolder"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),",1,QExtent,","FCE.AccountHolder.CLS",1)
	q %xxoref
ExtentFunc() methodimpl {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM %NOPARALLEL FCE . AccountHolder /*#OPTIONS {""DynamicSQL"":1} */")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
ExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) methodimpl {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) methodimpl
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","AccountHolder","FCE","",$c(0,0,0,0,0,0,0,0,0,0,0,1,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1
EmailIndexCheckUnique(id="",pValue...) [ SQLCODE,id,pValue ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	if $Get(pValue(1))'="" {
		 ;---&sql(SELECT 1 as _PassFail FROM FCE.AccountHolder WHERE Email = :pValue(1) AND %ID <> :id)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, pValue
		try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8QweDgk6pYYS3NwHOnFRVZWCp5","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8QweDgk6pYYS3NwHOnFRVZWCp5"))||($ze["<ZSQLU>") { d %0dsqlN } else { throw } }
		Quit SQLCODE=100
	} else { quit 1 } }
 q
%0dsqlN	n %xxsql
	s %xxsql("S",1)="SELECT 1 AS _PassFail FROM FCE . AccountHolder WHERE Email = :pValue(1) AND %ID <> :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return
EmailIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.AccountHolder WHERE (:K1 is not null and Email = :K1) OR (:K1 IS NULL AND Email IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8O7aDz1gBjgZl4u3SDNgMo3w4G","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8O7aDz1gBjgZl4u3SDNgMo3w4G"))||($ze["<ZSQLU>") { d %0dsqlP } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlP	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . AccountHolder WHERE ( :K1 IS NOT NULL AND Email = :K1 ) OR ( :K1 IS NULL AND Email IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
zEmailIndexSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key EmailIndex.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=..EmailIndexSQLFindRowIDByConstraint($lb(%pVal(1)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"AccountHolder"_":"_"EmailIndex") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.AccountHolderI("EmailIndex",$zu(28,%pVal(1),7))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zEmailIndexSQLFindRowIDByConstr(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key EmailIndex value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(5)=$lg(%con,1)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM FCE.AccountHolder WHERE Email = :%d(5))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EdzubgWMCIr8gvp7pts9RzLjBJl","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EdzubgWMCIr8gvp7pts9RzLjBJl"))||($ze["<ZSQLU>") { d %0dsqlR } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . AccountHolder WHERE Email = :%d(5)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
IDKEYCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
IDKEYDelete(K1,concurrency=-1) methodimpl {
	Quit ..%DeleteId(.K1,concurrency) }
IDKEYExists(K1,id="") methodimpl {
	s id=K1 q ..%ExistsId(K1) }
IDKEYOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"AccountHolder"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.AccountHolderD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
NameIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.AccountHolder WHERE (:K1 is not null and Name = :K1) OR (:K1 IS NULL AND Name IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ewm7tGalpggJRVRqmAs6zg99mdT","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"Ewm7tGalpggJRVRqmAs6zg99mdT"))||($ze["<ZSQLU>") { d %0dsqlT } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlT	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . AccountHolder WHERE ( :K1 IS NOT NULL AND Name = :K1 ) OR ( :K1 IS NULL AND Name IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.AccountHolder.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
%sqllistUCQ(t) public	{
	s t("%0dsqlA")="",t("%0dsqlC")="",t("%0dsqlF")="",t("%0dsqlH")="",t("%0dsqlJ")="",t("%0dsqlN")="",t("%0dsqlP")="",t("%0dsqlR")=""
	s t("%0dsqlT")=""
}