ROUTINE FCE.Currency.1 [Type=INT,Generated]
 ;FCE.Currency.1
 ;Generated for class FCE.Currency.  Do NOT edit. 08/14/2023 08:17:28AM
 ;;676B7051;FCE.Currency
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) methodimpl {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..Image
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/1
 s proporef=..Image
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildDeferredIndices(lockFlag=0,journalFlag=1) methodimpl {
	return $$Error^%apiOBJ(5758,"%Storage.Persistent::%BuildDeferredIndices") }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") methodimpl {
	if ($listlength(pIndexList)=1)&&($listget(pIndexList,1)="") { return 1 }
	Set class=$classname(),tBuildFlags=1,tBuildFlags(class)=$c(0)
	Set tPtr=0,tStatus=1
	While $listnext(pIndexList,tPtr,tIndex) {
		continue:tIndex=""
		If '$d(^oddCOM(class,"i",tIndex)) {
			Set tStatus=$select(+tStatus:$$Error^%apiOBJ(5066,class_"::"_tIndex),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5066,class_"::"_tIndex)))
		}
	}
	If ('tStatus) RETURN tStatus
	if ((pIndexList="")||($listfind(pIndexList,"CurrencyIndex"))),'$listfind(pIgnoreIndexList,"CurrencyIndex") { set $Extract(tBuildFlags(class),1)=$c(1) }
	Quit ..%BuildIndexInternal(.pLockFlag,.pAutoPurge,.pStartID,.pEndID,.pIndexList,.tBuildFlags,"^FCE.CurrencyD",0,.pJournalFlag,0) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") methodimpl {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1),$SortBegin(^FCE.CurrencyI("CurrencyIndex")),$increment(^IRIS.TempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^IRIS.TempIndexBuild(pJob,1))) }
		Set tPrefetch=$prefetchon(^FCE.CurrencyD)
		If 'pFirstRange||('$data(^FCE.CurrencyD(pStartID))) { Set tID=$order(^FCE.CurrencyD(pStartID)) } Else { Set tID=pStartID }
		While tID'="",(pEndID="")||(tID']]pEndID) {
			If pLockFlag=2 {
				Set tSC = ..%LockId(tID,1)
				If ('tSC) {
					Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
					Set tID=$order(^FCE.CurrencyD(tID))
					Continue
				}
			}
			If pLockFlag'=2||($data(^FCE.CurrencyD(tID))) {
				Set tSC=..%FileIndices(tID,.pIndexHandle)
				If ('tSC) { Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC)) }
			}
			Do:pLockFlag=2 ..%UnlockId(tID,1,1)
			set tID=$order(^FCE.CurrencyD(tID))
		}
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1) {
		If $increment(^IRIS.TempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^IRIS.TempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^IRIS.TempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^FCE.CurrencyI("CurrencyIndex")) {}
	}
	Set:$Get(tPrefetch) tPrefetch=$prefetchoff(^FCE.CurrencyD)
	Quit tStatus }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) [ SQLCODE,pID,tCol1 ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tCol1 
	set tStatus = ..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC) if ('tStatus) { set pErrorInfo = $Listbuild(pID) quit tStatus } if tMSTC '= $classname() { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) }
	set tStatus = 1, pErrorInfo = ""
	 ;---&sql(select Currency INTO :tCol1 FROM FCE.Currency WHERE %ID = :pID)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, pID, tCol1
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EAmgdb3Onci9btgI2NQZLsEp1JS","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EAmgdb3Onci9btgI2NQZLsEp1JS"))||($ze["<ZSQLU>") { d %0dsqlA } else { throw } }
	if 'SQLCODE {
		if ((pConstraintList="")||($lf(pConstraintList,"CurrencyIndex"))) && ('..CurrencyIndexCheckUnique(pID,tCol1)) { set tStatus = $select(+tStatus:$$Error^%apiOBJ(5808,$classname()_".CurrencyIndex"),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5808,$classname()_".CurrencyIndex"))) }
		set pErrorInfo = $Listbuild(pID,tCol1)
	} elseif SQLCODE < 0 { set tStatus = $$Error^%apiOBJ(5540,SQLCODE,$Get(%msg)) }
	quit tStatus }
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT Currency INTO :tCol1 FROM FCE . Currency WHERE %ID = :pID"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Currency.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set tCol1="" } catch {} }
	return
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM %NOPARALLEL FCE.Currency)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, tID
	 
	 ;---&sql(open ext)
	if $g(%ext0363)'="" { s SQLCODE=-101 } else { try { s %ext0363="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EIKzRW97REP1Sc33fixDTSKtL0c",%ext0363=$classmethod(%ext0363,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%ext0363)),$ze'["<ZSQLU>" { throw } } if '$isobject(%ext0363) { s %ext0363=$$%0dsqlC() } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0363))'=1 { s SQLCODE=-102 } else { do %ext0363.FET() }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0363)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0363 }
	}
	quit tStatusAll }
 q
%0dsqlC()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM %NOPARALLEL FCE . Currency"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),",0,ext,","FCE.Currency.CLS",1)
	i $g(SQLCODE) { s tID="" }
	q %xxoref
%ComposeOid(id) methodimpl {
	set tCLASSNAME = $listget($g(^FCE.CurrencyD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","FCE.Currency")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%ConstructCloneInit(object,deep=0,cloned,location) methodimpl {
	If i%Image'=""||($isobject(r%Image)=1) Set r%Image=..Image.%ConstructClone(deep,.cloned),i%Image=""
	Set i%"%%OID"=""
	Quit 1 }
%Delete(oid="",concurrency=-1) methodimpl {
	RETURN:oid="" $$Error^%apiOBJ(5813,$classname())
	set id=$listget(oid) RETURN:id="" $$Error^%apiOBJ(5812,$classname())
	set traninit=0
	set $zt="%DeleteERR"
	if concurrency = -1 { set concurrency=$zu(115,10) }
	if (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) { RETURN $$Error^%apiOBJ(5828) }
	set class=$listget(oid,2)
	if class="" { set sc=..%OnDetermineClass(oid,.class) RETURN:('sc) sc set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } else { set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
	if $classname()'=class { RETURN $classmethod(class,"%Delete",oid,concurrency) }
	if +$g(%objtxSTATUS)=0 { set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	set oref=..%Open(oid,concurrency) if oref="" { set sc=$$Error^%apiOBJ(5810,$classname(),$listget(oid)) goto %DeleteEnd }
	set stream=oref.ImageGetObject() if stream'="" { set ^||%isc.strd($i(^||%isc.strd))=$lb(stream,"%Stream.GlobalBinary") }
	set oref=""
	set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } if $isobject(oref)=1 { do oref.%DeleteOID() }
	set sc=..%DeleteData(id,concurrency)
	if (''sc) {
		set tPtr = "" for { set tPtr=$order(^||%isc.strd(tPtr),1,tStreamData) quit:tPtr=""  set stream=$li(tStreamData,1),cls=$li(tStreamData,2),sc=$classmethod(cls,"%Delete",stream,concurrency) quit:('sc) }
		kill ^||%isc.strd
	}
%DeleteEnd if ('sc) { kill ^||%isc.strd } if traninit { if (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } } else { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
	RETURN sc
%DeleteERR	set $zt="",sc=$$Error^%apiOBJ(5002,$ZE)
	goto %DeleteEnd }
%DeleteData(id,concurrency) methodimpl {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^FCE.CurrencyD(id))) {
		Set bsv0N1=^FCE.CurrencyD(id)
		Set bsv0N2=$listget(bsv0N1,2)
		If concurrency, ('$g(%0CacheLock($classname(),"E"))) {
			Lock +^FCE.CurrencyI("CurrencyIndex",bsv0N2):$zu(115,4)
			If $test {
				Lock -^FCE.CurrencyI("CurrencyIndex",bsv0N2)
			} Else {
				Set sc = $$Error^%apiOBJ(5803,$classname())
				Goto DeleteDataEXIT
			}
		}
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"CurrencyIndex","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"CurrencyIndex","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",$listget(bsv0N1,2))
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Set bsv0N3=$listget(bsv0N1,2)
		Kill ^FCE.CurrencyI("CurrencyIndex",bsv0N3,id)
		Kill ^FCE.CurrencyD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^FCE.CurrencyD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") methodimpl {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) methodimpl {
	Try { set tExists = $s(id="":0,$d(^FCE.CurrencyD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0,pVectorBuffer) methodimpl {
	try {
		Set bsv0N2=$Get(^FCE.CurrencyD(id))
		Set bsv0N3=$listget(bsv0N2,1)
		if bsv0N3'="" {
			set bsv0N1=$piece(bsv0N3,"~",*-1)
			set:bsv0N1'["." bsv0N1="User."_bsv0N1
			if bsv0N1'="" { RETURN $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle) }
		}
		If ('pIndexHandle)||($Ascii($Get(pIndexHandle("FCE.Currency")),1)=1) {
			Set bsv0N4=$listget(bsv0N2,2)
			Set ^FCE.CurrencyI("CurrencyIndex",bsv0N4,id)=$listget(bsv0N2,1)
		}
	}
	catch {
		RETURN $$Error^%apiOBJ(5002,$ze)
	}
	RETURN 1
getbuffered(glo,&vectorbuffer,id)
	if '$d(vectorbuffer(id)) { set vectorbuffer(id)=@glo }
	RETURN vectorbuffer(id) }
%InsertBatch(objects,concurrency=0,useTransactions=0) methodimpl {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0,locku=$c(0)
			if (useTransactions) tstart
			set id=$i(^FCE.CurrencyD)
			set zzc14v1=$listget(data,2)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.CurrencyI("CurrencyIndex",zzc14v1):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.CurrencyI("CurrencyIndex",zzc14v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":CurrencyIndex:"_$zreference)) }
				set ^FCE.CurrencyD(id)=data
				set ^FCE.CurrencyI("CurrencyIndex",zzc14v1,id)=$listget(data,1)
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			lock:$Ascii($Extract(locku,1)) -^FCE.CurrencyI("CurrencyIndex",zzc14v1)#"D"
			if lock lock -(^FCE.CurrencyD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData(killstreams=0) methodimpl
	Set $sequence(^FCE.CurrencyD)=""
	If killstreams Set $sequence(^FCE.CurrencyS)="" Kill ^FCE.CurrencyS
	Kill ^FCE.CurrencyD
	Quit 1
%LoadData(id) methodimpl {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^FCE.CurrencyD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^FCE.CurrencyD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^FCE.CurrencyD(id)#"SIE") }
		S i%Currency=$lg(%s1,2),i%USDExchangeRate=$lg(%s1,3),i%Image=$lg(%s1,4)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^FCE.CurrencyD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^FCE.CurrencyD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Currency="",i%Image="",i%USDExchangeRate=""
	quit }
%LoadDataFromMemory(id,objstate,obj) methodimpl {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%Currency=$lg(%s1,2),i%USDExchangeRate=$lg(%s1,3),i%Image=$lg(%s1,4)
		Quit 1
	} Else {
		set i%Currency="",i%Image="",i%USDExchangeRate=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) methodimpl {
	Set:concurrency'="" i%%Concurrency=concurrency
	If reset {
		Kill i%Image
	}
	Set r%Image=""
	If 'reset { Set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } Set $zobjoid("",$listget(oid),,sfn)=$this,i%"%%OID"=oid }
	Quit 1 }
%LockExtent(shared=0) methodimpl {
	If shared {
		Lock +(^FCE.CurrencyD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^FCE.CurrencyD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) methodimpl { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^FCE.CurrencyD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^FCE.CurrencyD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() methodimpl {
	If '$system.CLS.GetModified() Quit 1
	If m%Currency Set:i%Currency'="" i%Currency=(..CurrencyNormalize(i%Currency))
	If m%USDExchangeRate Set:i%USDExchangeRate'="" i%USDExchangeRate=(..USDExchangeRateNormalize(i%USDExchangeRate))
	Quit 1 }
%ObjectModified() methodimpl {
	If $system.CLS.GetModified() Quit 1
	If r%Image'="",..Image.%ObjectModified() Quit 1
	Quit 0 }
%OnDetermineClass(oid,class) methodimpl {
	Set id=$listget($get(oid))
	RETURN:id="" $$Error^%apiOBJ(5812)
	set idclass=$lg($get(^FCE.CurrencyD(id)),1)
	if idclass="" { set class="FCE.Currency" RETURN 1 }
	set class=$piece(idclass,"~",*-1)
	set:class'["." class="User."_class
	RETURN 1 }
%PhysicalAddress(id,paddr) methodimpl
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^FCE.CurrencyD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") methodimpl {
	Set locked=0,sc=1
	Try {
		if ($listlength(idxlist)=1)&&($listget(idxlist,1)="") { return 1 }
		Set tPtr=0
		While $listnext(idxlist,tPtr,tIndex) {
			continue:tIndex=""
			If '($d(^oddCOM($classname(),"i",tIndex))) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Return sc }
		If lockExtent {
			Set sc=..%LockExtent(0)
			If ('sc) { Return sc }
			Set locked=1
		}
		If $system.CLS.IsMthd("%OnBeforePurgeIndices") {
			Set sc=..%OnBeforePurgeIndices(.idxlist)
			If (('sc))||(($listlength(idxlist)=1)&&($listget(idxlist,1)="")) {
				If locked {
					Do ..%SQLReleaseTableLock(0)
				}
				Return sc
			}
		}
		if ((idxlist="")||($listfind(idxlist,"CurrencyIndex"))),'$listfind(pIgnoreIndexList,"CurrencyIndex") {
			kill ^FCE.CurrencyI("CurrencyIndex")
		}
		Set sc=1
		If $system.CLS.IsMthd("%OnAfterPurgeIndices") { Set sc=..%OnAfterPurgeIndices(.idxlist) }
	} Catch tException {
		Set sc=tException.AsStatus(),$ZE=""
	}
	If locked { Do ..%UnlockExtent(0) }
	Quit sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0) methodimpl
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^FCE.CurrencyD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("FCE.Currency","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^FCE.CurrencyD(%d(1))),"FCE.Currency",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="") methodimpl
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^FCE.CurrencyD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"FCE"_"."_"Currency") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"FCE"_"."_"Currency") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="") methodimpl
	RETURN ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="") methodimpl
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.Currency'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'FCE.Currency'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.Currency' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'FCE.Currency' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"CurrencyIndex"))),'$listfind(pIgnoreIndexList,"CurrencyIndex") {
			if pActions["P" {
				set sn(1)=%e(2) set sn(2)=%d(1) k ^FCE.CurrencyI("CurrencyIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(2) set sn(2)=%d(1) set ^FCE.CurrencyI("CurrencyIndex",sn(1),sn(2))=%d(5)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUniqueIndices(pIndices,pOK) methodimpl
	new d,g,n,o set d=0
	if $lf(pIndices,"CurrencyIndex") {
		set g="^FCE.CurrencyI(""CurrencyIndex"")",o="^FCE.CurrencyI(""CurrencyIndex"","
		for  {
			set g=$q(@g@("")) quit:g=""||(o'=$e(g,1,$l(o)))
			set n=$q(@g@("")) quit:n=""  if o=$e(n,1,$l(o)),$lb($qs(g,2))=$lb($qs(n,2)) { set d=1 quit  }
	}
		if d { set pOK=0,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler42",,"CurrencyIndex","FCE"_"."_"Currency") QUIT  }
	}
	set pOK=1 QUIT
%SQLCopyIcolIntoName() methodimpl
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Currency")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("Image")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("USDExchangeRate")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("x__classname")=%d(5)
	QUIT
%SQLDefineiDjVars(%d,subs,master) methodimpl
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0,%bufferedColumns=0) methodimpl
	// SQL DELETE method for table FCE.Currency
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^FCE.CurrencyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.Currency","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"Currency",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"FCE"_"."_"Currency",%rowid) do ..%SQLEExit() QUIT  }
	if %e(5)'="" { set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "FCE.Currency"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("CurrencyIndex")="%e(2),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","FCE.Currency",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","FCE.Currency",%k,"f",%t)) quit:%t=""  set %st=(%t="FCE.Currency") set %fk="" for  set %fk=$o(^rINDEXEXT("F","FCE.Currency",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	if '($a(%check,2)#2),'$g(%0CacheLock("FCE.Currency","E")) {
		lock +^FCE.CurrencyI("CurrencyIndex",%e(2))#"S":$zu(115,4) if $t { lock -^FCE.CurrencyI("CurrencyIndex",%e(2))#"S" } else { do ..%SQLUnlockError("CurrencyIndex") set SQLCODE=sqlcode do ..%SQLEExit() QUIT }
	}
	set ce="" for  { set ce=$order(^oddSQL("FCE","Currency","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		set sn(1)=%e(2) set sn(2)=%d(1) k ^FCE.CurrencyI("CurrencyIndex",sn(1),sn(2))
	}
	new %rc if $g(%e(3))'="" { if $a(%check,2)=1 { set %rc=##class(%Stream.Object).%Delete(%e(3),0) } else { set %rc=##class(%Stream.Object).%Delete(%e(3)) } if '%rc { set SQLCODE=$s($case($lg($lg($extract(%rc,3,*)),1,0),"5803":1,"5804":1,:0):-110,1:-412),%msg="Error attempting to delete stream object for field "_"Image"_":  "_$$GetErrorText^%apiOBJ(%rc) do ..%SQLEExit() QUIT  }}
	k ^FCE.CurrencyD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Currency",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Currency") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams() methodimpl
	// Delete all temporary streams
	new %sid,%ts
	if $g(%d(3))?1.n1"@"1.e { if $d(%qstrhandle($g(%qacn,1),%d(3)),%ts) { set %sid=%ts.%Oid() if $a(%check,2)=1 { do %ts.%Delete(%sid,0) } else { do %ts.%Delete(%sid) } kill %ts }}
	QUIT
%SQLEExit() methodimpl
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Currency"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.CurrencyD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef) methodimpl
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode) methodimpl
	new s set %d(1)=%rowid,s="" if '$d(^FCE.CurrencyD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(5)=$lg(s),%e(2)=$lg(s,2),%e(3)=$lg(s,4)
	set:%e(3)'="" %e(3)=..ImageOid(%e(3))
	QUIT
%SQLGetOldAll() methodimpl
	new s set %d(1)=%rowid,s="" if '$d(^FCE.CurrencyD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(5)=$lg(s),%e(2)=$lg(s,2),%e(4)=$lg(s,3),%e(3)=$lg(s,4)
	set:%e(3)'="" %e(3)=..ImageOid(%e(3))
	QUIT
%SQLGetOldIndex(%rowid,%e,pF=0,sqlcode,%buffervector=0,fld="") methodimpl
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("Currency")) %d(2)=tF("Currency") set:$d(tF("x__classname")) %d(5)=tF("x__classname") 
			RETURN
		}
	}
	catch { }
	new s set %d(1)=%rowid,s="" if '$d(^FCE.CurrencyD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(5)=$lg(s),%e(2)=$lg(s,2)
	if pF { set:$d(%d(2)) pF("Currency")=%d(2) set:$d(%d(5)) pF("x__classname")=%d(5)  }
	set sqlcode=0
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0,%bufferedColumns=0) methodimpl
	// SQL INSERT method for table FCE.Currency
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","FCE"_"."_"Currency") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			do:$g(%d(2))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) 
			quit:sqlcode<0		// A required field was missing
			new %unlockcon
				// Constraint CurrencyIndex
				if '$a(%check,2) { lock +^FCE.CurrencyI("CurrencyIndex",%d(2)):$zu(115,4) if $t { set %unlockcon(12)=$name(^FCE.CurrencyI("CurrencyIndex",%d(2))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("CurrencyIndex") quit  } }
				if '$a(%check,7) { if $d(^FCE.CurrencyI("CurrencyIndex",%d(2))) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Currency","CurrencyIndex","Currency"_"="_$$quoter^%apiSQL($g(%d(2)))) quit  }} // INSERT
				else { new tID set tID=..CurrencyIndexSQLFindRowIDByConstraint($lb(%d(2)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^FCE.CurrencyD) } elseif %d(1)>$g(^FCE.CurrencyD) { if $i(^FCE.CurrencyD,$zabs(%d(1)-$g(^FCE.CurrencyD))) {}} elseif $d(^FCE.CurrencyD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"FCE"_"."_"Currency"_"."_"ID") do ..%SQLDeleteTempStreams() do ..%SQLEExit() RETURN "" }
	set:'($d(%d(5))#2) %d(5)="" set:'($d(%d(3))#2) %d(3)="" set:'($d(%d(2))#2) %d(2)=""
	if '$a(%check,2) {
		new %ls lock +^FCE.CurrencyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.Currency","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"Currency",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	if '$a(%check,5),'$a(%check,6) {
		if %d(3)'="" { set %d(3)=..%SQLInsertStreams(%d(3),"FCE.Currency","Image","Image",1,1,.sqlcode,.%msg) if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }}
	}
	set ^FCE.CurrencyD(%d(1))=$lb(%d(5),%d(2),%d(4),%d(3))
	if '$a(%check,3) {
		set sn(1)=%d(2) set sn(2)=%d(1) set ^FCE.CurrencyI("CurrencyIndex",sn(1),sn(2))=%d(5)
	}
	lock:$a(%l,2) -@(%unlockcon(12)_"#""D""") 
	lock:$a(%l) -^FCE.CurrencyD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Currency",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Currency") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) methodimpl {
	if $a(%check,2)=1 { set tOldConcurrency=$zu(115,10) do $zu(115,10,0) }
	set tStream=$classmethod(pClassname,pProperty_"Open","")
	if tStream="" { set sqlcode=-412,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler11",,"FCE"_"."_"Currency",pField) do:$a(%check,2)=1 $zu(115,10,tOldConcurrency) RETURN "" }
	set tTempStream=""
	if $isobject(pVal) { set tTempStream=pVal }
	elseif (pVal?1.n1"@"1.e) { try { set tTempStream=$zobjref(pVal) if $isobject(tTempStream),tTempStream.%IsA("%Stream.Object"),((pVal_"")=(tTempStream_"")) {} else { set tTempStream="" }} catch { set $ze="" }}
	elseif $g(%inssel),$listvalid(pVal) { if $a(%check,2)=1 { set tTempStream=##class(%Stream.Object).%Open(pVal,0) } else { set tTempStream=##class(%Stream.Object).%Open(pVal) } }
	if $isobject(tTempStream) {
		if 'tTempStream.IsNull() { set tSC=tStream.CopyFromAndSave(tTempStream) if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }}
		else { set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }}
	}
	elseif pVal'="" {
		set:pChangeEmptyToNull&&(pVal=$c(0)) pVal=""
		set tSC=tStream.Write(pVal) if 'tSC { set tError="SQLFiler13" goto ERRORInsertStreams }
		set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }
	}
	else {
		set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler12" goto ERRORInsertStreams }
	}
	set pVal=tStream.%Oid() set:pOIDType=1 pVal=$lg(pVal) set:pOIDType=2 pVal=$li(pVal,1,2) do:$a(%check,2)=1 $zu(115,10,tOldConcurrency)
	RETURN pVal
ERRORInsertStreams	do:$a(%check,2)=1 $zu(115,10,tOldConcurrency) set sqlcode=$s($case($lg($lg($extract(tSC,3,*)),1,0),"5803":1,"5804":1,:0):-110,1:-412),%msg=$$GetErrorText^%apiOBJ(tSC),%msg=$g(%msg)_" "_$$FormatMessage^%occMessages(,"%SQL.Filer",tError,,"FCE"_"."_"Currency",pField)_": '"_$g(pVal)_"'" RETURN "" }
%SQLInvalid(pIcol,pVal) methodimpl {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"FCE"_"."_"Currency"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname) methodimpl
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"FCE"_"."_"Currency") quit
%SQLNormalizeFields() methodimpl
	set:$g(%d(4))'="" %d(4)=$normalize($decimal(%d(4)),3)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="") methodimpl
	RETURN ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0) methodimpl
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"FCE"_"."_"Currency",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),Currency,Image,USDExchangeRate,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5) FROM FCE.Currency WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EICQIfMpfpagAylF75wfd1GogiI","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EICQIfMpfpagAylF75wfd1GogiI"))||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(5)'="" { new sn set sn=$p(d(5),$e(d(5)),$l(d(5),$e(d(5)))-1) if "FCE.Currency"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("FCE.Currency",18),d=5,d=$zobjexport(d,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , Currency , Image , USDExchangeRate , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) FROM FCE . Currency WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","FCE",0,"",),,"FCE.Currency.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set d(1)="",d(2)="",d(3)="",d(4)="",d(5)="" } catch {} }
	return
%SQLReleaseLock(%rowid,s=0,i=0,e="") methodimpl
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^FCE.CurrencyD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0) methodimpl
	set s=$e("S",s)_$e("D",i) lock -^FCE.CurrencyD#s QUIT 1
	Return
%SQLUnlock() methodimpl
	do:$g(SQLCODE)<0&&(%oper="UPDATE") ..%SQLDeleteTempStreams()
	lock:$a(%l) -^FCE.CurrencyD(%d(1))#"E"
	QUIT
%SQLUnlock2() methodimpl
	lock:$a(%l,2) -@(%unlockcon(12)_"#""D""") QUIT
%SQLUnlockError(cname) methodimpl
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"FCE"_"."_"Currency",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"FCE"_"."_"Currency",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid,%bufferedColumns=0,%bufferedColumnsDel=0) methodimpl
	// SQL UPDATE method for table FCE.Currency
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'$a(%check,7),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","FCE"_"."_"Currency") QUIT  }
	for icol=2:1:5 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^FCE.CurrencyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("FCE.Currency","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"FCE"_"."_"Currency",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"Currency",%rowid) do ..%SQLEExit() QUIT  } for icol=5,3,2 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"FCE"_"."_"Currency",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(5)'="" set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "FCE.Currency"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if $a(%e,2),$g(%d(2))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) }
			quit:sqlcode
			new %unlockcon
			if ($a(%e,2)) {	// UNIQUE constraint CurrencyIndex
				if '($a(%check,2)#2),'$g(%0CacheLock("FCE.Currency","E")) {
					lock +^FCE.CurrencyI("CurrencyIndex",%d(2)):$zu(115,4) if $t { set %unlockcon(12)=$name(^FCE.CurrencyI("CurrencyIndex",%d(2))),$e(%l,2)=$c(1) } else { do ..%SQLUnlockError("CurrencyIndex") quit  } 
					lock +^FCE.CurrencyI("CurrencyIndex",%e(2)):$zu(115,4) if $t { lock -^FCE.CurrencyI("CurrencyIndex",%e(2)) } else { do ..%SQLUnlockError("CurrencyIndex") quit  }
				}
				if $d(^FCE.CurrencyI("CurrencyIndex",%d(2))) { set sqlcode=-120,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"FCE"_"."_"Currency","CurrencyIndex","Currency"_"="_$$quoter^%apiSQL($g(%d(2)))) quit  }
			}
			new %fk,%st,%t,%y
			if ($a(%e,2)),'$zu(115,7) {
				set %t="" for  { set %t=$o(^rINDEXEXT("F","FCE.Currency","CurrencyIndex","f",%t)) quit:%t=""  set %st=(%t="FCE.Currency") s %fk="" for  { set %fk=$o(^rINDEXEXT("F","FCE.Currency","CurrencyIndex","f",%t,%fk)) quit:%fk=""  x "set %y=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,""CurrencyIndex"",$a(%check,2),%e(2),%d(2))" if %y { set sqlcode=-123 quit  }}}
			}
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if '$a(%check,5),'$a(%check,6) { new %rc,%stream,%ts
		if $a(%e,3) { set %d(3)=..%SQLUpdateStreams(%d(3),%e(3),"FCE.Currency","Image","Image",1,1,.sqlcode,.%msg,$g(%soid(3))) if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }}
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,1:$a(%e,5)) {
		set ^FCE.CurrencyD(%d(1))=$listupdate($g(^FCE.CurrencyD(%d(1))),1,$a(%e,5):%d(5),$a(%e,2):%d(2),$a(%e,4):%d(4),$a(%e,3):%d(3))
	}
	if '$a(%check,3) { 
		if $a(%e,2)||$a(%e,5) {	// CurrencyIndex index map
			if $a(%e,2) { set sn(1)=%e(2) set sn(2)=%d(1) k ^FCE.CurrencyI("CurrencyIndex",sn(1),sn(2)) }
			set sn(1)=%d(2) set sn(2)=%d(1) set ^FCE.CurrencyI("CurrencyIndex",sn(1),sn(2))=%d(5)
		}
	}
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"FCE"_"."_"Currency",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"FCE"_"."_"Currency") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) methodimpl {
	set:$a(%check,2)=1 zu11510=$zu(115,10,0)
	if pNew'="" {
		if $a(%check,2)=1 { set tStream=##class(%Stream.Object).%Open(pOld,0) } else { set tStream=##class(%Stream.Object).%Open(pOld) }
		if tStream="" { set tStream=$classmethod(pClassname,pProperty_"Open","") }
		if tStream="" { set sqlcode=-412,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler22",,"FCE"_"."_"Currency",pField) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }
		set tTempStream=""
		if $isobject(pNew) { set tTempStream=pNew }
		elseif (pNew?1.n1"@"1.e) { try { set tTempStream=$zobjref(pNew) if $isobject(tTempStream),tTempStream.%IsA("%Stream.Object"),((pNew_"")=(tTempStream_"")) {} else { set tTempStream="" }} catch { set $ze="" }}
		elseif pAllowOid,$listvalid(pNew),$ll(pNew)>2 { if $a(%check,2)=1 { set tTempStream=##class(%Stream.Object).%Open(pNew,0) } else { set tTempStream=##class(%Stream.Object).%Open(pNew) } }
		if tTempStream'="" {
			set tSC=tStream.CopyFromAndSave(tTempStream)
			if 'tSC { set sqlcode=-412,%msg=$$DecomposeStatus^%apiOBJ(tSC,.%msg) set:%msg %msg=%msg(1) }
			if sqlcode<0 { set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }
		}
		else {
			set:pChangeEmptyToNull&&(pNew=$c(0)) pNew=""
			set tSC=tStream.Write(pNew) if 'tSC { set tError="SQLFiler24" goto ERRORUpdateStreams }
			set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler23" goto ERRORUpdateStreams }
		}
	}
	else {
		if pOld'="" { if $a(%check,2)=1 { set tSC=##class(%Stream.Object).%Delete(pOld,0) } else { set tSC=##class(%Stream.Object).%Delete(pOld) } if 'tSC { set sqlcode=-412,%msg=$$DecomposeStatus^%apiOBJ(tSC,.%msg) set:%msg %msg=%msg(1) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }}
		set tStream=$classmethod(pClassname,pProperty_"Open","")
		if tStream="" { set sqlcode=-412,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler22",,"FCE"_"."_"Currency",pField) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510) RETURN "" }
		set tSC=tStream.%Save() if 'tSC { set tError="SQLFiler23" goto ERRORUpdateStreams }
	}
	set pNew=tStream.%Oid() set:pOIDType=1 pNew=$lg(pNew) set:pOIDType=2 pNew=$li(pNew,1,2) set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510)
	RETURN pNew
ERRORUpdateStreams	set:$a(%check,2)=1 zu11510=$zu(115,10,zu11510)
	set sqlcode=$s($case($lg($lg($extract(tSC,3,*)),1,0),"5803":1,"5804":1,:0):-110,1:-412),%msg=$$GetErrorText^%apiOBJ(tSC),%msg=$g(%msg)_" "_$$FormatMessage^%occMessages(,"%SQL.Filer",tError,,"FCE"_"."_"Currency",pField)_": '"_$g(pNew)_"'"
	RETURN "" }
%SQLValidateCompFields(sqlcode) methodimpl
	QUIT 'sqlcode
%SQLValidateFields(sqlcode) methodimpl
	if $g(%d(4))'="",'($select($isvalidnum(%d(4),3,.001,):1,'$isvalidnum(%d(4)):$$Error^%apiOBJ(7207,%d(4)),1:$$Error^%apiOBJ(7204,%d(4),.001))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	if $g(%d(2))'="",'(%d(2)'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%d(2)_"-"))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	QUIT 'sqlcode
%SQLnBuild() methodimpl {
	set %n=$lb(,"ID","Currency","Image","USDExchangeRate","x__classname")
	QUIT }
%Save(related=1) methodimpl {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) If ('sc) { ZTrap "SG" } Set intRef=+$this,objValue=$get(%objTX(1,+$g(%objTX(0,intRef)),1)),sc=..%SerializeObject(.objValue,1) If ('sc) { ZTrap "SG" } Set %objTX(1,%objTX(0,intRef),1)=objValue GoTo %SaveCOMMIT
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intRef=$li(data) If '$data(%objTX(1,+$g(%objTX(0,intRef)),2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,%objTX(0,intRef)) Kill %objTX(2,i),%objTX(11,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objRef)),1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objRef),1)=objValue Kill %objTX(1,%objTX(0,+objRef),3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objRef),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objRef),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objRef)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intPred="",intRef=$li(data) For  Set intPred=$order(%objTX(1,%objTX(0,intRef),2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If ('sc) { If $d(%objTX(11,+%objTX(1,intPred))) { Set %objTX(2,%objTX(11,+%objTX(1,intPred)),1)=sc } Else { Set %objTX(2,$i(%objTX(2)),1)=sc,%objTX(11,+%objTX(1,intPred))=%objTX(2) } } If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objSerialize)),1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objSerialize),1)=objValue Kill %objTX(1,%objTX(0,+objSerialize),3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objSerialize),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objSerialize),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objSerialize)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set i="" for  set i=$order(%objTX(2,i)) quit:i=""  if ('$Get(%objTX(2,i,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,i,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) methodimpl {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0,locku=$c(0)
		if 'idassigned { set id=$i(^FCE.CurrencyD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^FCE.CurrencyD(id))) {
					set insert=1
					if lock { lock -(^FCE.CurrencyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^FCE.CurrencyD(id)#"ES") set tSharedLock=1 }
				if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.CurrencyI("CurrencyIndex",i%Currency):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.CurrencyI("CurrencyIndex",i%Currency)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":CurrencyIndex:"_$zreference)) }
				set ^FCE.CurrencyD(id)=$lb("",i%Currency,i%USDExchangeRate,i%Image)
				set ^FCE.CurrencyI("CurrencyIndex",i%Currency,id)=""
			}
			else {
				set zzc31v1=$listget(^FCE.CurrencyD(id),2)
				if i%Currency'=zzc31v1 { if (i%%Concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^FCE.CurrencyI("CurrencyIndex",i%Currency):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } l +^FCE.CurrencyI("CurrencyIndex",zzc31v1):$zu(115,4) if $t { l -^FCE.CurrencyI("CurrencyIndex",zzc31v1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }} If ($data(^FCE.CurrencyI("CurrencyIndex",i%Currency)))&&('$data(^FCE.CurrencyI("CurrencyIndex",i%Currency,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":CurrencyIndex:"_$zreference)) } }
				if (i%Currency'=zzc31v1) {
					kill ^FCE.CurrencyI("CurrencyIndex",zzc31v1,id)
					if i%Currency'=zzc31v1{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"CurrencyIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"CurrencyIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v1,i%Currency) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^FCE.CurrencyI("CurrencyIndex",i%Currency,id)=""
				}
				set ^FCE.CurrencyD(id)=$lb("",i%Currency,i%USDExchangeRate,i%Image)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^FCE.CurrencyD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^FCE.CurrencyD(id)) }
		}
		lock:$Ascii($Extract(locku,1)) -^FCE.CurrencyI("CurrencyIndex",i%Currency)#"D"
		if lock lock -(^FCE.CurrencyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) methodimpl {
	try {
		set zzc5v1=$listget(data,2)
		set zzc5v2=$listget(data,1)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0,locku=$c(0)
		if 'idassigned { set id=$i(^FCE.CurrencyD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^FCE.CurrencyD(id))) {
					set insert=1
					if lock { lock -(^FCE.CurrencyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^FCE.CurrencyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { l +^FCE.CurrencyI("CurrencyIndex",zzc5v1):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } } If $data(^FCE.CurrencyI("CurrencyIndex",zzc5v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":CurrencyIndex:"_$zreference)) }
				set ^FCE.CurrencyD(id)=data
				set ^FCE.CurrencyI("CurrencyIndex",zzc5v1,id)=zzc5v2
			}
			else {
				set zzc31v1=$lg(idList,1)
				set zzc31v2=$listget(^FCE.CurrencyD(zzc31v1),2)
				if zzc5v1'=zzc31v2 { if (concurrency)&&('$g(%0CacheLock($classname(),"E"))) { lock +^FCE.CurrencyI("CurrencyIndex",zzc5v1):$zu(115,4) if $Test { Set $Extract(locku,1)=$c(1) } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } l +^FCE.CurrencyI("CurrencyIndex",zzc31v2):$zu(115,4) if $t { l -^FCE.CurrencyI("CurrencyIndex",zzc31v2) } Else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) }} If ($data(^FCE.CurrencyI("CurrencyIndex",zzc5v1)))&&('$data(^FCE.CurrencyI("CurrencyIndex",zzc5v1,id))) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5808,$classname()_":CurrencyIndex:"_$zreference)) } }
				if (zzc5v1'=zzc31v2) {
					kill ^FCE.CurrencyI("CurrencyIndex",zzc31v2,zzc31v1)
					if zzc5v1'=zzc31v2{ n %fk,%fc s %fc="" f  s %fc=$o(^rINDEXEXT("F",$classname(),"CurrencyIndex","f",%fc)) q:%fc=""  s %fk="" f  s %fk=$o(^rINDEXEXT("F",$classname(),"CurrencyIndex","f",%fc,%fk)) q:%fk=""  s tStatus=$classmethod(%fc,%fk_"Update",zzc31v2,zzc5v1) i ('tStatus) Throw ##class(%Exception.StatusException).ThrowIfInterrupt(tStatus) }
					set ^FCE.CurrencyI("CurrencyIndex",zzc5v1,id)=zzc5v2
				}
				set ^FCE.CurrencyD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		lock:$Ascii($Extract(locku,1)) -^FCE.CurrencyI("CurrencyIndex",zzc5v1)#"D"
		if lock lock -(^FCE.CurrencyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) methodimpl {
	If lockExtent {
		Set sc=..%LockExtent(0)
		Quit:('sc) sc
	}
	s id=$order(^FCE.CurrencyD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^FCE.CurrencyD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^FCE.CurrencyD(id))
	Set bsv0N2=$listget(bsv0N1,2)
	Set ^FCE.CurrencyI("CurrencyIndex",bsv0N2,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit 1
CatchError	Set $ZTrap=""
	If $ZE'="" {
		Set sc = $$Error^%apiOBJ(5002,$ZE)
	}
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit sc }
%SerializeObject(serial,partial=0) methodimpl {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%Image'="" { Set:'$data(%objTX(0,+r%Image)) %objTX(0,+r%Image)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%Image))=r%Image,%objTX(1,%objTX(0,+r%Image),1)=..ImageGetObject(1),%objTX(1,%objTX(0,+r%Image),6)=2 Set M%Image=1,i%Image=$listget(%objTX(1,%objTX(0,+r%Image),1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) methodimpl {
	Set sc=1,intOref=+$this
	If $data(%objTX(0,intOref),index) {
		If 'refresh RETURN 1
		Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	}
	Set:'$d(index) (index,%objTX(0,intOref))=$i(%objTX(1)),%objTX(1,index)=$this Set %objTX(1,index,1)=i%"%%OID",%objTX(1,index,6)=1 If (i%"%%OID" '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,index)=$lb(intOref,1) }
	if ('$d(i%Image))&&(..Image)
	Set Poref=r%Image If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%Image)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0) methodimpl
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"CurrencyIndex"):1,1:0) If $SortBegin(^FCE.CurrencyI("CurrencyIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) methodimpl {
	if 'excludeunique,$select(idxlist="":1,$listfind(idxlist,"CurrencyIndex"):1,1:0) If $SortEnd(^FCE.CurrencyI("CurrencyIndex"),commit)
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -^FCE.CurrencyD
			 Quit 1
		}
		Lock -^FCE.CurrencyD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^FCE.CurrencyD#"S"
		Quit 1
	}
	Lock -^FCE.CurrencyD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) methodimpl {
	If 'shared {
		If 'immediate {
			Lock -(^FCE.CurrencyD(id)#"E")
			Quit 1
		}
		Lock -(^FCE.CurrencyD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^FCE.CurrencyD(id)#"SE")
		Quit 1
	}
	Lock -(^FCE.CurrencyD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors) methodimpl
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Currency).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Currency).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Currency).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Currency).%ValidateIndices()","multiProcess","'0' or '1'") }
	if $case(verbose,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(FCE.Currency).%ValidateIndices()","verbose","'0' or '1'") }
	new mapList QUIT $$ValidateIndices^%SYS.SECURITY("FCE.Currency",idxList,autoCorrect,lockOption,multiProcess,,verbose,.errors)
%ValidateObject(unused=0,checkserial=1) methodimpl {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	Set iv=..Currency If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::Currency("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%Currency Set rc=(..CurrencyIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Currency",iv)
	If m%USDExchangeRate Set iv=..USDExchangeRate If iv'="" Set rc=(..USDExchangeRateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"USDExchangeRate",iv)
	Quit sc }
ComputeRate(currencyIn,currencyOut) [ SQLCODE,currencyIn,currencyOut,inRate,outRate ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE,inRate,outRate  s:'$isobject($g(%sqlcontext)) %sqlcontext=##class(%Library.ProcedureContext).%New()
	// get the exchange rate between USD and currencyIn
	 ;---&sql(SELECT USDExchangeRate INTO :inRate
 	 ;---	     FROM FCE.Currency
 	 ;---	     WHERE Currency = :currencyIn)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, currencyIn, inRate
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8dk0TZZLAW9Sf8hyf4qDM9C9hH","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E8dk0TZZLAW9Sf8hyf4qDM9C9hH"))||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode1 = SQLCODE
	// get the exchange rate between USD and currencyOut
	 ;---&sql(SELECT USDExchangeRate INTO :outRate
 	 ;---	     FROM FCE.Currency
 	 ;---	     WHERE Currency = :currencyOut)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, currencyOut, outRate
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EuX9s6gVGKpgiM8g8I3klpo7iJB","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EuX9s6gVGKpgiM8g8I3klpo7iJB"))||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	set sqlcode2 = SQLCODE
	if (sqlcode1 = 0) && (sqlcode2 = 0) {
		// compute the exchange rate between currencyIn and currencyOut
		return (outRate / inRate)
	}
	else {
		write !, "Error code(s): ", sqlcode1, " ", sqlcode2
		return 0
	} }
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT USDExchangeRate INTO :inRate FROM FCE . Currency WHERE Currency = :currencyIn"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Currency.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set inRate="" } catch {} }
	return
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT USDExchangeRate INTO :outRate FROM FCE . Currency WHERE Currency = :currencyOut"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Currency.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set outRate="" } catch {} }
	return
ConvertCurrenciestoListString(valuelist) methodimpl {
	set delim = $extract(valuelist, 1)
	set currencies = $extract(valuelist, 2, *)
	set currencies = $listfromstring(currencies, delim)
	return currencies }
FetchRates(verbose=0) methodimpl {
	// create USD object if it doesn't exist already
	if '(..CurrencyIndexExists("USD")) {
		set currency = ..%New()
		set currency.Currency = "USD"
		set currency.USDExchangeRate = 1
		do currency.%Save()
		write:verbose !, "created USD object"
	}
	// now create/update the rest of the exchange rates
	set abbreviations = ..#ABBREVIATIONS
	set delim = $extract(abbreviations, 1)
	// skip first currency (USD) and get the rest
	set currencies = $piece(abbreviations, delim, 3, *)
	// change current delimiter to ,
	set currencies = $translate(currencies, delim, ",")
	set formatter = ##class(%JSON.Formatter).%New()
	set request = ##class(%Net.HttpRequest).%New()
	set request.Server = "apilayer.net"
	set uri = "/api/live?access_key=" _ 
			  $translate(..#ACCESSKEY, " ") _
	          "&currencies=" _ currencies _
	          "&source=USD&format=1"
	set stGet = request.Get(uri)
	if (('stGet) || (request.HttpResponse.StatusCode '= 200)) {
		do $system.Status.DisplayError(stGet)
		set rates = ""
	}
	else {
		// convert the response into a JSON object
		set response = ##class(%Library.DynamicObject).%FromJSON(request.HttpResponse.Data) 
		if verbose {
			write !, "Entire response:", !
			do formatter.Format(response)  // or "write response.%ToJSON()"
			write !
		}
		// get the rates from the quotes property (also JSON)
		set rates = response.quotes
	}
	if '$isobject(rates) {	
		// create JSON from DEFAULTRATES
		set rates = ##class(%Library.DynamicObject).%FromJSON(..#DEFAULTRATES)
	}
	if verbose {
		write !, "Rates:", !
		do formatter.Format(rates)  // or "write rates.%ToJSON()"
		write !
	}
	// iterate through the JSON object
	write:verbose !, "Loading rates..."
	set i = rates.%GetIterator()
	while i.%GetNext(.key, .value) {
		write:verbose !, key _ ":" _ value
		// the keys look like USDEUR so get the last 3 characters 
		set currencyName = $extract(key, 4, 6)
		// create or update the currency
		if '(..CurrencyIndexExists(currencyName)) {
			set currency = ..%New()
			set currency.Currency = currencyName
		}
		else {
			set currency = ..CurrencyIndexOpen(currencyName)
		}
		set currency.USDExchangeRate = value
		set stSave = currency.%Save()
		if ('stSave) {
			do $system.Status.DisplayError(stSave)
		}
	}
	return $system.Status.AppendStatus(stGet, stSave) }
ImportImages(directory) methodimpl {
	set currencies = ..ConvertCurrenciestoListString(..#ABBREVIATIONS)
	for image = 1: 1 : $listlength(currencies)
	{
		set currencyName = $list(currencies, image)
		set currency = ##class(FCE.Currency).CurrencyIndexOpen(currencyName)
		set file = ##class(%Stream.FileBinary).%New()
		set file.Filename = directory _ currencyName _ ".jpg"
		// does file exist?
		if (file.Size = 0) {
			write !, "Couldn't import ", file.Filename, !
			do $system.Status.DisplayError(%objlasterror)
			continue
		}
		do currency.Image.CopyFrom(file)
		set status = currency.%Save()
		do $system.Status.DisplayError(status)
		write !, currencyName, " imported"
		set file = ""
		set currency = ""
	} }
CurrencyDisplayToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
CurrencyGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.CurrencyD(id)),2),1:"") }
CurrencyIsValid(%val) methodimpl {
	Quit $select(%val'["-"&&("-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF-"[("-"_%val_"-")):1,1:$$Error^%apiOBJ(7205,%val,"-USD-EUR-INR-GBP-JPY-MXN-ZAR-BRL-CAD-CHF")) }
CurrencyLogicalToDisplay(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
CurrencyLogicalToOdbc(%val) methodimpl {
	RETURN $case(%val,"USD":"US Dollars","EUR":"Euros","INR":"Indian Rupees","GBP":"Great British Pounds","JPY":"Japanese Yen","MXN":"Mexican Pesos","ZAR":"South African Rands","BRL":"Brazilian Reais","CAD":"Canadian Dollars","CHF":"Swiss Francs",:%val) }
CurrencyOdbcToLogical(%val) methodimpl {
	RETURN $case(%val,"US Dollars":"USD","Euros":"EUR","Indian Rupees":"INR","Great British Pounds":"GBP","Japanese Yen":"JPY","Mexican Pesos":"MXN","South African Rands":"ZAR","Brazilian Reais":"BRL","Canadian Dollars":"CAD","Swiss Francs":"CHF",:%val) }
ImageDelete(streamvalue) methodimpl {
	Set $ZTrap = "CatchError"
	Quit $select(streamvalue="":$$Error^%apiOBJ(5813,$classname()),1:##class(%Stream.GlobalBinary).%Delete($select(streamvalue="":"",1:$listbuild(streamvalue_"","%Stream.GlobalBinary","^FCE.CurrencyS"))))
CatchError	Set $ZTrap=""
	Quit $$Error^%apiOBJ(5002,$zerror) }
ImageGetObject(force=0) methodimpl {
	Quit:r%Image="" $select(i%Image="":"",1:$listbuild(i%Image_"","%Stream.GlobalBinary","^FCE.CurrencyS")) Quit:(''..Image.%GetSwizzleObject(force,.oid)) oid Quit "" }
ImageGetObjectId(force=0) methodimpl {
	Quit $listget(..ImageGetObject(force)) }
ImageGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.CurrencyD(id)),4),1:"") }
ImageGetSwizzled(noswizzle=0) methodimpl {
	If i%Image="" Set modstate=$system.CLS.GetSModifiedBits() Set oref=..ImageNewObject("") Do $system.CLS.SetSModifiedBits(modstate) Set r%Image=0,r%Image=oref Quit oref
	Set oref=##class(%Stream.GlobalBinary).%Open($select(i%Image="":"",1:$listbuild(i%Image_"","%Stream.GlobalBinary","^FCE.CurrencyS")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%Image=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
ImageNewObject(type="") methodimpl {
	Set $ZTrap = "CatchError"
	Set sc=1
	If type="" {
		Set type = "%Stream.GlobalBinary"
	} ElseIf '($classmethod(type,"%IsA","%Stream.GlobalBinary")) {
		Set sc=$$Error^%apiOBJ(5833,"FCE.Currency","Image") Quit ""
	}
	Set newobject=$classmethod(type,"%New","^FCE.CurrencyS") If newobject="" Quit ""
	Set r%Image=0,i%Image=0,r%Image=newobject,i%Image=""
	Quit newobject
CatchError	Set $ZTrap=""
	If (''sc) Set sc = $$Error^%apiOBJ(5002,$ze)
	Quit "" }
ImageOid(streamvalue,external="") methodimpl {
	Quit $s($isobject(streamvalue):streamvalue.%Oid(),1:$select(streamvalue="":"",1:$listbuild(streamvalue_"","%Stream.GlobalBinary","^FCE.CurrencyS"))) }
ImageOpen(streamvalue) methodimpl {
	If $get(streamvalue)="" {
		Set object=##class(%Stream.GlobalBinary).%New("^FCE.CurrencyS")
	} elseif $isobject(streamvalue)=1 {
		set object = streamvalue
	} else {
		Set object=##class(%Stream.GlobalBinary).%Open($select(streamvalue="":"",1:$listbuild(streamvalue_"","%Stream.GlobalBinary","^FCE.CurrencyS")))
		If $isobject(object)=1,object.%IsNull()=1 Quit ""
	}
	Quit object }
ImageSet(newvalue) methodimpl {
	If newvalue="" Set r%Image=0,i%Image=0,r%Image="",i%Image="" Quit 1
	If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
	If newvalue=r%Image Quit 1
	If newvalue.%IsA("%Stream.GlobalBinary") {
		Set r%Image=newvalue.%ConstructClone(0,,"^FCE.CurrencyS"),i%Image=1,i%Image=""
	} Else {
		Do ..Image.Clear()
		Quit ..Image.CopyFrom(newvalue)
	}
	Quit 1 }
ImageSetObject(newvalue) methodimpl {
	If newvalue'="",$data(i%Image,tmp),tmp=$listget(newvalue) Quit 1
	Set i%Image=$listget(newvalue),r%Image=0,r%Image=""
	Quit 1 }
ImageSetObjectId(newid) methodimpl {
	Quit ..ImageSetObject($select(newid="":"",1:$listbuild(newid_""))) }
ImageUnSwizzle(force=0) methodimpl {
	If r%Image="" Quit 1
	Set sc=..Image.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%Image="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%Image=$listget(newvalue)
	Quit 1 }
USDExchangeRateDisplayToLogical(%val) methodimpl {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
USDExchangeRateGetStored(id) methodimpl {
	Quit $Select(id'="":$listget($g(^FCE.CurrencyD(id)),3),1:"") }
USDExchangeRateIsValid(%val) methodimpl {
	Quit $select($isvalidnum(%val,3,.001,):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,.001)) }
USDExchangeRateLogicalToDisplay(%val) methodimpl {
	Quit $s(%val="":"",1:$fn(%val,"",3)) }
USDExchangeRateNormalize(%val) methodimpl {
	Quit $normalize($decimal(%val),3) }
ExtentClose(%qHandle) [ SQLCODE ] methodimpl {
	New SQLCODE Set SQLCODE=0
	Do:$isobject($get(%qHandle)) %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentExecute(%qHandle) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM %NOPARALLEL FCE.Currency)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	if $g(%qHandle)'="" { s SQLCODE=-101 } else { try { s %qHandle="%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"E0OEPS3HSsXwPm5mmI4gPRhJa1H",%qHandle=$classmethod(%qHandle,"%New") } catch { if ($ze'["<CLASS DOES NOT EXIST>"&&($ze'["<NOROUTINE>")||($ze'[%qHandle)),$ze'["<ZSQLU>" { throw } } if '$isobject(%qHandle) { s %qHandle=$$%0dsqlL() } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE_" %msg = "_$g(%msg)) } Else { Set sc=1 }
	Quit sc }
ExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
ExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() i SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>30000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
ExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport(row,60)
	}
	RETURN }
 q
%0dsqlL()	n %xxsql,%xxoref
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM %NOPARALLEL FCE . Currency"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	s %xxoref=$$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),",1,QExtent,","FCE.Currency.CLS",1)
	q %xxoref
ExtentFunc() methodimpl {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM %NOPARALLEL FCE . Currency /*#OPTIONS {""DynamicSQL"":1} */")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
ExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) methodimpl {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) methodimpl
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Currency","FCE","",$c(0,0,0,0,0,0,0,0,0,0,0,1,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1
CurrencyIndexCheckUnique(id="",pValue...) [ SQLCODE,id,pValue ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	if $Get(pValue(1))'="" {
		 ;---&sql(SELECT 1 as _PassFail FROM FCE.Currency WHERE Currency = :pValue(1) AND %ID <> :id)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, id, pValue
		try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EiMWAYijA0gd85s2iLtiiElYPDi","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"EiMWAYijA0gd85s2iLtiiElYPDi"))||($ze["<ZSQLU>") { d %0dsqlP } else { throw } }
		Quit SQLCODE=100
	} else { quit 1 } }
 q
%0dsqlP	n %xxsql
	s %xxsql("S",1)="SELECT 1 AS _PassFail FROM FCE . Currency WHERE Currency = :pValue(1) AND %ID <> :id"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Currency.CLS")
	return
CurrencyIndexCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s exists=..CurrencyIndexExists(K1,.id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"CurrencyIndex",K1),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..CurrencyIndexExists(K1,.idcheck) d:concurrency ..%UnlockId(id,1,0) quit $s(('exists)||(id'=idcheck):$$Error^%apiOBJ(5797,$classname(),"CurrencyIndex",K1),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
CurrencyIndexDelete(K1,concurrency=-1) methodimpl {
	i ..CurrencyIndexExists(K1,.id){ s sc=..%DeleteId(id,concurrency) } Else { s sc=$$Error^%apiOBJ(5771,"CurrencyIndex",K1) }
	QUIT sc }
CurrencyIndexExists(K1,id="") [ K1,SQLCODE,id ] methodimpl { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Currency WHERE (:K1 is not null and Currency = :K1) OR (:K1 IS NULL AND Currency IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ECSWOYTbkCNHEHKQ2iwTGIrkujZ","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ECSWOYTbkCNHEHKQ2iwTGIrkujZ"))||($ze["<ZSQLU>") { d %0dsqlR } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Currency WHERE ( :K1 IS NOT NULL AND Currency = :K1 ) OR ( :K1 IS NULL AND Currency IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","FCE",0,"",),,"FCE.Currency.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
CurrencyIndexOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
 i ..CurrencyIndexExists(K1,.id){ s return=..%OpenId(id,concurrency,.sc) } Else { s sc=$$Error^%apiOBJ(5770,"CurrencyIndex",K1),return="" }
 QUIT return }
zCurrencyIndexSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::CurrencyIndexSQLCheckUnique")
zCurrencyIndexSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key CurrencyIndex.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=..CurrencyIndexSQLFindRowIDByConstraint($lb(%pVal(1)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Currency"_":"_"CurrencyIndex") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.CurrencyI("CurrencyIndex",%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zCurrencyIndexSQLFindPKeyByCons(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::CurrencyIndexSQLFindPKeyByConstraint")
zCurrencyIndexSQLFindRowIDByCon(%con,pInternal=0) methodimpl
	// Get ROWID value for UNIQUE Key CurrencyIndex value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(2)=$lg(%con,1)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM FCE.Currency WHERE Currency = :%d(2))
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %d, %msg, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ETJldZsajZbbIg4frtE3d9MkQje","%New") } catch { if ($ze["<CLASS DOES NOT EXIST>"||($ze["<NOROUTINE>"))&&($ze[("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ .","pudssssssssss")_$case($zu(115,2),0:".u",1:".x",3:".v",:"."_$zu(115,2))_"ETJldZsajZbbIg4frtE3d9MkQje"))||($ze["<ZSQLU>") { d %0dsqlT } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlT	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM FCE . Currency WHERE Currency = :%d(2)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySystem")="",%xxsql("I","%systemInclude")=""
	s %xxsql("NS")="IRISAPP",%xxsql("PToolsCTI")=$LB(,"-1:0:0::0:1")
	do BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","FCE",0,"",),,"FCE.Currency.CLS")
	return:$g(%IRISSQLCachedCompileOnly)
	if $g(SQLCODE) { try { set id="" } catch {} }
	return
IDKEYCheck(K1,lockonly=0,concurrency=-1) methodimpl {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
IDKEYDelete(K1,concurrency=-1) methodimpl {
	Quit ..%DeleteId(.K1,concurrency) }
IDKEYExists(K1,id="") methodimpl {
	s id=K1 q ..%ExistsId(K1) }
IDKEYOpen(K1,concurrency=-1,sc) methodimpl { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...) methodimpl
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"FCE"_"."_"Currency"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^FCE.CurrencyD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0) methodimpl
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
%sqllistUCQ(t) public	{
	s t("%0dsqlA")="",t("%0dsqlC")="",t("%0dsqlF")="",t("%0dsqlH")="",t("%0dsqlJ")="",t("%0dsqlL")="",t("%0dsqlP")="",t("%0dsqlR")=""
	s t("%0dsqlT")=""
}